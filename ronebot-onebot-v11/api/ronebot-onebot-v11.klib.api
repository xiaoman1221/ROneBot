// Klib ABI Dump
// Targets: [linuxArm64, linuxX64, macosArm64, macosX64, mingwX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <cn.rtast.rob:ronebot-onebot-v11>
open annotation class cn.rtast.rob.annotations/InternalOneBot11Api : kotlin/Annotation { // cn.rtast.rob.annotations/InternalOneBot11Api|null[0]
    constructor <init>() // cn.rtast.rob.annotations/InternalOneBot11Api.<init>|<init>(){}[0]
}

open annotation class cn.rtast.rob.annotations/OneBot11CompatibilityApi : kotlin/Annotation { // cn.rtast.rob.annotations/OneBot11CompatibilityApi|null[0]
    constructor <init>() // cn.rtast.rob.annotations/OneBot11CompatibilityApi.<init>|<init>(){}[0]
}

open annotation class cn.rtast.rob.onebot.dsl/MessageChainDsl : kotlin/Annotation { // cn.rtast.rob.onebot.dsl/MessageChainDsl|null[0]
    constructor <init>() // cn.rtast.rob.onebot.dsl/MessageChainDsl.<init>|<init>(){}[0]
}

final enum class cn.rtast.rob.enums/AIRecordCharacter : kotlin/Enum<cn.rtast.rob.enums/AIRecordCharacter> { // cn.rtast.rob.enums/AIRecordCharacter|null[0]
    enum entry AoJiaoShaoNv // cn.rtast.rob.enums/AIRecordCharacter.AoJiaoShaoNv|null[0]
    enum entry CiXingDaShu // cn.rtast.rob.enums/AIRecordCharacter.CiXingDaShu|null[0]
    enum entry DaJi // cn.rtast.rob.enums/AIRecordCharacter.DaJi|null[0]
    enum entry DiChenNanSheng // cn.rtast.rob.enums/AIRecordCharacter.DiChenNanSheng|null[0]
    enum entry DieXiNanYou // cn.rtast.rob.enums/AIRecordCharacter.DieXiNanYou|null[0]
    enum entry DongBeiLaoMei // cn.rtast.rob.enums/AIRecordCharacter.DongBeiLaoMei|null[0]
    enum entry GuangXiBiaoGe // cn.rtast.rob.enums/AIRecordCharacter.GuangXiBiaoGe|null[0]
    enum entry HanHanXiaoDi // cn.rtast.rob.enums/AIRecordCharacter.HanHanXiaoDi|null[0]
    enum entry HanHouLaoGe // cn.rtast.rob.enums/AIRecordCharacter.HanHouLaoGe|null[0]
    enum entry LiZeYan // cn.rtast.rob.enums/AIRecordCharacter.LiZeYan|null[0]
    enum entry LinJiaXiaoMei // cn.rtast.rob.enums/AIRecordCharacter.LinJiaXiaoMei|null[0]
    enum entry LvBu // cn.rtast.rob.enums/AIRecordCharacter.LvBu|null[0]
    enum entry MonkeyKing // cn.rtast.rob.enums/AIRecordCharacter.MonkeyKing|null[0]
    enum entry NuanXinJieJie // cn.rtast.rob.enums/AIRecordCharacter.NuanXinJieJie|null[0]
    enum entry ShuXiangShaoNv // cn.rtast.rob.enums/AIRecordCharacter.ShuXiangShaoNv|null[0]
    enum entry ShuoShuXianSheng // cn.rtast.rob.enums/AIRecordCharacter.ShuoShuXianSheng|null[0]
    enum entry SiLang // cn.rtast.rob.enums/AIRecordCharacter.SiLang|null[0]
    enum entry SuXinJieJie // cn.rtast.rob.enums/AIRecordCharacter.SuXinJieJie|null[0]
    enum entry WenRouMeiMei // cn.rtast.rob.enums/AIRecordCharacter.WenRouMeiMei|null[0]
    enum entry WenYiShaoNv // cn.rtast.rob.enums/AIRecordCharacter.WenYiShaoNv|null[0]
    enum entry XiaoXin // cn.rtast.rob.enums/AIRecordCharacter.XiaoXin|null[0]
    enum entry YuanQiShaoNv // cn.rtast.rob.enums/AIRecordCharacter.YuanQiShaoNv|null[0]

    final val characterId // cn.rtast.rob.enums/AIRecordCharacter.characterId|{}characterId[0]
        final fun <get-characterId>(): kotlin/String // cn.rtast.rob.enums/AIRecordCharacter.characterId.<get-characterId>|<get-characterId>(){}[0]
    final val chineseName // cn.rtast.rob.enums/AIRecordCharacter.chineseName|{}chineseName[0]
        final fun <get-chineseName>(): kotlin/String // cn.rtast.rob.enums/AIRecordCharacter.chineseName.<get-chineseName>|<get-chineseName>(){}[0]
    final val entries // cn.rtast.rob.enums/AIRecordCharacter.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<cn.rtast.rob.enums/AIRecordCharacter> // cn.rtast.rob.enums/AIRecordCharacter.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): cn.rtast.rob.enums/AIRecordCharacter // cn.rtast.rob.enums/AIRecordCharacter.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<cn.rtast.rob.enums/AIRecordCharacter> // cn.rtast.rob.enums/AIRecordCharacter.values|values#static(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // cn.rtast.rob.enums/AIRecordCharacter.Companion|null[0]
        final fun forChineseName(kotlin/String): cn.rtast.rob.enums/AIRecordCharacter? // cn.rtast.rob.enums/AIRecordCharacter.Companion.forChineseName|forChineseName(kotlin.String){}[0]
        final fun forName(kotlin/String): cn.rtast.rob.enums/AIRecordCharacter? // cn.rtast.rob.enums/AIRecordCharacter.Companion.forName|forName(kotlin.String){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.enums/AIRecordCharacter> // cn.rtast.rob.enums/AIRecordCharacter.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // cn.rtast.rob.enums/AIRecordCharacter.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

final enum class cn.rtast.rob.enums/BusinessName : kotlin/Enum<cn.rtast.rob.enums/BusinessName> { // cn.rtast.rob.enums/BusinessName|null[0]
    enum entry BigBigSuperVIP // cn.rtast.rob.enums/BusinessName.BigBigSuperVIP|null[0]
    enum entry BigVIP // cn.rtast.rob.enums/BusinessName.BigVIP|null[0]
    enum entry BlueDiamond // cn.rtast.rob.enums/BusinessName.BlueDiamond|null[0]
    enum entry CF_VIP // cn.rtast.rob.enums/BusinessName.CF_VIP|null[0]
    enum entry CoupleDiamond // cn.rtast.rob.enums/BusinessName.CoupleDiamond|null[0]
    enum entry CoupleVIP // cn.rtast.rob.enums/BusinessName.CoupleVIP|null[0]
    enum entry GreenDiamond // cn.rtast.rob.enums/BusinessName.GreenDiamond|null[0]
    enum entry RedDiamond // cn.rtast.rob.enums/BusinessName.RedDiamond|null[0]
    enum entry SVIP_TENCENT_VIDEO // cn.rtast.rob.enums/BusinessName.SVIP_TENCENT_VIDEO|null[0]
    enum entry TencentVideo // cn.rtast.rob.enums/BusinessName.TencentVideo|null[0]
    enum entry VIP // cn.rtast.rob.enums/BusinessName.VIP|null[0]
    enum entry WeShareVIP // cn.rtast.rob.enums/BusinessName.WeShareVIP|null[0]
    enum entry YellowDiamond // cn.rtast.rob.enums/BusinessName.YellowDiamond|null[0]

    final val description // cn.rtast.rob.enums/BusinessName.description|{}description[0]
        final fun <get-description>(): kotlin/String // cn.rtast.rob.enums/BusinessName.description.<get-description>|<get-description>(){}[0]
    final val entries // cn.rtast.rob.enums/BusinessName.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<cn.rtast.rob.enums/BusinessName> // cn.rtast.rob.enums/BusinessName.entries.<get-entries>|<get-entries>#static(){}[0]
    final val type // cn.rtast.rob.enums/BusinessName.type|{}type[0]
        final fun <get-type>(): kotlin/Int // cn.rtast.rob.enums/BusinessName.type.<get-type>|<get-type>(){}[0]

    final fun valueOf(kotlin/String): cn.rtast.rob.enums/BusinessName // cn.rtast.rob.enums/BusinessName.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<cn.rtast.rob.enums/BusinessName> // cn.rtast.rob.enums/BusinessName.values|values#static(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // cn.rtast.rob.enums/BusinessName.Companion|null[0]
        final fun forName(kotlin/String): cn.rtast.rob.enums/BusinessName? // cn.rtast.rob.enums/BusinessName.Companion.forName|forName(kotlin.String){}[0]
        final fun forType(kotlin/Int): cn.rtast.rob.enums/BusinessName? // cn.rtast.rob.enums/BusinessName.Companion.forType|forType(kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.enums/BusinessName> // cn.rtast.rob.enums/BusinessName.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // cn.rtast.rob.enums/BusinessName.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

final enum class cn.rtast.rob.enums/EssenceMessageType : kotlin/Enum<cn.rtast.rob.enums/EssenceMessageType> { // cn.rtast.rob.enums/EssenceMessageType|null[0]
    enum entry image // cn.rtast.rob.enums/EssenceMessageType.image|null[0]
    enum entry text // cn.rtast.rob.enums/EssenceMessageType.text|null[0]
    enum entry video // cn.rtast.rob.enums/EssenceMessageType.video|null[0]

    final val entries // cn.rtast.rob.enums/EssenceMessageType.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<cn.rtast.rob.enums/EssenceMessageType> // cn.rtast.rob.enums/EssenceMessageType.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): cn.rtast.rob.enums/EssenceMessageType // cn.rtast.rob.enums/EssenceMessageType.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<cn.rtast.rob.enums/EssenceMessageType> // cn.rtast.rob.enums/EssenceMessageType.values|values#static(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // cn.rtast.rob.enums/EssenceMessageType.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.enums/EssenceMessageType> // cn.rtast.rob.enums/EssenceMessageType.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // cn.rtast.rob.enums/EssenceMessageType.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

final enum class cn.rtast.rob.enums/HonorType : kotlin/Enum<cn.rtast.rob.enums/HonorType> { // cn.rtast.rob.enums/HonorType|null[0]
    enum entry All // cn.rtast.rob.enums/HonorType.All|null[0]
    enum entry Emotion // cn.rtast.rob.enums/HonorType.Emotion|null[0]
    enum entry Legend // cn.rtast.rob.enums/HonorType.Legend|null[0]
    enum entry Performer // cn.rtast.rob.enums/HonorType.Performer|null[0]
    enum entry StrongNewBie // cn.rtast.rob.enums/HonorType.StrongNewBie|null[0]

    final val entries // cn.rtast.rob.enums/HonorType.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<cn.rtast.rob.enums/HonorType> // cn.rtast.rob.enums/HonorType.entries.<get-entries>|<get-entries>#static(){}[0]
    final val type // cn.rtast.rob.enums/HonorType.type|{}type[0]
        final fun <get-type>(): kotlin/String // cn.rtast.rob.enums/HonorType.type.<get-type>|<get-type>(){}[0]

    final fun valueOf(kotlin/String): cn.rtast.rob.enums/HonorType // cn.rtast.rob.enums/HonorType.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<cn.rtast.rob.enums/HonorType> // cn.rtast.rob.enums/HonorType.values|values#static(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // cn.rtast.rob.enums/HonorType.Companion|null[0]
        final fun forName(kotlin/String): cn.rtast.rob.enums/HonorType? // cn.rtast.rob.enums/HonorType.Companion.forName|forName(kotlin.String){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.enums/HonorType> // cn.rtast.rob.enums/HonorType.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // cn.rtast.rob.enums/HonorType.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

final enum class cn.rtast.rob.enums/InboundMessageType : kotlin/Enum<cn.rtast.rob.enums/InboundMessageType> { // cn.rtast.rob.enums/InboundMessageType|null[0]
    enum entry group // cn.rtast.rob.enums/InboundMessageType.group|null[0]
    enum entry private // cn.rtast.rob.enums/InboundMessageType.private|null[0]

    final val entries // cn.rtast.rob.enums/InboundMessageType.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<cn.rtast.rob.enums/InboundMessageType> // cn.rtast.rob.enums/InboundMessageType.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): cn.rtast.rob.enums/InboundMessageType // cn.rtast.rob.enums/InboundMessageType.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<cn.rtast.rob.enums/InboundMessageType> // cn.rtast.rob.enums/InboundMessageType.values|values#static(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // cn.rtast.rob.enums/InboundMessageType.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.enums/InboundMessageType> // cn.rtast.rob.enums/InboundMessageType.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // cn.rtast.rob.enums/InboundMessageType.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

final enum class cn.rtast.rob.enums/MiniAppArkType : kotlin/Enum<cn.rtast.rob.enums/MiniAppArkType> { // cn.rtast.rob.enums/MiniAppArkType|null[0]
    enum entry bili // cn.rtast.rob.enums/MiniAppArkType.bili|null[0]
    enum entry weibo // cn.rtast.rob.enums/MiniAppArkType.weibo|null[0]

    final val entries // cn.rtast.rob.enums/MiniAppArkType.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<cn.rtast.rob.enums/MiniAppArkType> // cn.rtast.rob.enums/MiniAppArkType.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): cn.rtast.rob.enums/MiniAppArkType // cn.rtast.rob.enums/MiniAppArkType.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<cn.rtast.rob.enums/MiniAppArkType> // cn.rtast.rob.enums/MiniAppArkType.values|values#static(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // cn.rtast.rob.enums/MiniAppArkType.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.enums/MiniAppArkType> // cn.rtast.rob.enums/MiniAppArkType.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // cn.rtast.rob.enums/MiniAppArkType.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

final enum class cn.rtast.rob.enums/OnlineStatus : kotlin/Enum<cn.rtast.rob.enums/OnlineStatus> { // cn.rtast.rob.enums/OnlineStatus|null[0]
    enum entry AWAY // cn.rtast.rob.enums/OnlineStatus.AWAY|null[0]
    enum entry BUSY // cn.rtast.rob.enums/OnlineStatus.BUSY|null[0]
    enum entry DO_NOT_DISTURB // cn.rtast.rob.enums/OnlineStatus.DO_NOT_DISTURB|null[0]
    enum entry HIDDEN // cn.rtast.rob.enums/OnlineStatus.HIDDEN|null[0]
    enum entry Online // cn.rtast.rob.enums/OnlineStatus.Online|null[0]
    enum entry Q_ME // cn.rtast.rob.enums/OnlineStatus.Q_ME|null[0]

    final val desc // cn.rtast.rob.enums/OnlineStatus.desc|{}desc[0]
        final fun <get-desc>(): kotlin/String // cn.rtast.rob.enums/OnlineStatus.desc.<get-desc>|<get-desc>(){}[0]
    final val entries // cn.rtast.rob.enums/OnlineStatus.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<cn.rtast.rob.enums/OnlineStatus> // cn.rtast.rob.enums/OnlineStatus.entries.<get-entries>|<get-entries>#static(){}[0]
    final val statusCode // cn.rtast.rob.enums/OnlineStatus.statusCode|{}statusCode[0]
        final fun <get-statusCode>(): kotlin/Int // cn.rtast.rob.enums/OnlineStatus.statusCode.<get-statusCode>|<get-statusCode>(){}[0]

    final fun valueOf(kotlin/String): cn.rtast.rob.enums/OnlineStatus // cn.rtast.rob.enums/OnlineStatus.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<cn.rtast.rob.enums/OnlineStatus> // cn.rtast.rob.enums/OnlineStatus.values|values#static(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // cn.rtast.rob.enums/OnlineStatus.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.enums/OnlineStatus> // cn.rtast.rob.enums/OnlineStatus.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // cn.rtast.rob.enums/OnlineStatus.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

final enum class cn.rtast.rob.enums/RKeyType : kotlin/Enum<cn.rtast.rob.enums/RKeyType> { // cn.rtast.rob.enums/RKeyType|null[0]
    enum entry group // cn.rtast.rob.enums/RKeyType.group|null[0]
    enum entry private // cn.rtast.rob.enums/RKeyType.private|null[0]

    final val entries // cn.rtast.rob.enums/RKeyType.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<cn.rtast.rob.enums/RKeyType> // cn.rtast.rob.enums/RKeyType.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): cn.rtast.rob.enums/RKeyType // cn.rtast.rob.enums/RKeyType.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<cn.rtast.rob.enums/RKeyType> // cn.rtast.rob.enums/RKeyType.values|values#static(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // cn.rtast.rob.enums/RKeyType.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.enums/RKeyType> // cn.rtast.rob.enums/RKeyType.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // cn.rtast.rob.enums/RKeyType.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

final enum class cn.rtast.rob.enums/SegmentType : kotlin/Enum<cn.rtast.rob.enums/SegmentType> { // cn.rtast.rob.enums/SegmentType|null[0]
    enum entry at // cn.rtast.rob.enums/SegmentType.at|null[0]
    enum entry contact // cn.rtast.rob.enums/SegmentType.contact|null[0]
    enum entry dice // cn.rtast.rob.enums/SegmentType.dice|null[0]
    enum entry face // cn.rtast.rob.enums/SegmentType.face|null[0]
    enum entry file // cn.rtast.rob.enums/SegmentType.file|null[0]
    enum entry forward // cn.rtast.rob.enums/SegmentType.forward|null[0]
    enum entry image // cn.rtast.rob.enums/SegmentType.image|null[0]
    enum entry json // cn.rtast.rob.enums/SegmentType.json|null[0]
    enum entry location // cn.rtast.rob.enums/SegmentType.location|null[0]
    enum entry markdown // cn.rtast.rob.enums/SegmentType.markdown|null[0]
    enum entry mface // cn.rtast.rob.enums/SegmentType.mface|null[0]
    enum entry music // cn.rtast.rob.enums/SegmentType.music|null[0]
    enum entry node // cn.rtast.rob.enums/SegmentType.node|null[0]
    enum entry poke // cn.rtast.rob.enums/SegmentType.poke|null[0]
    enum entry record // cn.rtast.rob.enums/SegmentType.record|null[0]
    enum entry reply // cn.rtast.rob.enums/SegmentType.reply|null[0]
    enum entry rps // cn.rtast.rob.enums/SegmentType.rps|null[0]
    enum entry shake // cn.rtast.rob.enums/SegmentType.shake|null[0]
    enum entry share // cn.rtast.rob.enums/SegmentType.share|null[0]
    enum entry text // cn.rtast.rob.enums/SegmentType.text|null[0]
    enum entry video // cn.rtast.rob.enums/SegmentType.video|null[0]
    enum entry xml // cn.rtast.rob.enums/SegmentType.xml|null[0]

    final val entries // cn.rtast.rob.enums/SegmentType.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<cn.rtast.rob.enums/SegmentType> // cn.rtast.rob.enums/SegmentType.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): cn.rtast.rob.enums/SegmentType // cn.rtast.rob.enums/SegmentType.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<cn.rtast.rob.enums/SegmentType> // cn.rtast.rob.enums/SegmentType.values|values#static(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // cn.rtast.rob.enums/SegmentType.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.enums/SegmentType> // cn.rtast.rob.enums/SegmentType.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // cn.rtast.rob.enums/SegmentType.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

final enum class cn.rtast.rob.enums/StatusId : kotlin/Enum<cn.rtast.rob.enums/StatusId> { // cn.rtast.rob.enums/StatusId|null[0]
    enum entry AWAY // cn.rtast.rob.enums/StatusId.AWAY|null[0]
    enum entry BAD_LUCK_BE_GONE // cn.rtast.rob.enums/StatusId.BAD_LUCK_BE_GONE|null[0]
    enum entry BORED // cn.rtast.rob.enums/StatusId.BORED|null[0]
    enum entry BUSY // cn.rtast.rob.enums/StatusId.BUSY|null[0]
    enum entry CANDID // cn.rtast.rob.enums/StatusId.CANDID|null[0]
    enum entry CRUSHED // cn.rtast.rob.enums/StatusId.CRUSHED|null[0]
    enum entry CUSTOM_STATUS // cn.rtast.rob.enums/StatusId.CUSTOM_STATUS|null[0]
    enum entry DOING_GOOD_THINGS // cn.rtast.rob.enums/StatusId.DOING_GOOD_THINGS|null[0]
    enum entry DOING_HOMEWORK // cn.rtast.rob.enums/StatusId.DOING_HOMEWORK|null[0]
    enum entry DO_NOT_DISTURB // cn.rtast.rob.enums/StatusId.DO_NOT_DISTURB|null[0]
    enum entry DREAM_TOGETHER // cn.rtast.rob.enums/StatusId.DREAM_TOGETHER|null[0]
    enum entry EASY_GOING // cn.rtast.rob.enums/StatusId.EASY_GOING|null[0]
    enum entry EMO // cn.rtast.rob.enums/StatusId.EMO|null[0]
    enum entry EMPTY // cn.rtast.rob.enums/StatusId.EMPTY|null[0]
    enum entry FULL_OF_ENERGY // cn.rtast.rob.enums/StatusId.FULL_OF_ENERGY|null[0]
    enum entry GOOD_LUCK // cn.rtast.rob.enums/StatusId.GOOD_LUCK|null[0]
    enum entry HARD_TO_EXPLAIN // cn.rtast.rob.enums/StatusId.HARD_TO_EXPLAIN|null[0]
    enum entry HIGH_SPIRITED // cn.rtast.rob.enums/StatusId.HIGH_SPIRITED|null[0]
    enum entry INVISIBLE // cn.rtast.rob.enums/StatusId.INVISIBLE|null[0]
    enum entry IN_LOVE // cn.rtast.rob.enums/StatusId.IN_LOVE|null[0]
    enum entry IT_IS_HARD // cn.rtast.rob.enums/StatusId.IT_IS_HARD|null[0]
    enum entry I_AM_FINE // cn.rtast.rob.enums/StatusId.I_AM_FINE|null[0]
    enum entry I_AM_OK // cn.rtast.rob.enums/StatusId.I_AM_OK|null[0]
    enum entry LISTENING_TO_MUSIC // cn.rtast.rob.enums/StatusId.LISTENING_TO_MUSIC|null[0]
    enum entry LOVE_YOU // cn.rtast.rob.enums/StatusId.LOVE_YOU|null[0]
    enum entry MY_BATTERY // cn.rtast.rob.enums/StatusId.MY_BATTERY|null[0]
    enum entry ONLINE // cn.rtast.rob.enums/StatusId.ONLINE|null[0]
    enum entry OUT_FOR_FUN // cn.rtast.rob.enums/StatusId.OUT_FOR_FUN|null[0]
    enum entry Q_ME // cn.rtast.rob.enums/StatusId.Q_ME|null[0]
    enum entry SEEKING_PARTNER // cn.rtast.rob.enums/StatusId.SEEKING_PARTNER|null[0]
    enum entry SLACKING_OFF // cn.rtast.rob.enums/StatusId.SLACKING_OFF|null[0]
    enum entry SLEEPING // cn.rtast.rob.enums/StatusId.SLEEPING|null[0]
    enum entry STAYING_UP_LATE // cn.rtast.rob.enums/StatusId.STAYING_UP_LATE|null[0]
    enum entry STEPS_TODAY // cn.rtast.rob.enums/StatusId.STEPS_TODAY|null[0]
    enum entry STUDYING // cn.rtast.rob.enums/StatusId.STUDYING|null[0]
    enum entry TIMI // cn.rtast.rob.enums/StatusId.TIMI|null[0]
    enum entry TRAVELING // cn.rtast.rob.enums/StatusId.TRAVELING|null[0]
    enum entry WANT_PEACE // cn.rtast.rob.enums/StatusId.WANT_PEACE|null[0]
    enum entry WATCHING_DRAMA // cn.rtast.rob.enums/StatusId.WATCHING_DRAMA|null[0]
    enum entry WEAK_SIGNAL // cn.rtast.rob.enums/StatusId.WEAK_SIGNAL|null[0]
    enum entry WEATHER_TODAY // cn.rtast.rob.enums/StatusId.WEATHER_TODAY|null[0]
    enum entry WORKING_HARD // cn.rtast.rob.enums/StatusId.WORKING_HARD|null[0]

    final val entries // cn.rtast.rob.enums/StatusId.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<cn.rtast.rob.enums/StatusId> // cn.rtast.rob.enums/StatusId.entries.<get-entries>|<get-entries>#static(){}[0]
    final val message // cn.rtast.rob.enums/StatusId.message|{}message[0]
        final fun <get-message>(): kotlin/String // cn.rtast.rob.enums/StatusId.message.<get-message>|<get-message>(){}[0]
    final val statusId // cn.rtast.rob.enums/StatusId.statusId|{}statusId[0]
        final fun <get-statusId>(): kotlin/UInt // cn.rtast.rob.enums/StatusId.statusId.<get-statusId>|<get-statusId>(){}[0]

    final fun valueOf(kotlin/String): cn.rtast.rob.enums/StatusId // cn.rtast.rob.enums/StatusId.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<cn.rtast.rob.enums/StatusId> // cn.rtast.rob.enums/StatusId.values|values#static(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // cn.rtast.rob.enums/StatusId.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.enums/StatusId> // cn.rtast.rob.enums/StatusId.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // cn.rtast.rob.enums/StatusId.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

final enum class cn.rtast.rob.enums/UserRole : kotlin/Enum<cn.rtast.rob.enums/UserRole> { // cn.rtast.rob.enums/UserRole|null[0]
    enum entry admin // cn.rtast.rob.enums/UserRole.admin|null[0]
    enum entry member // cn.rtast.rob.enums/UserRole.member|null[0]
    enum entry owner // cn.rtast.rob.enums/UserRole.owner|null[0]

    final val entries // cn.rtast.rob.enums/UserRole.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<cn.rtast.rob.enums/UserRole> // cn.rtast.rob.enums/UserRole.entries.<get-entries>|<get-entries>#static(){}[0]
    final val order // cn.rtast.rob.enums/UserRole.order|{}order[0]
        final fun <get-order>(): kotlin/Int // cn.rtast.rob.enums/UserRole.order.<get-order>|<get-order>(){}[0]

    final fun valueOf(kotlin/String): cn.rtast.rob.enums/UserRole // cn.rtast.rob.enums/UserRole.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<cn.rtast.rob.enums/UserRole> // cn.rtast.rob.enums/UserRole.values|values#static(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // cn.rtast.rob.enums/UserRole.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.enums/UserRole> // cn.rtast.rob.enums/UserRole.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // cn.rtast.rob.enums/UserRole.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

final enum class cn.rtast.rob.enums/UserSex : kotlin/Enum<cn.rtast.rob.enums/UserSex> { // cn.rtast.rob.enums/UserSex|null[0]
    enum entry female // cn.rtast.rob.enums/UserSex.female|null[0]
    enum entry male // cn.rtast.rob.enums/UserSex.male|null[0]
    enum entry unknown // cn.rtast.rob.enums/UserSex.unknown|null[0]

    final val entries // cn.rtast.rob.enums/UserSex.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<cn.rtast.rob.enums/UserSex> // cn.rtast.rob.enums/UserSex.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): cn.rtast.rob.enums/UserSex // cn.rtast.rob.enums/UserSex.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<cn.rtast.rob.enums/UserSex> // cn.rtast.rob.enums/UserSex.values|values#static(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // cn.rtast.rob.enums/UserSex.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.enums/UserSex> // cn.rtast.rob.enums/UserSex.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // cn.rtast.rob.enums/UserSex.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

final enum class cn.rtast.rob.event.raw.group/GroupRequestsType : kotlin/Enum<cn.rtast.rob.event.raw.group/GroupRequestsType> { // cn.rtast.rob.event.raw.group/GroupRequestsType|null[0]
    enum entry add // cn.rtast.rob.event.raw.group/GroupRequestsType.add|null[0]
    enum entry invite // cn.rtast.rob.event.raw.group/GroupRequestsType.invite|null[0]

    final val entries // cn.rtast.rob.event.raw.group/GroupRequestsType.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<cn.rtast.rob.event.raw.group/GroupRequestsType> // cn.rtast.rob.event.raw.group/GroupRequestsType.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): cn.rtast.rob.event.raw.group/GroupRequestsType // cn.rtast.rob.event.raw.group/GroupRequestsType.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<cn.rtast.rob.event.raw.group/GroupRequestsType> // cn.rtast.rob.event.raw.group/GroupRequestsType.values|values#static(){}[0]
}

abstract interface cn.rtast.rob.actionable/FileEventActionable { // cn.rtast.rob.actionable/FileEventActionable|null[0]
    abstract suspend fun readBytes(): kotlin/ByteArray // cn.rtast.rob.actionable/FileEventActionable.readBytes|readBytes(){}[0]
    abstract suspend fun saveTo(kotlinx.io.files/Path) // cn.rtast.rob.actionable/FileEventActionable.saveTo|saveTo(kotlinx.io.files.Path){}[0]
}

abstract interface cn.rtast.rob.actionable/GroupMessageActionable : cn.rtast.rob.actionable/MessageActionable { // cn.rtast.rob.actionable/GroupMessageActionable|null[0]
    abstract suspend fun deleteEssence() // cn.rtast.rob.actionable/GroupMessageActionable.deleteEssence|deleteEssence(){}[0]
    abstract suspend fun reaction(kotlin/String) // cn.rtast.rob.actionable/GroupMessageActionable.reaction|reaction(kotlin.String){}[0]
    abstract suspend fun setEssence() // cn.rtast.rob.actionable/GroupMessageActionable.setEssence|setEssence(){}[0]
    abstract suspend fun unsetReaction(kotlin/String) // cn.rtast.rob.actionable/GroupMessageActionable.unsetReaction|unsetReaction(kotlin.String){}[0]
    open suspend fun reaction(cn.rtast.rob.enums/QQFace) // cn.rtast.rob.actionable/GroupMessageActionable.reaction|reaction(cn.rtast.rob.enums.QQFace){}[0]
    open suspend fun unsetReaction(cn.rtast.rob.enums/QQFace) // cn.rtast.rob.actionable/GroupMessageActionable.unsetReaction|unsetReaction(cn.rtast.rob.enums.QQFace){}[0]
}

abstract interface cn.rtast.rob.actionable/GroupUserActionable : cn.rtast.rob.actionable/UserActionable { // cn.rtast.rob.actionable/GroupUserActionable|null[0]
    abstract val isAdmin // cn.rtast.rob.actionable/GroupUserActionable.isAdmin|{}isAdmin[0]
        abstract fun <get-isAdmin>(): kotlin/Boolean // cn.rtast.rob.actionable/GroupUserActionable.isAdmin.<get-isAdmin>|<get-isAdmin>(){}[0]
    abstract val isOwner // cn.rtast.rob.actionable/GroupUserActionable.isOwner|{}isOwner[0]
        abstract fun <get-isOwner>(): kotlin/Boolean // cn.rtast.rob.actionable/GroupUserActionable.isOwner.<get-isOwner>|<get-isOwner>(){}[0]
    abstract val name // cn.rtast.rob.actionable/GroupUserActionable.name|{}name[0]
        abstract fun <get-name>(): kotlin/String // cn.rtast.rob.actionable/GroupUserActionable.name.<get-name>|<get-name>(){}[0]

    abstract suspend fun getMemberInfo(): cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo // cn.rtast.rob.actionable/GroupUserActionable.getMemberInfo|getMemberInfo(){}[0]
    abstract suspend fun kick(kotlin/Boolean) // cn.rtast.rob.actionable/GroupUserActionable.kick|kick(kotlin.Boolean){}[0]
    abstract suspend fun poke() // cn.rtast.rob.actionable/GroupUserActionable.poke|poke(){}[0]
    abstract suspend fun privatePoke() // cn.rtast.rob.actionable/GroupUserActionable.privatePoke|privatePoke(){}[0]
    abstract suspend fun setGroupAdmin(kotlin/Boolean) // cn.rtast.rob.actionable/GroupUserActionable.setGroupAdmin|setGroupAdmin(kotlin.Boolean){}[0]
    abstract suspend fun setGroupCard(kotlin/String?) // cn.rtast.rob.actionable/GroupUserActionable.setGroupCard|setGroupCard(kotlin.String?){}[0]
    open suspend fun ban() // cn.rtast.rob.actionable/GroupUserActionable.ban|ban(){}[0]
    open suspend fun ban(kotlin/Int) // cn.rtast.rob.actionable/GroupUserActionable.ban|ban(kotlin.Int){}[0]
    open suspend fun kick() // cn.rtast.rob.actionable/GroupUserActionable.kick|kick(){}[0]
    open suspend fun unban() // cn.rtast.rob.actionable/GroupUserActionable.unban|unban(){}[0]
    open suspend fun unsetGroupAdmin() // cn.rtast.rob.actionable/GroupUserActionable.unsetGroupAdmin|unsetGroupAdmin(){}[0]
    open suspend fun unsetGroupCard() // cn.rtast.rob.actionable/GroupUserActionable.unsetGroupCard|unsetGroupCard(){}[0]
}

abstract interface cn.rtast.rob.actionable/MessageActionable { // cn.rtast.rob.actionable/MessageActionable|null[0]
    abstract suspend fun markAsRead() // cn.rtast.rob.actionable/MessageActionable.markAsRead|markAsRead(){}[0]
    abstract suspend fun reply(cn.rtast.rob.onebot/MessageChain): kotlin/Long? // cn.rtast.rob.actionable/MessageActionable.reply|reply(cn.rtast.rob.onebot.MessageChain){}[0]
    abstract suspend fun reply(cn.rtast.rob.onebot/NodeMessageChain): cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId? // cn.rtast.rob.actionable/MessageActionable.reply|reply(cn.rtast.rob.onebot.NodeMessageChain){}[0]
    abstract suspend fun reply(cn.rtast.rob.segment/Segment): kotlin/Long? // cn.rtast.rob.actionable/MessageActionable.reply|reply(cn.rtast.rob.segment.Segment){}[0]
    abstract suspend fun reply(kotlin.collections/List<cn.rtast.rob.segment/Segment>): kotlin/Long? // cn.rtast.rob.actionable/MessageActionable.reply|reply(kotlin.collections.List<cn.rtast.rob.segment.Segment>){}[0]
    abstract suspend fun reply(kotlin/String): kotlin/Long? // cn.rtast.rob.actionable/MessageActionable.reply|reply(kotlin.String){}[0]
    abstract suspend fun replyAsync(cn.rtast.rob.onebot/MessageChain) // cn.rtast.rob.actionable/MessageActionable.replyAsync|replyAsync(cn.rtast.rob.onebot.MessageChain){}[0]
    abstract suspend fun replyAsync(cn.rtast.rob.onebot/NodeMessageChain) // cn.rtast.rob.actionable/MessageActionable.replyAsync|replyAsync(cn.rtast.rob.onebot.NodeMessageChain){}[0]
    abstract suspend fun replyAsync(cn.rtast.rob.segment/Segment) // cn.rtast.rob.actionable/MessageActionable.replyAsync|replyAsync(cn.rtast.rob.segment.Segment){}[0]
    abstract suspend fun replyAsync(kotlin.collections/List<cn.rtast.rob.segment/Segment>) // cn.rtast.rob.actionable/MessageActionable.replyAsync|replyAsync(kotlin.collections.List<cn.rtast.rob.segment.Segment>){}[0]
    abstract suspend fun replyAsync(kotlin/String) // cn.rtast.rob.actionable/MessageActionable.replyAsync|replyAsync(kotlin.String){}[0]
    abstract suspend fun revoke(kotlin.time/Duration) // cn.rtast.rob.actionable/MessageActionable.revoke|revoke(kotlin.time.Duration){}[0]
    abstract suspend fun revoke(kotlin/Int) // cn.rtast.rob.actionable/MessageActionable.revoke|revoke(kotlin.Int){}[0]
    abstract suspend fun revokeId(kotlin.time/Duration, kotlin/Long) // cn.rtast.rob.actionable/MessageActionable.revokeId|revokeId(kotlin.time.Duration;kotlin.Long){}[0]
    abstract suspend fun revokeId(kotlin/Int, kotlin/Long) // cn.rtast.rob.actionable/MessageActionable.revokeId|revokeId(kotlin.Int;kotlin.Long){}[0]
    abstract suspend fun sendMessage(cn.rtast.rob.onebot/MessageChain): kotlin/Long? // cn.rtast.rob.actionable/MessageActionable.sendMessage|sendMessage(cn.rtast.rob.onebot.MessageChain){}[0]
    abstract suspend fun sendMessage(cn.rtast.rob.segment/Segment): kotlin/Long? // cn.rtast.rob.actionable/MessageActionable.sendMessage|sendMessage(cn.rtast.rob.segment.Segment){}[0]
    abstract suspend fun sendMessage(kotlin.collections/List<cn.rtast.rob.segment/Segment>): kotlin/Long? // cn.rtast.rob.actionable/MessageActionable.sendMessage|sendMessage(kotlin.collections.List<cn.rtast.rob.segment.Segment>){}[0]
    abstract suspend fun sendMessage(kotlin/String): kotlin/Long? // cn.rtast.rob.actionable/MessageActionable.sendMessage|sendMessage(kotlin.String){}[0]
    abstract suspend fun sendMessageAsync(cn.rtast.rob.onebot/MessageChain) // cn.rtast.rob.actionable/MessageActionable.sendMessageAsync|sendMessageAsync(cn.rtast.rob.onebot.MessageChain){}[0]
    abstract suspend fun sendMessageAsync(cn.rtast.rob.segment/Segment) // cn.rtast.rob.actionable/MessageActionable.sendMessageAsync|sendMessageAsync(cn.rtast.rob.segment.Segment){}[0]
    abstract suspend fun sendMessageAsync(kotlin.collections/List<cn.rtast.rob.segment/Segment>) // cn.rtast.rob.actionable/MessageActionable.sendMessageAsync|sendMessageAsync(kotlin.collections.List<cn.rtast.rob.segment.Segment>){}[0]
    abstract suspend fun sendMessageAsync(kotlin/String) // cn.rtast.rob.actionable/MessageActionable.sendMessageAsync|sendMessageAsync(kotlin.String){}[0]
    open suspend fun revoke() // cn.rtast.rob.actionable/MessageActionable.revoke|revoke(){}[0]
    open suspend fun revokeId(kotlin/Long) // cn.rtast.rob.actionable/MessageActionable.revokeId|revokeId(kotlin.Long){}[0]
}

abstract interface cn.rtast.rob.actionable/RequestEventActionable { // cn.rtast.rob.actionable/RequestEventActionable|null[0]
    abstract suspend fun approve() // cn.rtast.rob.actionable/RequestEventActionable.approve|approve(){}[0]
    abstract suspend fun reject(kotlin/String?) // cn.rtast.rob.actionable/RequestEventActionable.reject|reject(kotlin.String?){}[0]
}

abstract interface cn.rtast.rob.actionable/UserActionable { // cn.rtast.rob.actionable/UserActionable|null[0]
    abstract fun invoke(): kotlin/Long // cn.rtast.rob.actionable/UserActionable.invoke|invoke(){}[0]
    abstract suspend fun deleteFriend() // cn.rtast.rob.actionable/UserActionable.deleteFriend|deleteFriend(){}[0]
    abstract suspend fun deleteFriend(kotlin/Boolean) // cn.rtast.rob.actionable/UserActionable.deleteFriend|deleteFriend(kotlin.Boolean){}[0]
    abstract suspend fun getStrangerInfo(): cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo // cn.rtast.rob.actionable/UserActionable.getStrangerInfo|getStrangerInfo(){}[0]
    abstract suspend fun isFriend(): kotlin/Boolean // cn.rtast.rob.actionable/UserActionable.isFriend|isFriend(){}[0]
    abstract suspend fun poke() // cn.rtast.rob.actionable/UserActionable.poke|poke(){}[0]
    abstract suspend fun sendMessage(cn.rtast.rob.onebot/MessageChain): kotlin/Long? // cn.rtast.rob.actionable/UserActionable.sendMessage|sendMessage(cn.rtast.rob.onebot.MessageChain){}[0]
    abstract suspend fun sendMessage(cn.rtast.rob.segment/Segment): kotlin/Long? // cn.rtast.rob.actionable/UserActionable.sendMessage|sendMessage(cn.rtast.rob.segment.Segment){}[0]
    abstract suspend fun sendMessage(kotlin.collections/List<cn.rtast.rob.segment/Segment>): kotlin/Long? // cn.rtast.rob.actionable/UserActionable.sendMessage|sendMessage(kotlin.collections.List<cn.rtast.rob.segment.Segment>){}[0]
    abstract suspend fun sendMessage(kotlin/String): kotlin/Long? // cn.rtast.rob.actionable/UserActionable.sendMessage|sendMessage(kotlin.String){}[0]
    abstract suspend fun sendMessageAsync(cn.rtast.rob.onebot/MessageChain) // cn.rtast.rob.actionable/UserActionable.sendMessageAsync|sendMessageAsync(cn.rtast.rob.onebot.MessageChain){}[0]
    abstract suspend fun sendMessageAsync(cn.rtast.rob.segment/Segment) // cn.rtast.rob.actionable/UserActionable.sendMessageAsync|sendMessageAsync(cn.rtast.rob.segment.Segment){}[0]
    abstract suspend fun sendMessageAsync(kotlin.collections/List<cn.rtast.rob.segment/Segment>) // cn.rtast.rob.actionable/UserActionable.sendMessageAsync|sendMessageAsync(kotlin.collections.List<cn.rtast.rob.segment.Segment>){}[0]
    abstract suspend fun sendMessageAsync(kotlin/String) // cn.rtast.rob.actionable/UserActionable.sendMessageAsync|sendMessageAsync(kotlin.String){}[0]
    open suspend fun sendLike(kotlin/Int) // cn.rtast.rob.actionable/UserActionable.sendLike|sendLike(kotlin.Int){}[0]
}

abstract interface cn.rtast.rob.event/OneBotEvent : cn.rtast.rob.event/BaseDispatchEvent<cn.rtast.rob.onebot/OneBotAction> // cn.rtast.rob.event/OneBotEvent|null[0]

abstract interface cn.rtast.rob.onebot/OneBotListener { // cn.rtast.rob.onebot/OneBotListener|null[0]
    open suspend fun onAddFriendRequest(cn.rtast.rob.event.raw.request/AddFriendRequestEvent) // cn.rtast.rob.onebot/OneBotListener.onAddFriendRequest|onAddFriendRequest(cn.rtast.rob.event.raw.request.AddFriendRequestEvent){}[0]
    open suspend fun onApproveEvent(cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent) // cn.rtast.rob.onebot/OneBotListener.onApproveEvent|onApproveEvent(cn.rtast.rob.event.raw.group.RawJoinRequestApproveEvent){}[0]
    open suspend fun onBan(cn.rtast.rob.event.raw.group/RawBanEvent) // cn.rtast.rob.onebot/OneBotListener.onBan|onBan(cn.rtast.rob.event.raw.group.RawBanEvent){}[0]
    open suspend fun onBeInviteEvent(cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent) // cn.rtast.rob.onebot/OneBotListener.onBeInviteEvent|onBeInviteEvent(cn.rtast.rob.event.raw.group.RawMemberBeInviteEvent){}[0]
    open suspend fun onBeKicked(cn.rtast.rob.event.raw.group/RawBotBeKickEvent) // cn.rtast.rob.onebot/OneBotListener.onBeKicked|onBeKicked(cn.rtast.rob.event.raw.group.RawBotBeKickEvent){}[0]
    open suspend fun onBotOffline(cn.rtast.rob.event.raw.onebot/RawBotOfflineEvent) // cn.rtast.rob.onebot/OneBotListener.onBotOffline|onBotOffline(cn.rtast.rob.event.raw.onebot.RawBotOfflineEvent){}[0]
    open suspend fun onBotOnline(cn.rtast.rob.event.raw.onebot/RawBotOnlineEvent) // cn.rtast.rob.onebot/OneBotListener.onBotOnline|onBotOnline(cn.rtast.rob.event.raw.onebot.RawBotOnlineEvent){}[0]
    open suspend fun onConnectEvent(cn.rtast.rob.event.raw.onebot/RawConnectEvent) // cn.rtast.rob.onebot/OneBotListener.onConnectEvent|onConnectEvent(cn.rtast.rob.event.raw.onebot.RawConnectEvent){}[0]
    open suspend fun onGroupFileUpload(cn.rtast.rob.event.raw.file/RawFileEvent) // cn.rtast.rob.onebot/OneBotListener.onGroupFileUpload|onGroupFileUpload(cn.rtast.rob.event.raw.file.RawFileEvent){}[0]
    open suspend fun onGroupMessage(cn.rtast.rob.event.raw.message/GroupMessage) // cn.rtast.rob.onebot/OneBotListener.onGroupMessage|onGroupMessage(cn.rtast.rob.event.raw.message.GroupMessage){}[0]
    open suspend fun onGroupMessage(cn.rtast.rob.event.raw.message/GroupMessage, kotlin/String) // cn.rtast.rob.onebot/OneBotListener.onGroupMessage|onGroupMessage(cn.rtast.rob.event.raw.message.GroupMessage;kotlin.String){}[0]
    open suspend fun onGroupMessageRevoke(cn.rtast.rob.event.raw.message/RawGroupRevokeMessage) // cn.rtast.rob.onebot/OneBotListener.onGroupMessageRevoke|onGroupMessageRevoke(cn.rtast.rob.event.raw.message.RawGroupRevokeMessage){}[0]
    open suspend fun onGroupNameChanged(cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent) // cn.rtast.rob.onebot/OneBotListener.onGroupNameChanged|onGroupNameChanged(cn.rtast.rob.event.raw.group.RawGroupNameChangeEvent){}[0]
    open suspend fun onGroupPoke(cn.rtast.rob.event.raw.group/RawPokeEvent) // cn.rtast.rob.onebot/OneBotListener.onGroupPoke|onGroupPoke(cn.rtast.rob.event.raw.group.RawPokeEvent){}[0]
    open suspend fun onGroupPokeSelf(cn.rtast.rob.event.raw.group/RawPokeEvent) // cn.rtast.rob.onebot/OneBotListener.onGroupPokeSelf|onGroupPokeSelf(cn.rtast.rob.event.raw.group.RawPokeEvent){}[0]
    open suspend fun onHeartBeatEvent(cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent) // cn.rtast.rob.onebot/OneBotListener.onHeartBeatEvent|onHeartBeatEvent(cn.rtast.rob.event.raw.onebot.RawHeartBeatEvent){}[0]
    open suspend fun onJoinRequest(cn.rtast.rob.event.raw.request/JoinGroupRequestEvent) // cn.rtast.rob.onebot/OneBotListener.onJoinRequest|onJoinRequest(cn.rtast.rob.event.raw.request.JoinGroupRequestEvent){}[0]
    open suspend fun onLeaveEvent(cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent) // cn.rtast.rob.onebot/OneBotListener.onLeaveEvent|onLeaveEvent(cn.rtast.rob.event.raw.group.RawGroupMemberLeaveEvent){}[0]
    open suspend fun onMemberKick(cn.rtast.rob.event.raw.group/RawMemberKickEvent) // cn.rtast.rob.onebot/OneBotListener.onMemberKick|onMemberKick(cn.rtast.rob.event.raw.group.RawMemberKickEvent){}[0]
    open suspend fun onMessageTimeout(cn.rtast.rob.event.packed/MessageTimeoutEvent) // cn.rtast.rob.onebot/OneBotListener.onMessageTimeout|onMessageTimeout(cn.rtast.rob.event.packed.MessageTimeoutEvent){}[0]
    open suspend fun onPardon(cn.rtast.rob.event.raw.group/RawPardonBanEvent) // cn.rtast.rob.onebot/OneBotListener.onPardon|onPardon(cn.rtast.rob.event.raw.group.RawPardonBanEvent){}[0]
    open suspend fun onPrivateFileUpload(cn.rtast.rob.event.raw.file/RawFileEvent) // cn.rtast.rob.onebot/OneBotListener.onPrivateFileUpload|onPrivateFileUpload(cn.rtast.rob.event.raw.file.RawFileEvent){}[0]
    open suspend fun onPrivateMessage(cn.rtast.rob.event.raw.message/PrivateMessage) // cn.rtast.rob.onebot/OneBotListener.onPrivateMessage|onPrivateMessage(cn.rtast.rob.event.raw.message.PrivateMessage){}[0]
    open suspend fun onPrivateMessage(cn.rtast.rob.event.raw.message/PrivateMessage, kotlin/String) // cn.rtast.rob.onebot/OneBotListener.onPrivateMessage|onPrivateMessage(cn.rtast.rob.event.raw.message.PrivateMessage;kotlin.String){}[0]
    open suspend fun onPrivateMessageRevoke(cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage) // cn.rtast.rob.onebot/OneBotListener.onPrivateMessageRevoke|onPrivateMessageRevoke(cn.rtast.rob.event.raw.message.RawPrivateRevokeMessage){}[0]
    open suspend fun onPrivatePoke(cn.rtast.rob.event.raw.group/RawPokeEvent) // cn.rtast.rob.onebot/OneBotListener.onPrivatePoke|onPrivatePoke(cn.rtast.rob.event.raw.group.RawPokeEvent){}[0]
    open suspend fun onPrivatePokeSelf(cn.rtast.rob.event.raw.group/RawPokeEvent) // cn.rtast.rob.onebot/OneBotListener.onPrivatePokeSelf|onPrivatePokeSelf(cn.rtast.rob.event.raw.group.RawPokeEvent){}[0]
    open suspend fun onRawMessage(cn.rtast.rob.onebot/OneBotAction, kotlin/String) // cn.rtast.rob.onebot/OneBotListener.onRawMessage|onRawMessage(cn.rtast.rob.onebot.OneBotAction;kotlin.String){}[0]
    open suspend fun onReaction(cn.rtast.rob.event.raw.group/ReactionEvent) // cn.rtast.rob.onebot/OneBotListener.onReaction|onReaction(cn.rtast.rob.event.raw.group.ReactionEvent){}[0]
    open suspend fun onReactionRemoved(cn.rtast.rob.event.raw.group/ReactionEvent) // cn.rtast.rob.onebot/OneBotListener.onReactionRemoved|onReactionRemoved(cn.rtast.rob.event.raw.group.ReactionEvent){}[0]
    open suspend fun onSetOperator(cn.rtast.rob.event.raw.group/RawSetOperatorEvent) // cn.rtast.rob.onebot/OneBotListener.onSetOperator|onSetOperator(cn.rtast.rob.event.raw.group.RawSetOperatorEvent){}[0]
    open suspend fun onUnsetOperator(cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent) // cn.rtast.rob.onebot/OneBotListener.onUnsetOperator|onUnsetOperator(cn.rtast.rob.event.raw.group.RawUnsetOperatorEvent){}[0]
    open suspend fun onWebsocketClosedEvent(cn.rtast.rob.event.raw.internal/RawWebsocketCloseEvent) // cn.rtast.rob.onebot/OneBotListener.onWebsocketClosedEvent|onWebsocketClosedEvent(cn.rtast.rob.event.raw.internal.RawWebsocketCloseEvent){}[0]
    open suspend fun onWebsocketErrorEvent(cn.rtast.rob.event.raw.internal/RawWebsocketErrorEvent) // cn.rtast.rob.onebot/OneBotListener.onWebsocketErrorEvent|onWebsocketErrorEvent(cn.rtast.rob.event.raw.internal.RawWebsocketErrorEvent){}[0]
    open suspend fun onWebsocketOpenEvent(cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.onebot/OneBotListener.onWebsocketOpenEvent|onWebsocketOpenEvent(cn.rtast.rob.onebot.OneBotAction){}[0]
    open suspend fun onWebsocketServerClosedEvent(cn.rtast.rob.onebot/OneBotAction, kotlin/Int) // cn.rtast.rob.onebot/OneBotListener.onWebsocketServerClosedEvent|onWebsocketServerClosedEvent(cn.rtast.rob.onebot.OneBotAction;kotlin.Int){}[0]
    open suspend fun onWebsocketServerStartedEvent(cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.onebot/OneBotListener.onWebsocketServerStartedEvent|onWebsocketServerStartedEvent(cn.rtast.rob.onebot.OneBotAction){}[0]
}

sealed interface cn.rtast.rob.segment/MessageSegment { // cn.rtast.rob.segment/MessageSegment|null[0]
    final object Companion : kotlinx.serialization.internal/SerializerFactory { // cn.rtast.rob.segment/MessageSegment.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.segment/MessageSegment> // cn.rtast.rob.segment/MessageSegment.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // cn.rtast.rob.segment/MessageSegment.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

abstract class cn.rtast.rob.command/BaseCommand : cn.rtast.rob.command/IBaseCommand<cn.rtast.rob.event.raw.message/GroupMessage, cn.rtast.rob.event.raw.message/PrivateMessage> { // cn.rtast.rob.command/BaseCommand|null[0]
    constructor <init>(cn.rtast.rob.interceptor/CommandInterceptor? = ...) // cn.rtast.rob.command/BaseCommand.<init>|<init>(cn.rtast.rob.interceptor.CommandInterceptor?){}[0]

    abstract val commandNames // cn.rtast.rob.command/BaseCommand.commandNames|{}commandNames[0]
        abstract fun <get-commandNames>(): kotlin.collections/List<kotlin/String> // cn.rtast.rob.command/BaseCommand.commandNames.<get-commandNames>|<get-commandNames>(){}[0]
    final val interceptor // cn.rtast.rob.command/BaseCommand.interceptor|{}interceptor[0]
        final fun <get-interceptor>(): cn.rtast.rob.interceptor/CommandInterceptor? // cn.rtast.rob.command/BaseCommand.interceptor.<get-interceptor>|<get-interceptor>(){}[0]

    final suspend fun (cn.rtast.rob.event.raw.message/GroupMessage).reject(cn.rtast.rob.entity/IMessageChain) // cn.rtast.rob.command/BaseCommand.reject|reject@cn.rtast.rob.event.raw.message.GroupMessage(cn.rtast.rob.entity.IMessageChain){}[0]
    final suspend fun (cn.rtast.rob.event.raw.message/GroupMessage).skipSession() // cn.rtast.rob.command/BaseCommand.skipSession|skipSession@cn.rtast.rob.event.raw.message.GroupMessage(){}[0]
    final suspend fun (cn.rtast.rob.event.raw.message/GroupMessage).startSession() // cn.rtast.rob.command/BaseCommand.startSession|startSession@cn.rtast.rob.event.raw.message.GroupMessage(){}[0]
    final suspend fun (cn.rtast.rob.event.raw.message/PrivateMessage).reject(cn.rtast.rob.entity/IMessageChain) // cn.rtast.rob.command/BaseCommand.reject|reject@cn.rtast.rob.event.raw.message.PrivateMessage(cn.rtast.rob.entity.IMessageChain){}[0]
    final suspend fun (cn.rtast.rob.event.raw.message/PrivateMessage).skipSession() // cn.rtast.rob.command/BaseCommand.skipSession|skipSession@cn.rtast.rob.event.raw.message.PrivateMessage(){}[0]
    final suspend fun (cn.rtast.rob.event.raw.message/PrivateMessage).startSession() // cn.rtast.rob.command/BaseCommand.startSession|startSession@cn.rtast.rob.event.raw.message.PrivateMessage(){}[0]
    final suspend fun <#A1: kotlin/Any> (cn.rtast.rob.event.raw.message/GroupMessage).startSession(#A1) // cn.rtast.rob.command/BaseCommand.startSession|startSession@cn.rtast.rob.event.raw.message.GroupMessage(0:0){0§<kotlin.Any>}[0]
    final suspend fun <#A1: kotlin/Any> (cn.rtast.rob.event.raw.message/PrivateMessage).startSession(#A1) // cn.rtast.rob.command/BaseCommand.startSession|startSession@cn.rtast.rob.event.raw.message.PrivateMessage(0:0){0§<kotlin.Any>}[0]
    final suspend fun handleGroup(cn.rtast.rob.event.raw.message/GroupMessage, kotlin/String) // cn.rtast.rob.command/BaseCommand.handleGroup|handleGroup(cn.rtast.rob.event.raw.message.GroupMessage;kotlin.String){}[0]
    final suspend fun handlePrivate(cn.rtast.rob.event.raw.message/PrivateMessage, kotlin/String) // cn.rtast.rob.command/BaseCommand.handlePrivate|handlePrivate(cn.rtast.rob.event.raw.message.PrivateMessage;kotlin.String){}[0]
    open suspend fun executeGroup(cn.rtast.rob.event.raw.message/GroupMessage, kotlin.collections/List<kotlin/String>) // cn.rtast.rob.command/BaseCommand.executeGroup|executeGroup(cn.rtast.rob.event.raw.message.GroupMessage;kotlin.collections.List<kotlin.String>){}[0]
    open suspend fun executeGroup(cn.rtast.rob.event.raw.message/GroupMessage, kotlin.collections/List<kotlin/String>, kotlin/String) // cn.rtast.rob.command/BaseCommand.executeGroup|executeGroup(cn.rtast.rob.event.raw.message.GroupMessage;kotlin.collections.List<kotlin.String>;kotlin.String){}[0]
    open suspend fun executePrivate(cn.rtast.rob.event.raw.message/PrivateMessage, kotlin.collections/List<kotlin/String>) // cn.rtast.rob.command/BaseCommand.executePrivate|executePrivate(cn.rtast.rob.event.raw.message.PrivateMessage;kotlin.collections.List<kotlin.String>){}[0]
    open suspend fun executePrivate(cn.rtast.rob.event.raw.message/PrivateMessage, kotlin.collections/List<kotlin/String>, kotlin/String) // cn.rtast.rob.command/BaseCommand.executePrivate|executePrivate(cn.rtast.rob.event.raw.message.PrivateMessage;kotlin.collections.List<kotlin.String>;kotlin.String){}[0]
    open suspend fun onGroupSession(cn.rtast.rob.event.raw.message/GroupMessage) // cn.rtast.rob.command/BaseCommand.onGroupSession|onGroupSession(cn.rtast.rob.event.raw.message.GroupMessage){}[0]
    open suspend fun onGroupSession(cn.rtast.rob.event.raw.message/GroupMessage, kotlin/Any) // cn.rtast.rob.command/BaseCommand.onGroupSession|onGroupSession(cn.rtast.rob.event.raw.message.GroupMessage;kotlin.Any){}[0]
    open suspend fun onPrivateSession(cn.rtast.rob.event.raw.message/PrivateMessage) // cn.rtast.rob.command/BaseCommand.onPrivateSession|onPrivateSession(cn.rtast.rob.event.raw.message.PrivateMessage){}[0]
    open suspend fun onPrivateSession(cn.rtast.rob.event.raw.message/PrivateMessage, kotlin/Any) // cn.rtast.rob.command/BaseCommand.onPrivateSession|onPrivateSession(cn.rtast.rob.event.raw.message.PrivateMessage;kotlin.Any){}[0]
}

abstract class cn.rtast.rob.interceptor/CommandInterceptor : cn.rtast.rob.interceptor/ICommandInterceptor<cn.rtast.rob.command/BaseCommand, cn.rtast.rob.event.raw.message/GroupMessage, cn.rtast.rob.event.raw.message/PrivateMessage> { // cn.rtast.rob.interceptor/CommandInterceptor|null[0]
    constructor <init>() // cn.rtast.rob.interceptor/CommandInterceptor.<init>|<init>(){}[0]

    final suspend fun handleGroupInterceptor(cn.rtast.rob.event.raw.message/GroupMessage, cn.rtast.rob.command/BaseCommand, kotlin.coroutines/SuspendFunction1<cn.rtast.rob.event.raw.message/GroupMessage, kotlin/Unit>) // cn.rtast.rob.interceptor/CommandInterceptor.handleGroupInterceptor|handleGroupInterceptor(cn.rtast.rob.event.raw.message.GroupMessage;cn.rtast.rob.command.BaseCommand;kotlin.coroutines.SuspendFunction1<cn.rtast.rob.event.raw.message.GroupMessage,kotlin.Unit>){}[0]
    final suspend fun handlePrivateInterceptor(cn.rtast.rob.event.raw.message/PrivateMessage, cn.rtast.rob.command/BaseCommand, kotlin.coroutines/SuspendFunction1<cn.rtast.rob.event.raw.message/PrivateMessage, kotlin/Unit>) // cn.rtast.rob.interceptor/CommandInterceptor.handlePrivateInterceptor|handlePrivateInterceptor(cn.rtast.rob.event.raw.message.PrivateMessage;cn.rtast.rob.command.BaseCommand;kotlin.coroutines.SuspendFunction1<cn.rtast.rob.event.raw.message.PrivateMessage,kotlin.Unit>){}[0]
}

final class <#A: kotlin/Any> cn.rtast.rob.session/GroupSession : cn.rtast.rob.session/IGroupSession<#A> { // cn.rtast.rob.session/GroupSession|null[0]
    constructor <init>(kotlin.uuid/Uuid, cn.rtast.rob.event.raw.message/GroupMessage, cn.rtast.rob.command/BaseCommand, cn.rtast.rob.event.raw/GroupSender, #A, kotlin/Boolean = ...) // cn.rtast.rob.session/GroupSession.<init>|<init>(kotlin.uuid.Uuid;cn.rtast.rob.event.raw.message.GroupMessage;cn.rtast.rob.command.BaseCommand;cn.rtast.rob.event.raw.GroupSender;1:0;kotlin.Boolean){}[0]

    final val initArgType // cn.rtast.rob.session/GroupSession.initArgType|{}initArgType[0]
        final fun <get-initArgType>(): #A // cn.rtast.rob.session/GroupSession.initArgType.<get-initArgType>|<get-initArgType>(){}[0]
    final val sender // cn.rtast.rob.session/GroupSession.sender|{}sender[0]
        final fun <get-sender>(): cn.rtast.rob.event.raw/GroupSender // cn.rtast.rob.session/GroupSession.sender.<get-sender>|<get-sender>(){}[0]

    final var active // cn.rtast.rob.session/GroupSession.active|{}active[0]
        final fun <get-active>(): kotlin/Boolean // cn.rtast.rob.session/GroupSession.active.<get-active>|<get-active>(){}[0]
        final fun <set-active>(kotlin/Boolean) // cn.rtast.rob.session/GroupSession.active.<set-active>|<set-active>(kotlin.Boolean){}[0]
    final var command // cn.rtast.rob.session/GroupSession.command|{}command[0]
        final fun <get-command>(): cn.rtast.rob.command/BaseCommand // cn.rtast.rob.session/GroupSession.command.<get-command>|<get-command>(){}[0]
        final fun <set-command>(cn.rtast.rob.command/BaseCommand) // cn.rtast.rob.session/GroupSession.command.<set-command>|<set-command>(cn.rtast.rob.command.BaseCommand){}[0]
    final var id // cn.rtast.rob.session/GroupSession.id|{}id[0]
        final fun <get-id>(): kotlin.uuid/Uuid // cn.rtast.rob.session/GroupSession.id.<get-id>|<get-id>(){}[0]
        final fun <set-id>(kotlin.uuid/Uuid) // cn.rtast.rob.session/GroupSession.id.<set-id>|<set-id>(kotlin.uuid.Uuid){}[0]
    final var message // cn.rtast.rob.session/GroupSession.message|{}message[0]
        final fun <get-message>(): cn.rtast.rob.event.raw.message/GroupMessage // cn.rtast.rob.session/GroupSession.message.<get-message>|<get-message>(){}[0]
        final fun <set-message>(cn.rtast.rob.event.raw.message/GroupMessage) // cn.rtast.rob.session/GroupSession.message.<set-message>|<set-message>(cn.rtast.rob.event.raw.message.GroupMessage){}[0]

    final fun component1(): kotlin.uuid/Uuid // cn.rtast.rob.session/GroupSession.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.message/GroupMessage // cn.rtast.rob.session/GroupSession.component2|component2(){}[0]
    final fun component3(): cn.rtast.rob.command/BaseCommand // cn.rtast.rob.session/GroupSession.component3|component3(){}[0]
    final fun component4(): cn.rtast.rob.event.raw/GroupSender // cn.rtast.rob.session/GroupSession.component4|component4(){}[0]
    final fun component5(): #A // cn.rtast.rob.session/GroupSession.component5|component5(){}[0]
    final fun component6(): kotlin/Boolean // cn.rtast.rob.session/GroupSession.component6|component6(){}[0]
    final fun copy(kotlin.uuid/Uuid = ..., cn.rtast.rob.event.raw.message/GroupMessage = ..., cn.rtast.rob.command/BaseCommand = ..., cn.rtast.rob.event.raw/GroupSender = ..., #A = ..., kotlin/Boolean = ...): cn.rtast.rob.session/GroupSession<#A> // cn.rtast.rob.session/GroupSession.copy|copy(kotlin.uuid.Uuid;cn.rtast.rob.event.raw.message.GroupMessage;cn.rtast.rob.command.BaseCommand;cn.rtast.rob.event.raw.GroupSender;1:0;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.session/GroupSession.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.session/GroupSession.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.session/GroupSession.toString|toString(){}[0]
}

final class <#A: kotlin/Any> cn.rtast.rob.session/PrivateSession : cn.rtast.rob.session/IPrivateSession<#A> { // cn.rtast.rob.session/PrivateSession|null[0]
    constructor <init>(kotlin.uuid/Uuid, cn.rtast.rob.event.raw.message/PrivateMessage, cn.rtast.rob.command/BaseCommand, cn.rtast.rob.event.raw/PrivateSender, #A, kotlin/Boolean = ...) // cn.rtast.rob.session/PrivateSession.<init>|<init>(kotlin.uuid.Uuid;cn.rtast.rob.event.raw.message.PrivateMessage;cn.rtast.rob.command.BaseCommand;cn.rtast.rob.event.raw.PrivateSender;1:0;kotlin.Boolean){}[0]

    final val initArgType // cn.rtast.rob.session/PrivateSession.initArgType|{}initArgType[0]
        final fun <get-initArgType>(): #A // cn.rtast.rob.session/PrivateSession.initArgType.<get-initArgType>|<get-initArgType>(){}[0]
    final val sender // cn.rtast.rob.session/PrivateSession.sender|{}sender[0]
        final fun <get-sender>(): cn.rtast.rob.event.raw/PrivateSender // cn.rtast.rob.session/PrivateSession.sender.<get-sender>|<get-sender>(){}[0]

    final var active // cn.rtast.rob.session/PrivateSession.active|{}active[0]
        final fun <get-active>(): kotlin/Boolean // cn.rtast.rob.session/PrivateSession.active.<get-active>|<get-active>(){}[0]
        final fun <set-active>(kotlin/Boolean) // cn.rtast.rob.session/PrivateSession.active.<set-active>|<set-active>(kotlin.Boolean){}[0]
    final var command // cn.rtast.rob.session/PrivateSession.command|{}command[0]
        final fun <get-command>(): cn.rtast.rob.command/BaseCommand // cn.rtast.rob.session/PrivateSession.command.<get-command>|<get-command>(){}[0]
        final fun <set-command>(cn.rtast.rob.command/BaseCommand) // cn.rtast.rob.session/PrivateSession.command.<set-command>|<set-command>(cn.rtast.rob.command.BaseCommand){}[0]
    final var id // cn.rtast.rob.session/PrivateSession.id|{}id[0]
        final fun <get-id>(): kotlin.uuid/Uuid // cn.rtast.rob.session/PrivateSession.id.<get-id>|<get-id>(){}[0]
        final fun <set-id>(kotlin.uuid/Uuid) // cn.rtast.rob.session/PrivateSession.id.<set-id>|<set-id>(kotlin.uuid.Uuid){}[0]
    final var message // cn.rtast.rob.session/PrivateSession.message|{}message[0]
        final fun <get-message>(): cn.rtast.rob.event.raw.message/PrivateMessage // cn.rtast.rob.session/PrivateSession.message.<get-message>|<get-message>(){}[0]
        final fun <set-message>(cn.rtast.rob.event.raw.message/PrivateMessage) // cn.rtast.rob.session/PrivateSession.message.<set-message>|<set-message>(cn.rtast.rob.event.raw.message.PrivateMessage){}[0]

    final fun component1(): kotlin.uuid/Uuid // cn.rtast.rob.session/PrivateSession.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.message/PrivateMessage // cn.rtast.rob.session/PrivateSession.component2|component2(){}[0]
    final fun component3(): cn.rtast.rob.command/BaseCommand // cn.rtast.rob.session/PrivateSession.component3|component3(){}[0]
    final fun component4(): cn.rtast.rob.event.raw/PrivateSender // cn.rtast.rob.session/PrivateSession.component4|component4(){}[0]
    final fun component5(): #A // cn.rtast.rob.session/PrivateSession.component5|component5(){}[0]
    final fun component6(): kotlin/Boolean // cn.rtast.rob.session/PrivateSession.component6|component6(){}[0]
    final fun copy(kotlin.uuid/Uuid = ..., cn.rtast.rob.event.raw.message/PrivateMessage = ..., cn.rtast.rob.command/BaseCommand = ..., cn.rtast.rob.event.raw/PrivateSender = ..., #A = ..., kotlin/Boolean = ...): cn.rtast.rob.session/PrivateSession<#A> // cn.rtast.rob.session/PrivateSession.copy|copy(kotlin.uuid.Uuid;cn.rtast.rob.event.raw.message.PrivateMessage;cn.rtast.rob.command.BaseCommand;cn.rtast.rob.event.raw.PrivateSender;1:0;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.session/PrivateSession.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.session/PrivateSession.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.session/PrivateSession.toString|toString(){}[0]
}

final class cn.rtast.rob.api.get/AIRecordCharacters { // cn.rtast.rob.api.get/AIRecordCharacters|null[0]
    constructor <init>(kotlin.collections/List<cn.rtast.rob.api.get/AIRecordCharacters.AICharacters>) // cn.rtast.rob.api.get/AIRecordCharacters.<init>|<init>(kotlin.collections.List<cn.rtast.rob.api.get.AIRecordCharacters.AICharacters>){}[0]

    final val data // cn.rtast.rob.api.get/AIRecordCharacters.data|{}data[0]
        final fun <get-data>(): kotlin.collections/List<cn.rtast.rob.api.get/AIRecordCharacters.AICharacters> // cn.rtast.rob.api.get/AIRecordCharacters.data.<get-data>|<get-data>(){}[0]

    final fun component1(): kotlin.collections/List<cn.rtast.rob.api.get/AIRecordCharacters.AICharacters> // cn.rtast.rob.api.get/AIRecordCharacters.component1|component1(){}[0]
    final fun copy(kotlin.collections/List<cn.rtast.rob.api.get/AIRecordCharacters.AICharacters> = ...): cn.rtast.rob.api.get/AIRecordCharacters // cn.rtast.rob.api.get/AIRecordCharacters.copy|copy(kotlin.collections.List<cn.rtast.rob.api.get.AIRecordCharacters.AICharacters>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.api.get/AIRecordCharacters.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.api.get/AIRecordCharacters.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.api.get/AIRecordCharacters.toString|toString(){}[0]

    final class AICharacters { // cn.rtast.rob.api.get/AIRecordCharacters.AICharacters|null[0]
        constructor <init>(kotlin/String, kotlin.collections/List<cn.rtast.rob.api.get/AIRecordCharacters.Character>) // cn.rtast.rob.api.get/AIRecordCharacters.AICharacters.<init>|<init>(kotlin.String;kotlin.collections.List<cn.rtast.rob.api.get.AIRecordCharacters.Character>){}[0]

        final val characters // cn.rtast.rob.api.get/AIRecordCharacters.AICharacters.characters|{}characters[0]
            final fun <get-characters>(): kotlin.collections/List<cn.rtast.rob.api.get/AIRecordCharacters.Character> // cn.rtast.rob.api.get/AIRecordCharacters.AICharacters.characters.<get-characters>|<get-characters>(){}[0]
        final val type // cn.rtast.rob.api.get/AIRecordCharacters.AICharacters.type|{}type[0]
            final fun <get-type>(): kotlin/String // cn.rtast.rob.api.get/AIRecordCharacters.AICharacters.type.<get-type>|<get-type>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.api.get/AIRecordCharacters.AICharacters.component1|component1(){}[0]
        final fun component2(): kotlin.collections/List<cn.rtast.rob.api.get/AIRecordCharacters.Character> // cn.rtast.rob.api.get/AIRecordCharacters.AICharacters.component2|component2(){}[0]
        final fun copy(kotlin/String = ..., kotlin.collections/List<cn.rtast.rob.api.get/AIRecordCharacters.Character> = ...): cn.rtast.rob.api.get/AIRecordCharacters.AICharacters // cn.rtast.rob.api.get/AIRecordCharacters.AICharacters.copy|copy(kotlin.String;kotlin.collections.List<cn.rtast.rob.api.get.AIRecordCharacters.Character>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.api.get/AIRecordCharacters.AICharacters.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.api.get/AIRecordCharacters.AICharacters.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.api.get/AIRecordCharacters.AICharacters.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.api.get/AIRecordCharacters.AICharacters> { // cn.rtast.rob.api.get/AIRecordCharacters.AICharacters.$serializer|null[0]
            final val descriptor // cn.rtast.rob.api.get/AIRecordCharacters.AICharacters.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.api.get/AIRecordCharacters.AICharacters.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.api.get/AIRecordCharacters.AICharacters.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.api.get/AIRecordCharacters.AICharacters // cn.rtast.rob.api.get/AIRecordCharacters.AICharacters.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.api.get/AIRecordCharacters.AICharacters) // cn.rtast.rob.api.get/AIRecordCharacters.AICharacters.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.api.get.AIRecordCharacters.AICharacters){}[0]
        }

        final object Companion { // cn.rtast.rob.api.get/AIRecordCharacters.AICharacters.Companion|null[0]
            final val $childSerializers // cn.rtast.rob.api.get/AIRecordCharacters.AICharacters.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.api.get/AIRecordCharacters.AICharacters> // cn.rtast.rob.api.get/AIRecordCharacters.AICharacters.Companion.serializer|serializer(){}[0]
        }
    }

    final class Character { // cn.rtast.rob.api.get/AIRecordCharacters.Character|null[0]
        constructor <init>(kotlin/String, kotlin/String, kotlin/String) // cn.rtast.rob.api.get/AIRecordCharacters.Character.<init>|<init>(kotlin.String;kotlin.String;kotlin.String){}[0]

        final val characterId // cn.rtast.rob.api.get/AIRecordCharacters.Character.characterId|{}characterId[0]
            final fun <get-characterId>(): kotlin/String // cn.rtast.rob.api.get/AIRecordCharacters.Character.characterId.<get-characterId>|<get-characterId>(){}[0]
        final val characterName // cn.rtast.rob.api.get/AIRecordCharacters.Character.characterName|{}characterName[0]
            final fun <get-characterName>(): kotlin/String // cn.rtast.rob.api.get/AIRecordCharacters.Character.characterName.<get-characterName>|<get-characterName>(){}[0]
        final val previewUrl // cn.rtast.rob.api.get/AIRecordCharacters.Character.previewUrl|{}previewUrl[0]
            final fun <get-previewUrl>(): kotlin/String // cn.rtast.rob.api.get/AIRecordCharacters.Character.previewUrl.<get-previewUrl>|<get-previewUrl>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.api.get/AIRecordCharacters.Character.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.api.get/AIRecordCharacters.Character.component2|component2(){}[0]
        final fun component3(): kotlin/String // cn.rtast.rob.api.get/AIRecordCharacters.Character.component3|component3(){}[0]
        final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/String = ...): cn.rtast.rob.api.get/AIRecordCharacters.Character // cn.rtast.rob.api.get/AIRecordCharacters.Character.copy|copy(kotlin.String;kotlin.String;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.api.get/AIRecordCharacters.Character.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.api.get/AIRecordCharacters.Character.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.api.get/AIRecordCharacters.Character.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.api.get/AIRecordCharacters.Character> { // cn.rtast.rob.api.get/AIRecordCharacters.Character.$serializer|null[0]
            final val descriptor // cn.rtast.rob.api.get/AIRecordCharacters.Character.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.api.get/AIRecordCharacters.Character.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.api.get/AIRecordCharacters.Character.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.api.get/AIRecordCharacters.Character // cn.rtast.rob.api.get/AIRecordCharacters.Character.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.api.get/AIRecordCharacters.Character) // cn.rtast.rob.api.get/AIRecordCharacters.Character.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.api.get.AIRecordCharacters.Character){}[0]
        }

        final object Companion { // cn.rtast.rob.api.get/AIRecordCharacters.Character.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.api.get/AIRecordCharacters.Character> // cn.rtast.rob.api.get/AIRecordCharacters.Character.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.api.get/AIRecordCharacters> { // cn.rtast.rob.api.get/AIRecordCharacters.$serializer|null[0]
        final val descriptor // cn.rtast.rob.api.get/AIRecordCharacters.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.api.get/AIRecordCharacters.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.api.get/AIRecordCharacters.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.api.get/AIRecordCharacters // cn.rtast.rob.api.get/AIRecordCharacters.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.api.get/AIRecordCharacters) // cn.rtast.rob.api.get/AIRecordCharacters.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.api.get.AIRecordCharacters){}[0]
    }

    final object Companion { // cn.rtast.rob.api.get/AIRecordCharacters.Companion|null[0]
        final val $childSerializers // cn.rtast.rob.api.get/AIRecordCharacters.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.api.get/AIRecordCharacters> // cn.rtast.rob.api.get/AIRecordCharacters.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.command/CommandManagerImpl : cn.rtast.rob.command/CommandManager<cn.rtast.rob.command/BaseCommand, cn.rtast.rob.event.raw.message/GroupMessage, cn.rtast.rob.event.raw.message/PrivateMessage> { // cn.rtast.rob.command/CommandManagerImpl|null[0]
    final val commands // cn.rtast.rob.command/CommandManagerImpl.commands|{}commands[0]
        final fun <get-commands>(): kotlin.collections/MutableList<cn.rtast.rob.command/BaseCommand> // cn.rtast.rob.command/CommandManagerImpl.commands.<get-commands>|<get-commands>(){}[0]
    final val groupDslCommands // cn.rtast.rob.command/CommandManagerImpl.groupDslCommands|{}groupDslCommands[0]
        final fun <get-groupDslCommands>(): kotlin.collections/MutableList<kotlin.collections/Map<kotlin.collections/List<kotlin/String>, kotlin.coroutines/SuspendFunction1<cn.rtast.rob.event.raw.message/GroupMessage, kotlin/Unit>>> // cn.rtast.rob.command/CommandManagerImpl.groupDslCommands.<get-groupDslCommands>|<get-groupDslCommands>(){}[0]
    final val privateDslCommands // cn.rtast.rob.command/CommandManagerImpl.privateDslCommands|{}privateDslCommands[0]
        final fun <get-privateDslCommands>(): kotlin.collections/MutableList<kotlin.collections/Map<kotlin.collections/List<kotlin/String>, kotlin.coroutines/SuspendFunction1<cn.rtast.rob.event.raw.message/PrivateMessage, kotlin/Unit>>> // cn.rtast.rob.command/CommandManagerImpl.privateDslCommands.<get-privateDslCommands>|<get-privateDslCommands>(){}[0]

    final var commandRegex // cn.rtast.rob.command/CommandManagerImpl.commandRegex|{}commandRegex[0]
        final fun <get-commandRegex>(): kotlin.text/Regex // cn.rtast.rob.command/CommandManagerImpl.commandRegex.<get-commandRegex>|<get-commandRegex>(){}[0]
        final fun <set-commandRegex>(kotlin.text/Regex) // cn.rtast.rob.command/CommandManagerImpl.commandRegex.<set-commandRegex>|<set-commandRegex>(kotlin.text.Regex){}[0]

    final suspend fun (cn.rtast.rob.command/CommandManagerImpl).groupCommand(kotlin.collections/List<kotlin/String>, kotlin.coroutines/SuspendFunction1<cn.rtast.rob.event.raw.message/GroupMessage, kotlin/Unit>) // cn.rtast.rob.command/CommandManagerImpl.groupCommand|groupCommand@cn.rtast.rob.command.CommandManagerImpl(kotlin.collections.List<kotlin.String>;kotlin.coroutines.SuspendFunction1<cn.rtast.rob.event.raw.message.GroupMessage,kotlin.Unit>){}[0]
    final suspend fun (cn.rtast.rob.command/CommandManagerImpl).groupCommand(kotlin/String, kotlin.coroutines/SuspendFunction1<cn.rtast.rob.event.raw.message/GroupMessage, kotlin/Unit>) // cn.rtast.rob.command/CommandManagerImpl.groupCommand|groupCommand@cn.rtast.rob.command.CommandManagerImpl(kotlin.String;kotlin.coroutines.SuspendFunction1<cn.rtast.rob.event.raw.message.GroupMessage,kotlin.Unit>){}[0]
    final suspend fun (cn.rtast.rob.command/CommandManagerImpl).privateCommand(kotlin.collections/List<kotlin/String>, kotlin.coroutines/SuspendFunction1<cn.rtast.rob.event.raw.message/PrivateMessage, kotlin/Unit>) // cn.rtast.rob.command/CommandManagerImpl.privateCommand|privateCommand@cn.rtast.rob.command.CommandManagerImpl(kotlin.collections.List<kotlin.String>;kotlin.coroutines.SuspendFunction1<cn.rtast.rob.event.raw.message.PrivateMessage,kotlin.Unit>){}[0]
    final suspend fun (cn.rtast.rob.command/CommandManagerImpl).privateCommand(kotlin/String, kotlin.coroutines/SuspendFunction1<cn.rtast.rob.event.raw.message/PrivateMessage, kotlin/Unit>) // cn.rtast.rob.command/CommandManagerImpl.privateCommand|privateCommand@cn.rtast.rob.command.CommandManagerImpl(kotlin.String;kotlin.coroutines.SuspendFunction1<cn.rtast.rob.event.raw.message.PrivateMessage,kotlin.Unit>){}[0]
    final suspend fun handleGroup(cn.rtast.rob.event.raw.message/GroupMessage) // cn.rtast.rob.command/CommandManagerImpl.handleGroup|handleGroup(cn.rtast.rob.event.raw.message.GroupMessage){}[0]
    final suspend fun handlePrivate(cn.rtast.rob.event.raw.message/PrivateMessage) // cn.rtast.rob.command/CommandManagerImpl.handlePrivate|handlePrivate(cn.rtast.rob.event.raw.message.PrivateMessage){}[0]
    final suspend fun invoke(kotlin.coroutines/SuspendFunction1<cn.rtast.rob.command/CommandManagerImpl, kotlin/Unit>) // cn.rtast.rob.command/CommandManagerImpl.invoke|invoke(kotlin.coroutines.SuspendFunction1<cn.rtast.rob.command.CommandManagerImpl,kotlin.Unit>){}[0]
}

final class cn.rtast.rob.event.packed/AddFriendEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/AddFriendEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.request/AddFriendRequestEvent) // cn.rtast.rob.event.packed/AddFriendEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.request.AddFriendRequestEvent){}[0]

    final val action // cn.rtast.rob.event.packed/AddFriendEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/AddFriendEvent.action.<get-action>|<get-action>(){}[0]
    final val event // cn.rtast.rob.event.packed/AddFriendEvent.event|{}event[0]
        final fun <get-event>(): cn.rtast.rob.event.raw.request/AddFriendRequestEvent // cn.rtast.rob.event.packed/AddFriendEvent.event.<get-event>|<get-event>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/AddFriendEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.request/AddFriendRequestEvent // cn.rtast.rob.event.packed/AddFriendEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.request/AddFriendRequestEvent = ...): cn.rtast.rob.event.packed/AddFriendEvent // cn.rtast.rob.event.packed/AddFriendEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.request.AddFriendRequestEvent){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/AddFriendEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/AddFriendEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/AddFriendEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/BanEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/BanEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.group/RawBanEvent) // cn.rtast.rob.event.packed/BanEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawBanEvent){}[0]

    final val action // cn.rtast.rob.event.packed/BanEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/BanEvent.action.<get-action>|<get-action>(){}[0]
    final val event // cn.rtast.rob.event.packed/BanEvent.event|{}event[0]
        final fun <get-event>(): cn.rtast.rob.event.raw.group/RawBanEvent // cn.rtast.rob.event.packed/BanEvent.event.<get-event>|<get-event>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/BanEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.group/RawBanEvent // cn.rtast.rob.event.packed/BanEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.group/RawBanEvent = ...): cn.rtast.rob.event.packed/BanEvent // cn.rtast.rob.event.packed/BanEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawBanEvent){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/BanEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/BanEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/BanEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/BotBeKickEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/BotBeKickEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.group/RawBotBeKickEvent) // cn.rtast.rob.event.packed/BotBeKickEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawBotBeKickEvent){}[0]

    final val action // cn.rtast.rob.event.packed/BotBeKickEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/BotBeKickEvent.action.<get-action>|<get-action>(){}[0]
    final val event // cn.rtast.rob.event.packed/BotBeKickEvent.event|{}event[0]
        final fun <get-event>(): cn.rtast.rob.event.raw.group/RawBotBeKickEvent // cn.rtast.rob.event.packed/BotBeKickEvent.event.<get-event>|<get-event>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/BotBeKickEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.group/RawBotBeKickEvent // cn.rtast.rob.event.packed/BotBeKickEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.group/RawBotBeKickEvent = ...): cn.rtast.rob.event.packed/BotBeKickEvent // cn.rtast.rob.event.packed/BotBeKickEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawBotBeKickEvent){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/BotBeKickEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/BotBeKickEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/BotBeKickEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/BotOfflineEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/BotOfflineEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.onebot/RawBotOfflineEvent) // cn.rtast.rob.event.packed/BotOfflineEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.onebot.RawBotOfflineEvent){}[0]

    final val action // cn.rtast.rob.event.packed/BotOfflineEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/BotOfflineEvent.action.<get-action>|<get-action>(){}[0]
    final val event // cn.rtast.rob.event.packed/BotOfflineEvent.event|{}event[0]
        final fun <get-event>(): cn.rtast.rob.event.raw.onebot/RawBotOfflineEvent // cn.rtast.rob.event.packed/BotOfflineEvent.event.<get-event>|<get-event>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/BotOfflineEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.onebot/RawBotOfflineEvent // cn.rtast.rob.event.packed/BotOfflineEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.onebot/RawBotOfflineEvent = ...): cn.rtast.rob.event.packed/BotOfflineEvent // cn.rtast.rob.event.packed/BotOfflineEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.onebot.RawBotOfflineEvent){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/BotOfflineEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/BotOfflineEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/BotOfflineEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/BotOnlineEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/BotOnlineEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.onebot/RawBotOnlineEvent) // cn.rtast.rob.event.packed/BotOnlineEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.onebot.RawBotOnlineEvent){}[0]

    final val action // cn.rtast.rob.event.packed/BotOnlineEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/BotOnlineEvent.action.<get-action>|<get-action>(){}[0]
    final val event // cn.rtast.rob.event.packed/BotOnlineEvent.event|{}event[0]
        final fun <get-event>(): cn.rtast.rob.event.raw.onebot/RawBotOnlineEvent // cn.rtast.rob.event.packed/BotOnlineEvent.event.<get-event>|<get-event>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/BotOnlineEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.onebot/RawBotOnlineEvent // cn.rtast.rob.event.packed/BotOnlineEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.onebot/RawBotOnlineEvent = ...): cn.rtast.rob.event.packed/BotOnlineEvent // cn.rtast.rob.event.packed/BotOnlineEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.onebot.RawBotOnlineEvent){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/BotOnlineEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/BotOnlineEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/BotOnlineEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/GroupBeInviteEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/GroupBeInviteEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent) // cn.rtast.rob.event.packed/GroupBeInviteEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawMemberBeInviteEvent){}[0]

    final val action // cn.rtast.rob.event.packed/GroupBeInviteEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/GroupBeInviteEvent.action.<get-action>|<get-action>(){}[0]
    final val event // cn.rtast.rob.event.packed/GroupBeInviteEvent.event|{}event[0]
        final fun <get-event>(): cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent // cn.rtast.rob.event.packed/GroupBeInviteEvent.event.<get-event>|<get-event>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/GroupBeInviteEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent // cn.rtast.rob.event.packed/GroupBeInviteEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent = ...): cn.rtast.rob.event.packed/GroupBeInviteEvent // cn.rtast.rob.event.packed/GroupBeInviteEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawMemberBeInviteEvent){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/GroupBeInviteEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/GroupBeInviteEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/GroupBeInviteEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/GroupFileUploadEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/GroupFileUploadEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.file/RawFileEvent) // cn.rtast.rob.event.packed/GroupFileUploadEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.file.RawFileEvent){}[0]

    final val action // cn.rtast.rob.event.packed/GroupFileUploadEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/GroupFileUploadEvent.action.<get-action>|<get-action>(){}[0]
    final val file // cn.rtast.rob.event.packed/GroupFileUploadEvent.file|{}file[0]
        final fun <get-file>(): cn.rtast.rob.event.raw.file/RawFileEvent // cn.rtast.rob.event.packed/GroupFileUploadEvent.file.<get-file>|<get-file>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/GroupFileUploadEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.file/RawFileEvent // cn.rtast.rob.event.packed/GroupFileUploadEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.file/RawFileEvent = ...): cn.rtast.rob.event.packed/GroupFileUploadEvent // cn.rtast.rob.event.packed/GroupFileUploadEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.file.RawFileEvent){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/GroupFileUploadEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/GroupFileUploadEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/GroupFileUploadEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/GroupMemberApproveEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/GroupMemberApproveEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent) // cn.rtast.rob.event.packed/GroupMemberApproveEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawJoinRequestApproveEvent){}[0]

    final val action // cn.rtast.rob.event.packed/GroupMemberApproveEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/GroupMemberApproveEvent.action.<get-action>|<get-action>(){}[0]
    final val event // cn.rtast.rob.event.packed/GroupMemberApproveEvent.event|{}event[0]
        final fun <get-event>(): cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent // cn.rtast.rob.event.packed/GroupMemberApproveEvent.event.<get-event>|<get-event>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/GroupMemberApproveEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent // cn.rtast.rob.event.packed/GroupMemberApproveEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent = ...): cn.rtast.rob.event.packed/GroupMemberApproveEvent // cn.rtast.rob.event.packed/GroupMemberApproveEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawJoinRequestApproveEvent){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/GroupMemberApproveEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/GroupMemberApproveEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/GroupMemberApproveEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/GroupMemberLeaveEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/GroupMemberLeaveEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent) // cn.rtast.rob.event.packed/GroupMemberLeaveEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawGroupMemberLeaveEvent){}[0]

    final val action // cn.rtast.rob.event.packed/GroupMemberLeaveEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/GroupMemberLeaveEvent.action.<get-action>|<get-action>(){}[0]
    final val event // cn.rtast.rob.event.packed/GroupMemberLeaveEvent.event|{}event[0]
        final fun <get-event>(): cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent // cn.rtast.rob.event.packed/GroupMemberLeaveEvent.event.<get-event>|<get-event>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/GroupMemberLeaveEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent // cn.rtast.rob.event.packed/GroupMemberLeaveEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent = ...): cn.rtast.rob.event.packed/GroupMemberLeaveEvent // cn.rtast.rob.event.packed/GroupMemberLeaveEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawGroupMemberLeaveEvent){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/GroupMemberLeaveEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/GroupMemberLeaveEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/GroupMemberLeaveEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/GroupMessageEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/GroupMessageEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.message/GroupMessage) // cn.rtast.rob.event.packed/GroupMessageEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.message.GroupMessage){}[0]

    final val action // cn.rtast.rob.event.packed/GroupMessageEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/GroupMessageEvent.action.<get-action>|<get-action>(){}[0]
    final val message // cn.rtast.rob.event.packed/GroupMessageEvent.message|{}message[0]
        final fun <get-message>(): cn.rtast.rob.event.raw.message/GroupMessage // cn.rtast.rob.event.packed/GroupMessageEvent.message.<get-message>|<get-message>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/GroupMessageEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.message/GroupMessage // cn.rtast.rob.event.packed/GroupMessageEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.message/GroupMessage = ...): cn.rtast.rob.event.packed/GroupMessageEvent // cn.rtast.rob.event.packed/GroupMessageEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.message.GroupMessage){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/GroupMessageEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/GroupMessageEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/GroupMessageEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/GroupMessageRevokeEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/GroupMessageRevokeEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.message/RawGroupRevokeMessage) // cn.rtast.rob.event.packed/GroupMessageRevokeEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.message.RawGroupRevokeMessage){}[0]

    final val action // cn.rtast.rob.event.packed/GroupMessageRevokeEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/GroupMessageRevokeEvent.action.<get-action>|<get-action>(){}[0]
    final val event // cn.rtast.rob.event.packed/GroupMessageRevokeEvent.event|{}event[0]
        final fun <get-event>(): cn.rtast.rob.event.raw.message/RawGroupRevokeMessage // cn.rtast.rob.event.packed/GroupMessageRevokeEvent.event.<get-event>|<get-event>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/GroupMessageRevokeEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.message/RawGroupRevokeMessage // cn.rtast.rob.event.packed/GroupMessageRevokeEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.message/RawGroupRevokeMessage = ...): cn.rtast.rob.event.packed/GroupMessageRevokeEvent // cn.rtast.rob.event.packed/GroupMessageRevokeEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.message.RawGroupRevokeMessage){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/GroupMessageRevokeEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/GroupMessageRevokeEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/GroupMessageRevokeEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/GroupNameChangedEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/GroupNameChangedEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent) // cn.rtast.rob.event.packed/GroupNameChangedEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawGroupNameChangeEvent){}[0]

    final val action // cn.rtast.rob.event.packed/GroupNameChangedEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/GroupNameChangedEvent.action.<get-action>|<get-action>(){}[0]
    final val event // cn.rtast.rob.event.packed/GroupNameChangedEvent.event|{}event[0]
        final fun <get-event>(): cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent // cn.rtast.rob.event.packed/GroupNameChangedEvent.event.<get-event>|<get-event>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/GroupNameChangedEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent // cn.rtast.rob.event.packed/GroupNameChangedEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent = ...): cn.rtast.rob.event.packed/GroupNameChangedEvent // cn.rtast.rob.event.packed/GroupNameChangedEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawGroupNameChangeEvent){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/GroupNameChangedEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/GroupNameChangedEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/GroupNameChangedEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/GroupPokeEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/GroupPokeEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.group/RawPokeEvent) // cn.rtast.rob.event.packed/GroupPokeEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawPokeEvent){}[0]

    final val action // cn.rtast.rob.event.packed/GroupPokeEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/GroupPokeEvent.action.<get-action>|<get-action>(){}[0]
    final val event // cn.rtast.rob.event.packed/GroupPokeEvent.event|{}event[0]
        final fun <get-event>(): cn.rtast.rob.event.raw.group/RawPokeEvent // cn.rtast.rob.event.packed/GroupPokeEvent.event.<get-event>|<get-event>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/GroupPokeEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.group/RawPokeEvent // cn.rtast.rob.event.packed/GroupPokeEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.group/RawPokeEvent = ...): cn.rtast.rob.event.packed/GroupPokeEvent // cn.rtast.rob.event.packed/GroupPokeEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawPokeEvent){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/GroupPokeEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/GroupPokeEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/GroupPokeEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/GroupPokeSelfEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/GroupPokeSelfEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.group/RawPokeEvent) // cn.rtast.rob.event.packed/GroupPokeSelfEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawPokeEvent){}[0]

    final val action // cn.rtast.rob.event.packed/GroupPokeSelfEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/GroupPokeSelfEvent.action.<get-action>|<get-action>(){}[0]
    final val event // cn.rtast.rob.event.packed/GroupPokeSelfEvent.event|{}event[0]
        final fun <get-event>(): cn.rtast.rob.event.raw.group/RawPokeEvent // cn.rtast.rob.event.packed/GroupPokeSelfEvent.event.<get-event>|<get-event>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/GroupPokeSelfEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.group/RawPokeEvent // cn.rtast.rob.event.packed/GroupPokeSelfEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.group/RawPokeEvent = ...): cn.rtast.rob.event.packed/GroupPokeSelfEvent // cn.rtast.rob.event.packed/GroupPokeSelfEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawPokeEvent){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/GroupPokeSelfEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/GroupPokeSelfEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/GroupPokeSelfEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/MemberKickEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/MemberKickEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.group/RawMemberKickEvent) // cn.rtast.rob.event.packed/MemberKickEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawMemberKickEvent){}[0]

    final val action // cn.rtast.rob.event.packed/MemberKickEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/MemberKickEvent.action.<get-action>|<get-action>(){}[0]
    final val event // cn.rtast.rob.event.packed/MemberKickEvent.event|{}event[0]
        final fun <get-event>(): cn.rtast.rob.event.raw.group/RawMemberKickEvent // cn.rtast.rob.event.packed/MemberKickEvent.event.<get-event>|<get-event>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/MemberKickEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.group/RawMemberKickEvent // cn.rtast.rob.event.packed/MemberKickEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.group/RawMemberKickEvent = ...): cn.rtast.rob.event.packed/MemberKickEvent // cn.rtast.rob.event.packed/MemberKickEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawMemberKickEvent){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/MemberKickEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/MemberKickEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/MemberKickEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/MessageTimeoutEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/MessageTimeoutEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, kotlin/String) // cn.rtast.rob.event.packed/MessageTimeoutEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;kotlin.String){}[0]

    final val action // cn.rtast.rob.event.packed/MessageTimeoutEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/MessageTimeoutEvent.action.<get-action>|<get-action>(){}[0]
    final val message // cn.rtast.rob.event.packed/MessageTimeoutEvent.message|{}message[0]
        final fun <get-message>(): kotlin/String // cn.rtast.rob.event.packed/MessageTimeoutEvent.message.<get-message>|<get-message>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/MessageTimeoutEvent.component1|component1(){}[0]
    final fun component2(): kotlin/String // cn.rtast.rob.event.packed/MessageTimeoutEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., kotlin/String = ...): cn.rtast.rob.event.packed/MessageTimeoutEvent // cn.rtast.rob.event.packed/MessageTimeoutEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/MessageTimeoutEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/MessageTimeoutEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/MessageTimeoutEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/PardonBanEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/PardonBanEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.group/RawPardonBanEvent) // cn.rtast.rob.event.packed/PardonBanEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawPardonBanEvent){}[0]

    final val action // cn.rtast.rob.event.packed/PardonBanEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/PardonBanEvent.action.<get-action>|<get-action>(){}[0]
    final val event // cn.rtast.rob.event.packed/PardonBanEvent.event|{}event[0]
        final fun <get-event>(): cn.rtast.rob.event.raw.group/RawPardonBanEvent // cn.rtast.rob.event.packed/PardonBanEvent.event.<get-event>|<get-event>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/PardonBanEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.group/RawPardonBanEvent // cn.rtast.rob.event.packed/PardonBanEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.group/RawPardonBanEvent = ...): cn.rtast.rob.event.packed/PardonBanEvent // cn.rtast.rob.event.packed/PardonBanEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawPardonBanEvent){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/PardonBanEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/PardonBanEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/PardonBanEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/PrivateFileUploadEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/PrivateFileUploadEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.file/RawFileEvent) // cn.rtast.rob.event.packed/PrivateFileUploadEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.file.RawFileEvent){}[0]

    final val action // cn.rtast.rob.event.packed/PrivateFileUploadEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/PrivateFileUploadEvent.action.<get-action>|<get-action>(){}[0]
    final val file // cn.rtast.rob.event.packed/PrivateFileUploadEvent.file|{}file[0]
        final fun <get-file>(): cn.rtast.rob.event.raw.file/RawFileEvent // cn.rtast.rob.event.packed/PrivateFileUploadEvent.file.<get-file>|<get-file>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/PrivateFileUploadEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.file/RawFileEvent // cn.rtast.rob.event.packed/PrivateFileUploadEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.file/RawFileEvent = ...): cn.rtast.rob.event.packed/PrivateFileUploadEvent // cn.rtast.rob.event.packed/PrivateFileUploadEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.file.RawFileEvent){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/PrivateFileUploadEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/PrivateFileUploadEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/PrivateFileUploadEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/PrivateMessageEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/PrivateMessageEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.message/PrivateMessage) // cn.rtast.rob.event.packed/PrivateMessageEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.message.PrivateMessage){}[0]

    final val action // cn.rtast.rob.event.packed/PrivateMessageEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/PrivateMessageEvent.action.<get-action>|<get-action>(){}[0]
    final val message // cn.rtast.rob.event.packed/PrivateMessageEvent.message|{}message[0]
        final fun <get-message>(): cn.rtast.rob.event.raw.message/PrivateMessage // cn.rtast.rob.event.packed/PrivateMessageEvent.message.<get-message>|<get-message>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/PrivateMessageEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.message/PrivateMessage // cn.rtast.rob.event.packed/PrivateMessageEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.message/PrivateMessage = ...): cn.rtast.rob.event.packed/PrivateMessageEvent // cn.rtast.rob.event.packed/PrivateMessageEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.message.PrivateMessage){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/PrivateMessageEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/PrivateMessageEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/PrivateMessageEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/PrivateMessageRevokeEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/PrivateMessageRevokeEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage) // cn.rtast.rob.event.packed/PrivateMessageRevokeEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.message.RawPrivateRevokeMessage){}[0]

    final val action // cn.rtast.rob.event.packed/PrivateMessageRevokeEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/PrivateMessageRevokeEvent.action.<get-action>|<get-action>(){}[0]
    final val event // cn.rtast.rob.event.packed/PrivateMessageRevokeEvent.event|{}event[0]
        final fun <get-event>(): cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage // cn.rtast.rob.event.packed/PrivateMessageRevokeEvent.event.<get-event>|<get-event>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/PrivateMessageRevokeEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage // cn.rtast.rob.event.packed/PrivateMessageRevokeEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage = ...): cn.rtast.rob.event.packed/PrivateMessageRevokeEvent // cn.rtast.rob.event.packed/PrivateMessageRevokeEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.message.RawPrivateRevokeMessage){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/PrivateMessageRevokeEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/PrivateMessageRevokeEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/PrivateMessageRevokeEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/PrivatePokeEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/PrivatePokeEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.group/RawPokeEvent) // cn.rtast.rob.event.packed/PrivatePokeEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawPokeEvent){}[0]

    final val action // cn.rtast.rob.event.packed/PrivatePokeEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/PrivatePokeEvent.action.<get-action>|<get-action>(){}[0]
    final val event // cn.rtast.rob.event.packed/PrivatePokeEvent.event|{}event[0]
        final fun <get-event>(): cn.rtast.rob.event.raw.group/RawPokeEvent // cn.rtast.rob.event.packed/PrivatePokeEvent.event.<get-event>|<get-event>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/PrivatePokeEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.group/RawPokeEvent // cn.rtast.rob.event.packed/PrivatePokeEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.group/RawPokeEvent = ...): cn.rtast.rob.event.packed/PrivatePokeEvent // cn.rtast.rob.event.packed/PrivatePokeEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawPokeEvent){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/PrivatePokeEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/PrivatePokeEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/PrivatePokeEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/RawEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/RawEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, kotlin/String) // cn.rtast.rob.event.packed/RawEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;kotlin.String){}[0]

    final val action // cn.rtast.rob.event.packed/RawEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/RawEvent.action.<get-action>|<get-action>(){}[0]
    final val rawMessage // cn.rtast.rob.event.packed/RawEvent.rawMessage|{}rawMessage[0]
        final fun <get-rawMessage>(): kotlin/String // cn.rtast.rob.event.packed/RawEvent.rawMessage.<get-rawMessage>|<get-rawMessage>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/RawEvent.component1|component1(){}[0]
    final fun component2(): kotlin/String // cn.rtast.rob.event.packed/RawEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., kotlin/String = ...): cn.rtast.rob.event.packed/RawEvent // cn.rtast.rob.event.packed/RawEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/RawEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/RawEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/RawEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/ReactionAddEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/ReactionAddEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.group/ReactionEvent) // cn.rtast.rob.event.packed/ReactionAddEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.ReactionEvent){}[0]

    final val action // cn.rtast.rob.event.packed/ReactionAddEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/ReactionAddEvent.action.<get-action>|<get-action>(){}[0]
    final val event // cn.rtast.rob.event.packed/ReactionAddEvent.event|{}event[0]
        final fun <get-event>(): cn.rtast.rob.event.raw.group/ReactionEvent // cn.rtast.rob.event.packed/ReactionAddEvent.event.<get-event>|<get-event>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/ReactionAddEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.group/ReactionEvent // cn.rtast.rob.event.packed/ReactionAddEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.group/ReactionEvent = ...): cn.rtast.rob.event.packed/ReactionAddEvent // cn.rtast.rob.event.packed/ReactionAddEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.ReactionEvent){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/ReactionAddEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/ReactionAddEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/ReactionAddEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/ReactionCommonEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/ReactionCommonEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.group/ReactionEvent) // cn.rtast.rob.event.packed/ReactionCommonEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.ReactionEvent){}[0]

    final val action // cn.rtast.rob.event.packed/ReactionCommonEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/ReactionCommonEvent.action.<get-action>|<get-action>(){}[0]
    final val event // cn.rtast.rob.event.packed/ReactionCommonEvent.event|{}event[0]
        final fun <get-event>(): cn.rtast.rob.event.raw.group/ReactionEvent // cn.rtast.rob.event.packed/ReactionCommonEvent.event.<get-event>|<get-event>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/ReactionCommonEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.group/ReactionEvent // cn.rtast.rob.event.packed/ReactionCommonEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.group/ReactionEvent = ...): cn.rtast.rob.event.packed/ReactionCommonEvent // cn.rtast.rob.event.packed/ReactionCommonEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.ReactionEvent){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/ReactionCommonEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/ReactionCommonEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/ReactionCommonEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/ReactionRemoveEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/ReactionRemoveEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.group/ReactionEvent) // cn.rtast.rob.event.packed/ReactionRemoveEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.ReactionEvent){}[0]

    final val action // cn.rtast.rob.event.packed/ReactionRemoveEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/ReactionRemoveEvent.action.<get-action>|<get-action>(){}[0]
    final val event // cn.rtast.rob.event.packed/ReactionRemoveEvent.event|{}event[0]
        final fun <get-event>(): cn.rtast.rob.event.raw.group/ReactionEvent // cn.rtast.rob.event.packed/ReactionRemoveEvent.event.<get-event>|<get-event>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/ReactionRemoveEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.group/ReactionEvent // cn.rtast.rob.event.packed/ReactionRemoveEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.group/ReactionEvent = ...): cn.rtast.rob.event.packed/ReactionRemoveEvent // cn.rtast.rob.event.packed/ReactionRemoveEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.ReactionEvent){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/ReactionRemoveEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/ReactionRemoveEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/ReactionRemoveEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/RequestJoinGroupEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/RequestJoinGroupEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.request/JoinGroupRequestEvent) // cn.rtast.rob.event.packed/RequestJoinGroupEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.request.JoinGroupRequestEvent){}[0]

    final val action // cn.rtast.rob.event.packed/RequestJoinGroupEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/RequestJoinGroupEvent.action.<get-action>|<get-action>(){}[0]
    final val event // cn.rtast.rob.event.packed/RequestJoinGroupEvent.event|{}event[0]
        final fun <get-event>(): cn.rtast.rob.event.raw.request/JoinGroupRequestEvent // cn.rtast.rob.event.packed/RequestJoinGroupEvent.event.<get-event>|<get-event>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/RequestJoinGroupEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.request/JoinGroupRequestEvent // cn.rtast.rob.event.packed/RequestJoinGroupEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.request/JoinGroupRequestEvent = ...): cn.rtast.rob.event.packed/RequestJoinGroupEvent // cn.rtast.rob.event.packed/RequestJoinGroupEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.request.JoinGroupRequestEvent){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/RequestJoinGroupEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/RequestJoinGroupEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/RequestJoinGroupEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/SetOperatorEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/SetOperatorEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.group/RawSetOperatorEvent) // cn.rtast.rob.event.packed/SetOperatorEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawSetOperatorEvent){}[0]

    final val action // cn.rtast.rob.event.packed/SetOperatorEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/SetOperatorEvent.action.<get-action>|<get-action>(){}[0]
    final val event // cn.rtast.rob.event.packed/SetOperatorEvent.event|{}event[0]
        final fun <get-event>(): cn.rtast.rob.event.raw.group/RawSetOperatorEvent // cn.rtast.rob.event.packed/SetOperatorEvent.event.<get-event>|<get-event>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/SetOperatorEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.group/RawSetOperatorEvent // cn.rtast.rob.event.packed/SetOperatorEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.group/RawSetOperatorEvent = ...): cn.rtast.rob.event.packed/SetOperatorEvent // cn.rtast.rob.event.packed/SetOperatorEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawSetOperatorEvent){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/SetOperatorEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/SetOperatorEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/SetOperatorEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/UnsetOperatorEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/UnsetOperatorEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent) // cn.rtast.rob.event.packed/UnsetOperatorEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawUnsetOperatorEvent){}[0]

    final val action // cn.rtast.rob.event.packed/UnsetOperatorEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/UnsetOperatorEvent.action.<get-action>|<get-action>(){}[0]
    final val event // cn.rtast.rob.event.packed/UnsetOperatorEvent.event|{}event[0]
        final fun <get-event>(): cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent // cn.rtast.rob.event.packed/UnsetOperatorEvent.event.<get-event>|<get-event>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/UnsetOperatorEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent // cn.rtast.rob.event.packed/UnsetOperatorEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent = ...): cn.rtast.rob.event.packed/UnsetOperatorEvent // cn.rtast.rob.event.packed/UnsetOperatorEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.group.RawUnsetOperatorEvent){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/UnsetOperatorEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/UnsetOperatorEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/UnsetOperatorEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/WebsocketCloseEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/WebsocketCloseEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.internal/RawWebsocketCloseEvent) // cn.rtast.rob.event.packed/WebsocketCloseEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.internal.RawWebsocketCloseEvent){}[0]

    final val action // cn.rtast.rob.event.packed/WebsocketCloseEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/WebsocketCloseEvent.action.<get-action>|<get-action>(){}[0]
    final val event // cn.rtast.rob.event.packed/WebsocketCloseEvent.event|{}event[0]
        final fun <get-event>(): cn.rtast.rob.event.raw.internal/RawWebsocketCloseEvent // cn.rtast.rob.event.packed/WebsocketCloseEvent.event.<get-event>|<get-event>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/WebsocketCloseEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.internal/RawWebsocketCloseEvent // cn.rtast.rob.event.packed/WebsocketCloseEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.internal/RawWebsocketCloseEvent = ...): cn.rtast.rob.event.packed/WebsocketCloseEvent // cn.rtast.rob.event.packed/WebsocketCloseEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.internal.RawWebsocketCloseEvent){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/WebsocketCloseEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/WebsocketCloseEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/WebsocketCloseEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/WebsocketConnectedEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/WebsocketConnectedEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.packed/WebsocketConnectedEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction){}[0]

    final val action // cn.rtast.rob.event.packed/WebsocketConnectedEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/WebsocketConnectedEvent.action.<get-action>|<get-action>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/WebsocketConnectedEvent.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ...): cn.rtast.rob.event.packed/WebsocketConnectedEvent // cn.rtast.rob.event.packed/WebsocketConnectedEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/WebsocketConnectedEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/WebsocketConnectedEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/WebsocketConnectedEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/WebsocketErrorEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/WebsocketErrorEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, cn.rtast.rob.event.raw.internal/RawWebsocketErrorEvent) // cn.rtast.rob.event.packed/WebsocketErrorEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.internal.RawWebsocketErrorEvent){}[0]

    final val action // cn.rtast.rob.event.packed/WebsocketErrorEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/WebsocketErrorEvent.action.<get-action>|<get-action>(){}[0]
    final val event // cn.rtast.rob.event.packed/WebsocketErrorEvent.event|{}event[0]
        final fun <get-event>(): cn.rtast.rob.event.raw.internal/RawWebsocketErrorEvent // cn.rtast.rob.event.packed/WebsocketErrorEvent.event.<get-event>|<get-event>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/WebsocketErrorEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.internal/RawWebsocketErrorEvent // cn.rtast.rob.event.packed/WebsocketErrorEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., cn.rtast.rob.event.raw.internal/RawWebsocketErrorEvent = ...): cn.rtast.rob.event.packed/WebsocketErrorEvent // cn.rtast.rob.event.packed/WebsocketErrorEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;cn.rtast.rob.event.raw.internal.RawWebsocketErrorEvent){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/WebsocketErrorEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/WebsocketErrorEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/WebsocketErrorEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.packed/WebsocketServerStartedEvent : cn.rtast.rob.event/OneBotEvent { // cn.rtast.rob.event.packed/WebsocketServerStartedEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, kotlin/Int) // cn.rtast.rob.event.packed/WebsocketServerStartedEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;kotlin.Int){}[0]

    final val action // cn.rtast.rob.event.packed/WebsocketServerStartedEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/WebsocketServerStartedEvent.action.<get-action>|<get-action>(){}[0]
    final val port // cn.rtast.rob.event.packed/WebsocketServerStartedEvent.port|{}port[0]
        final fun <get-port>(): kotlin/Int // cn.rtast.rob.event.packed/WebsocketServerStartedEvent.port.<get-port>|<get-port>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.packed/WebsocketServerStartedEvent.component1|component1(){}[0]
    final fun component2(): kotlin/Int // cn.rtast.rob.event.packed/WebsocketServerStartedEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., kotlin/Int = ...): cn.rtast.rob.event.packed/WebsocketServerStartedEvent // cn.rtast.rob.event.packed/WebsocketServerStartedEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.packed/WebsocketServerStartedEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.packed/WebsocketServerStartedEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.packed/WebsocketServerStartedEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.raw.file/GetFileResponse { // cn.rtast.rob.event.raw.file/GetFileResponse|null[0]
    constructor <init>(cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo) // cn.rtast.rob.event.raw.file/GetFileResponse.<init>|<init>(cn.rtast.rob.event.raw.file.GetFileResponse.GetFileResponseInfo){}[0]

    final val data // cn.rtast.rob.event.raw.file/GetFileResponse.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo // cn.rtast.rob.event.raw.file/GetFileResponse.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo // cn.rtast.rob.event.raw.file/GetFileResponse.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo = ...): cn.rtast.rob.event.raw.file/GetFileResponse // cn.rtast.rob.event.raw.file/GetFileResponse.copy|copy(cn.rtast.rob.event.raw.file.GetFileResponse.GetFileResponseInfo){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.file/GetFileResponse.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.file/GetFileResponse.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.file/GetFileResponse.toString|toString(){}[0]

    final class GetFileResponseInfo { // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo|null[0]
        constructor <init>(kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String? = ...) // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.<init>|<init>(kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String?){}[0]

        final val base64 // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.base64|{}base64[0]
            final fun <get-base64>(): kotlin/String? // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.base64.<get-base64>|<get-base64>(){}[0]
        final val file // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.file|{}file[0]
            final fun <get-file>(): kotlin/String // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.file.<get-file>|<get-file>(){}[0]
        final val fileSize // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.fileSize|{}fileSize[0]
            final fun <get-fileSize>(): kotlin/String // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.fileSize.<get-fileSize>|<get-fileSize>(){}[0]
        final val filename // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.filename|{}filename[0]
            final fun <get-filename>(): kotlin/String // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.filename.<get-filename>|<get-filename>(){}[0]
        final val url // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.url|{}url[0]
            final fun <get-url>(): kotlin/String // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.url.<get-url>|<get-url>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.component2|component2(){}[0]
        final fun component3(): kotlin/String // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.component3|component3(){}[0]
        final fun component4(): kotlin/String // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.component4|component4(){}[0]
        final fun component5(): kotlin/String? // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.component5|component5(){}[0]
        final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String? = ...): cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.copy|copy(kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo> { // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo) // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.file.GetFileResponse.GetFileResponseInfo){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo> // cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.file/GetFileResponse> { // cn.rtast.rob.event.raw.file/GetFileResponse.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.file/GetFileResponse.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.file/GetFileResponse.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.file/GetFileResponse.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.file/GetFileResponse // cn.rtast.rob.event.raw.file/GetFileResponse.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.file/GetFileResponse) // cn.rtast.rob.event.raw.file/GetFileResponse.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.file.GetFileResponse){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.file/GetFileResponse.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.file/GetFileResponse> // cn.rtast.rob.event.raw.file/GetFileResponse.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.file/GetGroupFileUrl { // cn.rtast.rob.event.raw.file/GetGroupFileUrl|null[0]
    constructor <init>(cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL) // cn.rtast.rob.event.raw.file/GetGroupFileUrl.<init>|<init>(cn.rtast.rob.event.raw.file.GetGroupFileUrl.FileURL){}[0]

    final val data // cn.rtast.rob.event.raw.file/GetGroupFileUrl.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL // cn.rtast.rob.event.raw.file/GetGroupFileUrl.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL // cn.rtast.rob.event.raw.file/GetGroupFileUrl.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL = ...): cn.rtast.rob.event.raw.file/GetGroupFileUrl // cn.rtast.rob.event.raw.file/GetGroupFileUrl.copy|copy(cn.rtast.rob.event.raw.file.GetGroupFileUrl.FileURL){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.file/GetGroupFileUrl.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.file/GetGroupFileUrl.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.file/GetGroupFileUrl.toString|toString(){}[0]

    final class FileURL { // cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL|null[0]
        constructor <init>(kotlin/String) // cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL.<init>|<init>(kotlin.String){}[0]

        final val url // cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL.url|{}url[0]
            final fun <get-url>(): kotlin/String // cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL.url.<get-url>|<get-url>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL.component1|component1(){}[0]
        final fun copy(kotlin/String = ...): cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL // cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL.copy|copy(kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL> { // cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL // cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL) // cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.file.GetGroupFileUrl.FileURL){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL> // cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.file/GetGroupFileUrl> { // cn.rtast.rob.event.raw.file/GetGroupFileUrl.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.file/GetGroupFileUrl.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.file/GetGroupFileUrl.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.file/GetGroupFileUrl.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.file/GetGroupFileUrl // cn.rtast.rob.event.raw.file/GetGroupFileUrl.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.file/GetGroupFileUrl) // cn.rtast.rob.event.raw.file/GetGroupFileUrl.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.file.GetGroupFileUrl){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.file/GetGroupFileUrl.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.file/GetGroupFileUrl> // cn.rtast.rob.event.raw.file/GetGroupFileUrl.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.file/GetGroupRootFiles { // cn.rtast.rob.event.raw.file/GetGroupRootFiles|null[0]
    constructor <init>(cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles) // cn.rtast.rob.event.raw.file/GetGroupRootFiles.<init>|<init>(cn.rtast.rob.event.raw.file.GetGroupRootFiles.RootFiles){}[0]

    final val data // cn.rtast.rob.event.raw.file/GetGroupRootFiles.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles // cn.rtast.rob.event.raw.file/GetGroupRootFiles.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles // cn.rtast.rob.event.raw.file/GetGroupRootFiles.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles = ...): cn.rtast.rob.event.raw.file/GetGroupRootFiles // cn.rtast.rob.event.raw.file/GetGroupRootFiles.copy|copy(cn.rtast.rob.event.raw.file.GetGroupRootFiles.RootFiles){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.file/GetGroupRootFiles.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.file/GetGroupRootFiles.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.file/GetGroupRootFiles.toString|toString(){}[0]

    final class RootFiles { // cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles|null[0]
        constructor <init>(kotlin.collections/List<cn.rtast.rob.event.raw.group/OneBotGroupFile>, kotlin.collections/List<cn.rtast.rob.event.raw.group/OneBotGroupFolder>) // cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles.<init>|<init>(kotlin.collections.List<cn.rtast.rob.event.raw.group.OneBotGroupFile>;kotlin.collections.List<cn.rtast.rob.event.raw.group.OneBotGroupFolder>){}[0]

        final val files // cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles.files|{}files[0]
            final fun <get-files>(): kotlin.collections/List<cn.rtast.rob.event.raw.group/OneBotGroupFile> // cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles.files.<get-files>|<get-files>(){}[0]
        final val folders // cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles.folders|{}folders[0]
            final fun <get-folders>(): kotlin.collections/List<cn.rtast.rob.event.raw.group/OneBotGroupFolder> // cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles.folders.<get-folders>|<get-folders>(){}[0]

        final fun component1(): kotlin.collections/List<cn.rtast.rob.event.raw.group/OneBotGroupFile> // cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles.component1|component1(){}[0]
        final fun component2(): kotlin.collections/List<cn.rtast.rob.event.raw.group/OneBotGroupFolder> // cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles.component2|component2(){}[0]
        final fun copy(kotlin.collections/List<cn.rtast.rob.event.raw.group/OneBotGroupFile> = ..., kotlin.collections/List<cn.rtast.rob.event.raw.group/OneBotGroupFolder> = ...): cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles // cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles.copy|copy(kotlin.collections.List<cn.rtast.rob.event.raw.group.OneBotGroupFile>;kotlin.collections.List<cn.rtast.rob.event.raw.group.OneBotGroupFolder>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles> { // cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles // cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles) // cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.file.GetGroupRootFiles.RootFiles){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles.Companion|null[0]
            final val $childSerializers // cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles> // cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.file/GetGroupRootFiles> { // cn.rtast.rob.event.raw.file/GetGroupRootFiles.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.file/GetGroupRootFiles.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.file/GetGroupRootFiles.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.file/GetGroupRootFiles.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.file/GetGroupRootFiles // cn.rtast.rob.event.raw.file/GetGroupRootFiles.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.file/GetGroupRootFiles) // cn.rtast.rob.event.raw.file/GetGroupRootFiles.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.file.GetGroupRootFiles){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.file/GetGroupRootFiles.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.file/GetGroupRootFiles> // cn.rtast.rob.event.raw.file/GetGroupRootFiles.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.file/GetPrivateFileUrl { // cn.rtast.rob.event.raw.file/GetPrivateFileUrl|null[0]
    constructor <init>(cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl) // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.<init>|<init>(cn.rtast.rob.event.raw.file.GetPrivateFileUrl.PrivateFileUrl){}[0]

    final val data // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl = ...): cn.rtast.rob.event.raw.file/GetPrivateFileUrl // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.copy|copy(cn.rtast.rob.event.raw.file.GetPrivateFileUrl.PrivateFileUrl){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.toString|toString(){}[0]

    final class PrivateFileUrl { // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl|null[0]
        constructor <init>(kotlin/String) // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl.<init>|<init>(kotlin.String){}[0]

        final val url // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl.url|{}url[0]
            final fun <get-url>(): kotlin/String // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl.url.<get-url>|<get-url>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl.component1|component1(){}[0]
        final fun copy(kotlin/String = ...): cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl.copy|copy(kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl> { // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl) // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.file.GetPrivateFileUrl.PrivateFileUrl){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl> // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.PrivateFileUrl.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.file/GetPrivateFileUrl> { // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.file/GetPrivateFileUrl // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.file/GetPrivateFileUrl) // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.file.GetPrivateFileUrl){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.file/GetPrivateFileUrl> // cn.rtast.rob.event.raw.file/GetPrivateFileUrl.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.file/GroupFileSystemInfo { // cn.rtast.rob.event.raw.file/GroupFileSystemInfo|null[0]
    constructor <init>(cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo) // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.<init>|<init>(cn.rtast.rob.event.raw.file.GroupFileSystemInfo.FileSystemInfo){}[0]

    final val data // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo = ...): cn.rtast.rob.event.raw.file/GroupFileSystemInfo // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.copy|copy(cn.rtast.rob.event.raw.file.GroupFileSystemInfo.FileSystemInfo){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.toString|toString(){}[0]

    final class FileSystemInfo { // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo|null[0]
        constructor <init>(kotlin/Int, kotlin/Int, kotlin/Long, kotlin/Long) // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.Long;kotlin.Long){}[0]

        final val fileCount // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.fileCount|{}fileCount[0]
            final fun <get-fileCount>(): kotlin/Int // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.fileCount.<get-fileCount>|<get-fileCount>(){}[0]
        final val limitCount // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.limitCount|{}limitCount[0]
            final fun <get-limitCount>(): kotlin/Int // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.limitCount.<get-limitCount>|<get-limitCount>(){}[0]
        final val totalGB // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.totalGB|{}totalGB[0]
            final fun <get-totalGB>(): kotlin/Long // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.totalGB.<get-totalGB>|<get-totalGB>(){}[0]
        final val totalMB // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.totalMB|{}totalMB[0]
            final fun <get-totalMB>(): kotlin/Long // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.totalMB.<get-totalMB>|<get-totalMB>(){}[0]
        final val totalSpace // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.totalSpace|{}totalSpace[0]
            final fun <get-totalSpace>(): kotlin/Long // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.totalSpace.<get-totalSpace>|<get-totalSpace>(){}[0]
        final val usedGB // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.usedGB|{}usedGB[0]
            final fun <get-usedGB>(): kotlin/Long // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.usedGB.<get-usedGB>|<get-usedGB>(){}[0]
        final val usedMB // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.usedMB|{}usedMB[0]
            final fun <get-usedMB>(): kotlin/Long // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.usedMB.<get-usedMB>|<get-usedMB>(){}[0]
        final val usedSpace // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.usedSpace|{}usedSpace[0]
            final fun <get-usedSpace>(): kotlin/Long // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.usedSpace.<get-usedSpace>|<get-usedSpace>(){}[0]

        final fun component1(): kotlin/Int // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.component1|component1(){}[0]
        final fun component2(): kotlin/Int // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.component2|component2(){}[0]
        final fun component3(): kotlin/Long // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.component3|component3(){}[0]
        final fun component4(): kotlin/Long // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.component4|component4(){}[0]
        final fun copy(kotlin/Int = ..., kotlin/Int = ..., kotlin/Long = ..., kotlin/Long = ...): cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.copy|copy(kotlin.Int;kotlin.Int;kotlin.Long;kotlin.Long){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo> { // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo) // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.file.GroupFileSystemInfo.FileSystemInfo){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo> // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.file/GroupFileSystemInfo> { // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.file/GroupFileSystemInfo // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.file/GroupFileSystemInfo) // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.file.GroupFileSystemInfo){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.file/GroupFileSystemInfo> // cn.rtast.rob.event.raw.file/GroupFileSystemInfo.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.file/RawFileEvent : cn.rtast.rob.actionable/FileEventActionable { // cn.rtast.rob.event.raw.file/RawFileEvent|null[0]
    constructor <init>(kotlin/Long?, kotlin/Long, cn.rtast.rob.event.raw.file/RawFileEvent.File) // cn.rtast.rob.event.raw.file/RawFileEvent.<init>|<init>(kotlin.Long?;kotlin.Long;cn.rtast.rob.event.raw.file.RawFileEvent.File){}[0]

    final val file // cn.rtast.rob.event.raw.file/RawFileEvent.file|{}file[0]
        final fun <get-file>(): cn.rtast.rob.event.raw.file/RawFileEvent.File // cn.rtast.rob.event.raw.file/RawFileEvent.file.<get-file>|<get-file>(){}[0]
    final val groupId // cn.rtast.rob.event.raw.file/RawFileEvent.groupId|{}groupId[0]
        final fun <get-groupId>(): kotlin/Long? // cn.rtast.rob.event.raw.file/RawFileEvent.groupId.<get-groupId>|<get-groupId>(){}[0]
    final val userId // cn.rtast.rob.event.raw.file/RawFileEvent.userId|{}userId[0]
        final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.file/RawFileEvent.userId.<get-userId>|<get-userId>(){}[0]

    final var action // cn.rtast.rob.event.raw.file/RawFileEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.file/RawFileEvent.action.<get-action>|<get-action>(){}[0]
        final fun <set-action>(cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.file/RawFileEvent.action.<set-action>|<set-action>(cn.rtast.rob.onebot.OneBotAction){}[0]

    final fun component1(): kotlin/Long? // cn.rtast.rob.event.raw.file/RawFileEvent.component1|component1(){}[0]
    final fun component2(): kotlin/Long // cn.rtast.rob.event.raw.file/RawFileEvent.component2|component2(){}[0]
    final fun component3(): cn.rtast.rob.event.raw.file/RawFileEvent.File // cn.rtast.rob.event.raw.file/RawFileEvent.component3|component3(){}[0]
    final fun copy(kotlin/Long? = ..., kotlin/Long = ..., cn.rtast.rob.event.raw.file/RawFileEvent.File = ...): cn.rtast.rob.event.raw.file/RawFileEvent // cn.rtast.rob.event.raw.file/RawFileEvent.copy|copy(kotlin.Long?;kotlin.Long;cn.rtast.rob.event.raw.file.RawFileEvent.File){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.file/RawFileEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.file/RawFileEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.file/RawFileEvent.toString|toString(){}[0]
    final suspend fun readBytes(): kotlin/ByteArray // cn.rtast.rob.event.raw.file/RawFileEvent.readBytes|readBytes(){}[0]
    final suspend fun saveTo(kotlinx.io.files/Path) // cn.rtast.rob.event.raw.file/RawFileEvent.saveTo|saveTo(kotlinx.io.files.Path){}[0]

    final class File { // cn.rtast.rob.event.raw.file/RawFileEvent.File|null[0]
        constructor <init>(kotlin/String, kotlin/String, kotlin/Int, kotlin/String, kotlin/Long) // cn.rtast.rob.event.raw.file/RawFileEvent.File.<init>|<init>(kotlin.String;kotlin.String;kotlin.Int;kotlin.String;kotlin.Long){}[0]

        final val busId // cn.rtast.rob.event.raw.file/RawFileEvent.File.busId|{}busId[0]
            final fun <get-busId>(): kotlin/Long // cn.rtast.rob.event.raw.file/RawFileEvent.File.busId.<get-busId>|<get-busId>(){}[0]
        final val id // cn.rtast.rob.event.raw.file/RawFileEvent.File.id|{}id[0]
            final fun <get-id>(): kotlin/String // cn.rtast.rob.event.raw.file/RawFileEvent.File.id.<get-id>|<get-id>(){}[0]
        final val name // cn.rtast.rob.event.raw.file/RawFileEvent.File.name|{}name[0]
            final fun <get-name>(): kotlin/String // cn.rtast.rob.event.raw.file/RawFileEvent.File.name.<get-name>|<get-name>(){}[0]
        final val size // cn.rtast.rob.event.raw.file/RawFileEvent.File.size|{}size[0]
            final fun <get-size>(): kotlin/Int // cn.rtast.rob.event.raw.file/RawFileEvent.File.size.<get-size>|<get-size>(){}[0]
        final val url // cn.rtast.rob.event.raw.file/RawFileEvent.File.url|{}url[0]
            final fun <get-url>(): kotlin/String // cn.rtast.rob.event.raw.file/RawFileEvent.File.url.<get-url>|<get-url>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.event.raw.file/RawFileEvent.File.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.file/RawFileEvent.File.component2|component2(){}[0]
        final fun component3(): kotlin/Int // cn.rtast.rob.event.raw.file/RawFileEvent.File.component3|component3(){}[0]
        final fun component4(): kotlin/String // cn.rtast.rob.event.raw.file/RawFileEvent.File.component4|component4(){}[0]
        final fun component5(): kotlin/Long // cn.rtast.rob.event.raw.file/RawFileEvent.File.component5|component5(){}[0]
        final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/Int = ..., kotlin/String = ..., kotlin/Long = ...): cn.rtast.rob.event.raw.file/RawFileEvent.File // cn.rtast.rob.event.raw.file/RawFileEvent.File.copy|copy(kotlin.String;kotlin.String;kotlin.Int;kotlin.String;kotlin.Long){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.file/RawFileEvent.File.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.file/RawFileEvent.File.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.file/RawFileEvent.File.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.file/RawFileEvent.File> { // cn.rtast.rob.event.raw.file/RawFileEvent.File.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.file/RawFileEvent.File.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.file/RawFileEvent.File.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.file/RawFileEvent.File.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.file/RawFileEvent.File // cn.rtast.rob.event.raw.file/RawFileEvent.File.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.file/RawFileEvent.File) // cn.rtast.rob.event.raw.file/RawFileEvent.File.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.file.RawFileEvent.File){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.file/RawFileEvent.File.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.file/RawFileEvent.File> // cn.rtast.rob.event.raw.file/RawFileEvent.File.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.file/RawFileEvent> { // cn.rtast.rob.event.raw.file/RawFileEvent.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.file/RawFileEvent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.file/RawFileEvent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.file/RawFileEvent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.file/RawFileEvent // cn.rtast.rob.event.raw.file/RawFileEvent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.file/RawFileEvent) // cn.rtast.rob.event.raw.file/RawFileEvent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.file.RawFileEvent){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.file/RawFileEvent.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.file/RawFileEvent> // cn.rtast.rob.event.raw.file/RawFileEvent.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.file/UploadGroupFileResponse { // cn.rtast.rob.event.raw.file/UploadGroupFileResponse|null[0]
    constructor <init>(cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile) // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.<init>|<init>(cn.rtast.rob.event.raw.file.UploadGroupFileResponse.UploadGroupFile){}[0]

    final val data // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile = ...): cn.rtast.rob.event.raw.file/UploadGroupFileResponse // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.copy|copy(cn.rtast.rob.event.raw.file.UploadGroupFileResponse.UploadGroupFile){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.toString|toString(){}[0]

    final class UploadGroupFile { // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile|null[0]
        constructor <init>(kotlin/String, kotlin/Int) // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile.<init>|<init>(kotlin.String;kotlin.Int){}[0]

        final val message // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile.message|{}message[0]
            final fun <get-message>(): kotlin/String // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile.message.<get-message>|<get-message>(){}[0]
        final val retCode // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile.retCode|{}retCode[0]
            final fun <get-retCode>(): kotlin/Int // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile.retCode.<get-retCode>|<get-retCode>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile.component1|component1(){}[0]
        final fun component2(): kotlin/Int // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile.component2|component2(){}[0]
        final fun copy(kotlin/String = ..., kotlin/Int = ...): cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile.copy|copy(kotlin.String;kotlin.Int){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile> { // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile) // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.file.UploadGroupFileResponse.UploadGroupFile){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile> // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.file/UploadGroupFileResponse> { // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.file/UploadGroupFileResponse // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.file/UploadGroupFileResponse) // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.file.UploadGroupFileResponse){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.file/UploadGroupFileResponse> // cn.rtast.rob.event.raw.file/UploadGroupFileResponse.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.file/UploadPrivateFileResponse { // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse|null[0]
    constructor <init>(cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile) // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.<init>|<init>(cn.rtast.rob.event.raw.file.UploadPrivateFileResponse.UploadPrivateFile){}[0]

    final val data // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile = ...): cn.rtast.rob.event.raw.file/UploadPrivateFileResponse // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.copy|copy(cn.rtast.rob.event.raw.file.UploadPrivateFileResponse.UploadPrivateFile){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.toString|toString(){}[0]

    final class UploadPrivateFile { // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile|null[0]
        constructor <init>(kotlin/String, kotlin/Int) // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile.<init>|<init>(kotlin.String;kotlin.Int){}[0]

        final val message // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile.message|{}message[0]
            final fun <get-message>(): kotlin/String // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile.message.<get-message>|<get-message>(){}[0]
        final val retCode // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile.retCode|{}retCode[0]
            final fun <get-retCode>(): kotlin/Int // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile.retCode.<get-retCode>|<get-retCode>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile.component1|component1(){}[0]
        final fun component2(): kotlin/Int // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile.component2|component2(){}[0]
        final fun copy(kotlin/String = ..., kotlin/Int = ...): cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile.copy|copy(kotlin.String;kotlin.Int){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile> { // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile) // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.file.UploadPrivateFileResponse.UploadPrivateFile){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile> // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.file/UploadPrivateFileResponse> { // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.file/UploadPrivateFileResponse // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.file/UploadPrivateFileResponse) // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.file.UploadPrivateFileResponse){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.file/UploadPrivateFileResponse> // cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse { // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse|null[0]
    constructor <init>(cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend) // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.<init>|<init>(cn.rtast.rob.event.raw.friend.ArkSharePeerFriendResponse.ArkSharePeerFriend){}[0]

    final val data // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend = ...): cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.copy|copy(cn.rtast.rob.event.raw.friend.ArkSharePeerFriendResponse.ArkSharePeerFriend){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.toString|toString(){}[0]

    final class ArkSharePeerFriend { // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend|null[0]
        constructor <init>(kotlin/Int, kotlin/String, kotlin/String) // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend.<init>|<init>(kotlin.Int;kotlin.String;kotlin.String){}[0]

        final val arkMsg // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend.arkMsg|{}arkMsg[0]
            final fun <get-arkMsg>(): kotlin/String // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend.arkMsg.<get-arkMsg>|<get-arkMsg>(){}[0]
        final val errCode // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend.errCode|{}errCode[0]
            final fun <get-errCode>(): kotlin/Int // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend.errCode.<get-errCode>|<get-errCode>(){}[0]
        final val errMsg // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend.errMsg|{}errMsg[0]
            final fun <get-errMsg>(): kotlin/String // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend.errMsg.<get-errMsg>|<get-errMsg>(){}[0]

        final fun component1(): kotlin/Int // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend.component2|component2(){}[0]
        final fun component3(): kotlin/String // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend.component3|component3(){}[0]
        final fun copy(kotlin/Int = ..., kotlin/String = ..., kotlin/String = ...): cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend.copy|copy(kotlin.Int;kotlin.String;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend> { // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend) // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.friend.ArkSharePeerFriendResponse.ArkSharePeerFriend){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend> // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse> { // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse) // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.friend.ArkSharePeerFriendResponse){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse> // cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.friend/ArkSharePeerResponse { // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse|null[0]
    constructor <init>(cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer) // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.<init>|<init>(cn.rtast.rob.event.raw.friend.ArkSharePeerResponse.ArkSharePeer){}[0]

    final val data // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer = ...): cn.rtast.rob.event.raw.friend/ArkSharePeerResponse // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.copy|copy(cn.rtast.rob.event.raw.friend.ArkSharePeerResponse.ArkSharePeer){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.toString|toString(){}[0]

    final class ArkSharePeer { // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer|null[0]
        constructor <init>(kotlin/Int, kotlin/String, kotlin/String) // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer.<init>|<init>(kotlin.Int;kotlin.String;kotlin.String){}[0]

        final val arkJson // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer.arkJson|{}arkJson[0]
            final fun <get-arkJson>(): kotlin/String // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer.arkJson.<get-arkJson>|<get-arkJson>(){}[0]
        final val errCode // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer.errCode|{}errCode[0]
            final fun <get-errCode>(): kotlin/Int // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer.errCode.<get-errCode>|<get-errCode>(){}[0]
        final val errMsg // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer.errMsg|{}errMsg[0]
            final fun <get-errMsg>(): kotlin/String // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer.errMsg.<get-errMsg>|<get-errMsg>(){}[0]

        final fun component1(): kotlin/Int // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer.component2|component2(){}[0]
        final fun component3(): kotlin/String // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer.component3|component3(){}[0]
        final fun copy(kotlin/Int = ..., kotlin/String = ..., kotlin/String = ...): cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer.copy|copy(kotlin.Int;kotlin.String;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer> { // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer) // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.friend.ArkSharePeerResponse.ArkSharePeer){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer> // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.friend/ArkSharePeerResponse> { // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.friend/ArkSharePeerResponse // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.friend/ArkSharePeerResponse) // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.friend.ArkSharePeerResponse){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.friend/ArkSharePeerResponse> // cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.friend/FriendList { // cn.rtast.rob.event.raw.friend/FriendList|null[0]
    constructor <init>(kotlin.collections/List<cn.rtast.rob.event.raw.friend/FriendList.Friend>) // cn.rtast.rob.event.raw.friend/FriendList.<init>|<init>(kotlin.collections.List<cn.rtast.rob.event.raw.friend.FriendList.Friend>){}[0]

    final val data // cn.rtast.rob.event.raw.friend/FriendList.data|{}data[0]
        final fun <get-data>(): kotlin.collections/List<cn.rtast.rob.event.raw.friend/FriendList.Friend> // cn.rtast.rob.event.raw.friend/FriendList.data.<get-data>|<get-data>(){}[0]

    final fun component1(): kotlin.collections/List<cn.rtast.rob.event.raw.friend/FriendList.Friend> // cn.rtast.rob.event.raw.friend/FriendList.component1|component1(){}[0]
    final fun copy(kotlin.collections/List<cn.rtast.rob.event.raw.friend/FriendList.Friend> = ...): cn.rtast.rob.event.raw.friend/FriendList // cn.rtast.rob.event.raw.friend/FriendList.copy|copy(kotlin.collections.List<cn.rtast.rob.event.raw.friend.FriendList.Friend>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.friend/FriendList.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.friend/FriendList.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.friend/FriendList.toString|toString(){}[0]

    final class Friend { // cn.rtast.rob.event.raw.friend/FriendList.Friend|null[0]
        constructor <init>(kotlin/Long, kotlin/String, kotlin/String, kotlin/String, cn.rtast.rob.event.raw.friend/FriendList.Group) // cn.rtast.rob.event.raw.friend/FriendList.Friend.<init>|<init>(kotlin.Long;kotlin.String;kotlin.String;kotlin.String;cn.rtast.rob.event.raw.friend.FriendList.Group){}[0]

        final val group // cn.rtast.rob.event.raw.friend/FriendList.Friend.group|{}group[0]
            final fun <get-group>(): cn.rtast.rob.event.raw.friend/FriendList.Group // cn.rtast.rob.event.raw.friend/FriendList.Friend.group.<get-group>|<get-group>(){}[0]
        final val nickname // cn.rtast.rob.event.raw.friend/FriendList.Friend.nickname|{}nickname[0]
            final fun <get-nickname>(): kotlin/String // cn.rtast.rob.event.raw.friend/FriendList.Friend.nickname.<get-nickname>|<get-nickname>(){}[0]
        final val qId // cn.rtast.rob.event.raw.friend/FriendList.Friend.qId|{}qId[0]
            final fun <get-qId>(): kotlin/String // cn.rtast.rob.event.raw.friend/FriendList.Friend.qId.<get-qId>|<get-qId>(){}[0]
        final val remark // cn.rtast.rob.event.raw.friend/FriendList.Friend.remark|{}remark[0]
            final fun <get-remark>(): kotlin/String // cn.rtast.rob.event.raw.friend/FriendList.Friend.remark.<get-remark>|<get-remark>(){}[0]
        final val userId // cn.rtast.rob.event.raw.friend/FriendList.Friend.userId|{}userId[0]
            final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.friend/FriendList.Friend.userId.<get-userId>|<get-userId>(){}[0]

        final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.friend/FriendList.Friend.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.friend/FriendList.Friend.component2|component2(){}[0]
        final fun component3(): kotlin/String // cn.rtast.rob.event.raw.friend/FriendList.Friend.component3|component3(){}[0]
        final fun component4(): kotlin/String // cn.rtast.rob.event.raw.friend/FriendList.Friend.component4|component4(){}[0]
        final fun component5(): cn.rtast.rob.event.raw.friend/FriendList.Group // cn.rtast.rob.event.raw.friend/FriendList.Friend.component5|component5(){}[0]
        final fun copy(kotlin/Long = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., cn.rtast.rob.event.raw.friend/FriendList.Group = ...): cn.rtast.rob.event.raw.friend/FriendList.Friend // cn.rtast.rob.event.raw.friend/FriendList.Friend.copy|copy(kotlin.Long;kotlin.String;kotlin.String;kotlin.String;cn.rtast.rob.event.raw.friend.FriendList.Group){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.friend/FriendList.Friend.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.friend/FriendList.Friend.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.friend/FriendList.Friend.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.friend/FriendList.Friend> { // cn.rtast.rob.event.raw.friend/FriendList.Friend.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.friend/FriendList.Friend.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.friend/FriendList.Friend.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.friend/FriendList.Friend.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.friend/FriendList.Friend // cn.rtast.rob.event.raw.friend/FriendList.Friend.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.friend/FriendList.Friend) // cn.rtast.rob.event.raw.friend/FriendList.Friend.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.friend.FriendList.Friend){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.friend/FriendList.Friend.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.friend/FriendList.Friend> // cn.rtast.rob.event.raw.friend/FriendList.Friend.Companion.serializer|serializer(){}[0]
        }
    }

    final class Group { // cn.rtast.rob.event.raw.friend/FriendList.Group|null[0]
        constructor <init>(kotlin/Long, kotlin/String) // cn.rtast.rob.event.raw.friend/FriendList.Group.<init>|<init>(kotlin.Long;kotlin.String){}[0]

        final val groupId // cn.rtast.rob.event.raw.friend/FriendList.Group.groupId|{}groupId[0]
            final fun <get-groupId>(): kotlin/Long // cn.rtast.rob.event.raw.friend/FriendList.Group.groupId.<get-groupId>|<get-groupId>(){}[0]
        final val groupName // cn.rtast.rob.event.raw.friend/FriendList.Group.groupName|{}groupName[0]
            final fun <get-groupName>(): kotlin/String // cn.rtast.rob.event.raw.friend/FriendList.Group.groupName.<get-groupName>|<get-groupName>(){}[0]

        final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.friend/FriendList.Group.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.friend/FriendList.Group.component2|component2(){}[0]
        final fun copy(kotlin/Long = ..., kotlin/String = ...): cn.rtast.rob.event.raw.friend/FriendList.Group // cn.rtast.rob.event.raw.friend/FriendList.Group.copy|copy(kotlin.Long;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.friend/FriendList.Group.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.friend/FriendList.Group.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.friend/FriendList.Group.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.friend/FriendList.Group> { // cn.rtast.rob.event.raw.friend/FriendList.Group.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.friend/FriendList.Group.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.friend/FriendList.Group.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.friend/FriendList.Group.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.friend/FriendList.Group // cn.rtast.rob.event.raw.friend/FriendList.Group.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.friend/FriendList.Group) // cn.rtast.rob.event.raw.friend/FriendList.Group.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.friend.FriendList.Group){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.friend/FriendList.Group.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.friend/FriendList.Group> // cn.rtast.rob.event.raw.friend/FriendList.Group.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.friend/FriendList> { // cn.rtast.rob.event.raw.friend/FriendList.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.friend/FriendList.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.friend/FriendList.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.friend/FriendList.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.friend/FriendList // cn.rtast.rob.event.raw.friend/FriendList.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.friend/FriendList) // cn.rtast.rob.event.raw.friend/FriendList.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.friend.FriendList){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.friend/FriendList.Companion|null[0]
        final val $childSerializers // cn.rtast.rob.event.raw.friend/FriendList.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.friend/FriendList> // cn.rtast.rob.event.raw.friend/FriendList.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.friend/GetFriendWithCategory { // cn.rtast.rob.event.raw.friend/GetFriendWithCategory|null[0]
    constructor <init>(kotlin.collections/List<cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory>) // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.<init>|<init>(kotlin.collections.List<cn.rtast.rob.event.raw.friend.GetFriendWithCategory.FriendCategory>){}[0]

    final val data // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.data|{}data[0]
        final fun <get-data>(): kotlin.collections/List<cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory> // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.data.<get-data>|<get-data>(){}[0]

    final fun component1(): kotlin.collections/List<cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory> // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.component1|component1(){}[0]
    final fun copy(kotlin.collections/List<cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory> = ...): cn.rtast.rob.event.raw.friend/GetFriendWithCategory // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.copy|copy(kotlin.collections.List<cn.rtast.rob.event.raw.friend.GetFriendWithCategory.FriendCategory>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.toString|toString(){}[0]

    final class Buddy { // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy|null[0]
        constructor <init>(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/String, kotlin/Int, kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/Int, kotlin/String, kotlin/String, kotlin/String, kotlin/Long) // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.String;kotlin.Int;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.Int;kotlin.String;kotlin.String;kotlin.String;kotlin.Long){}[0]

        final val age // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.age|{}age[0]
            final fun <get-age>(): kotlin/Int // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.age.<get-age>|<get-age>(){}[0]
        final val birthdayDay // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.birthdayDay|{}birthdayDay[0]
            final fun <get-birthdayDay>(): kotlin/Int // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.birthdayDay.<get-birthdayDay>|<get-birthdayDay>(){}[0]
        final val birthdayMonth // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.birthdayMonth|{}birthdayMonth[0]
            final fun <get-birthdayMonth>(): kotlin/Int // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.birthdayMonth.<get-birthdayMonth>|<get-birthdayMonth>(){}[0]
        final val birthdayYear // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.birthdayYear|{}birthdayYear[0]
            final fun <get-birthdayYear>(): kotlin/Int // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.birthdayYear.<get-birthdayYear>|<get-birthdayYear>(){}[0]
        final val categoryId // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.categoryId|{}categoryId[0]
            final fun <get-categoryId>(): kotlin/Int // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.categoryId.<get-categoryId>|<get-categoryId>(){}[0]
        final val eMail // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.eMail|{}eMail[0]
            final fun <get-eMail>(): kotlin/String // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.eMail.<get-eMail>|<get-eMail>(){}[0]
        final val level // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.level|{}level[0]
            final fun <get-level>(): kotlin/Int // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.level.<get-level>|<get-level>(){}[0]
        final val longNick // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.longNick|{}longNick[0]
            final fun <get-longNick>(): kotlin/String // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.longNick.<get-longNick>|<get-longNick>(){}[0]
        final val nickname // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.nickname|{}nickname[0]
            final fun <get-nickname>(): kotlin/String // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.nickname.<get-nickname>|<get-nickname>(){}[0]
        final val qid // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.qid|{}qid[0]
            final fun <get-qid>(): kotlin/String // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.qid.<get-qid>|<get-qid>(){}[0]
        final val remark // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.remark|{}remark[0]
            final fun <get-remark>(): kotlin/String // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.remark.<get-remark>|<get-remark>(){}[0]
        final val richTime // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.richTime|{}richTime[0]
            final fun <get-richTime>(): kotlin/Int // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.richTime.<get-richTime>|<get-richTime>(){}[0]
        final val sex // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.sex|{}sex[0]
            final fun <get-sex>(): kotlin/String // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.sex.<get-sex>|<get-sex>(){}[0]
        final val uid // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.uid|{}uid[0]
            final fun <get-uid>(): kotlin/String // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.uid.<get-uid>|<get-uid>(){}[0]
        final val uin // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.uin|{}uin[0]
            final fun <get-uin>(): kotlin/String // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.uin.<get-uin>|<get-uin>(){}[0]
        final val userId // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.userId|{}userId[0]
            final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.userId.<get-userId>|<get-userId>(){}[0]

        final fun component1(): kotlin/Int // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.component1|component1(){}[0]
        final fun component10(): kotlin/String // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.component10|component10(){}[0]
        final fun component11(): kotlin/String // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.component11|component11(){}[0]
        final fun component12(): kotlin/Int // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.component12|component12(){}[0]
        final fun component13(): kotlin/String // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.component13|component13(){}[0]
        final fun component14(): kotlin/String // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.component14|component14(){}[0]
        final fun component15(): kotlin/String // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.component15|component15(){}[0]
        final fun component16(): kotlin/Long // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.component16|component16(){}[0]
        final fun component2(): kotlin/Int // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.component2|component2(){}[0]
        final fun component3(): kotlin/Int // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.component3|component3(){}[0]
        final fun component4(): kotlin/Int // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.component4|component4(){}[0]
        final fun component5(): kotlin/Int // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.component5|component5(){}[0]
        final fun component6(): kotlin/String // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.component6|component6(){}[0]
        final fun component7(): kotlin/Int // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.component7|component7(){}[0]
        final fun component8(): kotlin/String // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.component8|component8(){}[0]
        final fun component9(): kotlin/String // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.component9|component9(){}[0]
        final fun copy(kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/String = ..., kotlin/Int = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/Int = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/Long = ...): cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.copy|copy(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.String;kotlin.Int;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.Int;kotlin.String;kotlin.String;kotlin.String;kotlin.Long){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy> { // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy) // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.friend.GetFriendWithCategory.Buddy){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy> // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy.Companion.serializer|serializer(){}[0]
        }
    }

    final class FriendCategory { // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory|null[0]
        constructor <init>(kotlin.collections/List<cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy>, kotlin/Int, kotlin/Int, kotlin/String, kotlin/Int, kotlin/Int) // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.<init>|<init>(kotlin.collections.List<cn.rtast.rob.event.raw.friend.GetFriendWithCategory.Buddy>;kotlin.Int;kotlin.Int;kotlin.String;kotlin.Int;kotlin.Int){}[0]

        final val buddyList // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.buddyList|{}buddyList[0]
            final fun <get-buddyList>(): kotlin.collections/List<cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy> // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.buddyList.<get-buddyList>|<get-buddyList>(){}[0]
        final val categoryId // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.categoryId|{}categoryId[0]
            final fun <get-categoryId>(): kotlin/Int // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.categoryId.<get-categoryId>|<get-categoryId>(){}[0]
        final val categoryMbCount // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.categoryMbCount|{}categoryMbCount[0]
            final fun <get-categoryMbCount>(): kotlin/Int // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.categoryMbCount.<get-categoryMbCount>|<get-categoryMbCount>(){}[0]
        final val categoryName // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.categoryName|{}categoryName[0]
            final fun <get-categoryName>(): kotlin/String // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.categoryName.<get-categoryName>|<get-categoryName>(){}[0]
        final val categorySortId // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.categorySortId|{}categorySortId[0]
            final fun <get-categorySortId>(): kotlin/Int // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.categorySortId.<get-categorySortId>|<get-categorySortId>(){}[0]
        final val onlineCount // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.onlineCount|{}onlineCount[0]
            final fun <get-onlineCount>(): kotlin/Int // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.onlineCount.<get-onlineCount>|<get-onlineCount>(){}[0]

        final fun component1(): kotlin.collections/List<cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy> // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.component1|component1(){}[0]
        final fun component2(): kotlin/Int // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.component2|component2(){}[0]
        final fun component3(): kotlin/Int // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.component3|component3(){}[0]
        final fun component4(): kotlin/String // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.component4|component4(){}[0]
        final fun component5(): kotlin/Int // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.component5|component5(){}[0]
        final fun component6(): kotlin/Int // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.component6|component6(){}[0]
        final fun copy(kotlin.collections/List<cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Buddy> = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/String = ..., kotlin/Int = ..., kotlin/Int = ...): cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.copy|copy(kotlin.collections.List<cn.rtast.rob.event.raw.friend.GetFriendWithCategory.Buddy>;kotlin.Int;kotlin.Int;kotlin.String;kotlin.Int;kotlin.Int){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory> { // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory) // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.friend.GetFriendWithCategory.FriendCategory){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.Companion|null[0]
            final val $childSerializers // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory> // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.friend/GetFriendWithCategory> { // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.friend/GetFriendWithCategory // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.friend/GetFriendWithCategory) // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.friend.GetFriendWithCategory){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Companion|null[0]
        final val $childSerializers // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.friend/GetFriendWithCategory> // cn.rtast.rob.event.raw.friend/GetFriendWithCategory.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.group/ArkShareGroupResponse { // cn.rtast.rob.event.raw.group/ArkShareGroupResponse|null[0]
    constructor <init>(kotlin/String) // cn.rtast.rob.event.raw.group/ArkShareGroupResponse.<init>|<init>(kotlin.String){}[0]

    final val data // cn.rtast.rob.event.raw.group/ArkShareGroupResponse.data|{}data[0]
        final fun <get-data>(): kotlin/String // cn.rtast.rob.event.raw.group/ArkShareGroupResponse.data.<get-data>|<get-data>(){}[0]

    final fun component1(): kotlin/String // cn.rtast.rob.event.raw.group/ArkShareGroupResponse.component1|component1(){}[0]
    final fun copy(kotlin/String = ...): cn.rtast.rob.event.raw.group/ArkShareGroupResponse // cn.rtast.rob.event.raw.group/ArkShareGroupResponse.copy|copy(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/ArkShareGroupResponse.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/ArkShareGroupResponse.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/ArkShareGroupResponse.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/ArkShareGroupResponse> { // cn.rtast.rob.event.raw.group/ArkShareGroupResponse.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.group/ArkShareGroupResponse.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/ArkShareGroupResponse.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/ArkShareGroupResponse.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/ArkShareGroupResponse // cn.rtast.rob.event.raw.group/ArkShareGroupResponse.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/ArkShareGroupResponse) // cn.rtast.rob.event.raw.group/ArkShareGroupResponse.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.ArkShareGroupResponse){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.group/ArkShareGroupResponse.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/ArkShareGroupResponse> // cn.rtast.rob.event.raw.group/ArkShareGroupResponse.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.group/GetGroupRequests { // cn.rtast.rob.event.raw.group/GetGroupRequests|null[0]
    constructor <init>(kotlin.collections/List<cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests>) // cn.rtast.rob.event.raw.group/GetGroupRequests.<init>|<init>(kotlin.collections.List<cn.rtast.rob.event.raw.group.GetGroupRequests.GroupRequests>){}[0]

    final val data // cn.rtast.rob.event.raw.group/GetGroupRequests.data|{}data[0]
        final fun <get-data>(): kotlin.collections/List<cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests> // cn.rtast.rob.event.raw.group/GetGroupRequests.data.<get-data>|<get-data>(){}[0]

    final fun component1(): kotlin.collections/List<cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests> // cn.rtast.rob.event.raw.group/GetGroupRequests.component1|component1(){}[0]
    final fun copy(kotlin.collections/List<cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests> = ...): cn.rtast.rob.event.raw.group/GetGroupRequests // cn.rtast.rob.event.raw.group/GetGroupRequests.copy|copy(kotlin.collections.List<cn.rtast.rob.event.raw.group.GetGroupRequests.GroupRequests>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/GetGroupRequests.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/GetGroupRequests.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/GetGroupRequests.toString|toString(){}[0]

    final class GroupRequests { // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests|null[0]
        constructor <init>(cn.rtast.rob.event.raw.group/GroupRequestsType? = ..., kotlin/Long, kotlin/Long, kotlin/Long, kotlin/String, kotlin/String, kotlin/Long, kotlin/Long) // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.<init>|<init>(cn.rtast.rob.event.raw.group.GroupRequestsType?;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.String;kotlin.String;kotlin.Long;kotlin.Long){}[0]

        final val comment // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.comment|{}comment[0]
            final fun <get-comment>(): kotlin/String // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.comment.<get-comment>|<get-comment>(){}[0]
        final val flag // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.flag|{}flag[0]
            final fun <get-flag>(): kotlin/String // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.flag.<get-flag>|<get-flag>(){}[0]
        final val groupId // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.groupId|{}groupId[0]
            final fun <get-groupId>(): kotlin/Long // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.groupId.<get-groupId>|<get-groupId>(){}[0]
        final val invitorId // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.invitorId|{}invitorId[0]
            final fun <get-invitorId>(): kotlin/Long // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.invitorId.<get-invitorId>|<get-invitorId>(){}[0]
        final val selfId // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.selfId|{}selfId[0]
            final fun <get-selfId>(): kotlin/Long // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.selfId.<get-selfId>|<get-selfId>(){}[0]
        final val time // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.time|{}time[0]
            final fun <get-time>(): kotlin/Long // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.time.<get-time>|<get-time>(){}[0]
        final val type // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.type|{}type[0]
            final fun <get-type>(): cn.rtast.rob.event.raw.group/GroupRequestsType? // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.type.<get-type>|<get-type>(){}[0]
        final val userId // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.userId|{}userId[0]
            final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.userId.<get-userId>|<get-userId>(){}[0]

        final fun component1(): cn.rtast.rob.event.raw.group/GroupRequestsType? // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.component1|component1(){}[0]
        final fun component2(): kotlin/Long // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.component2|component2(){}[0]
        final fun component3(): kotlin/Long // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.component3|component3(){}[0]
        final fun component4(): kotlin/Long // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.component4|component4(){}[0]
        final fun component5(): kotlin/String // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.component5|component5(){}[0]
        final fun component6(): kotlin/String // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.component6|component6(){}[0]
        final fun component7(): kotlin/Long // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.component7|component7(){}[0]
        final fun component8(): kotlin/Long // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.component8|component8(){}[0]
        final fun copy(cn.rtast.rob.event.raw.group/GroupRequestsType? = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/String = ..., kotlin/String = ..., kotlin/Long = ..., kotlin/Long = ...): cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.copy|copy(cn.rtast.rob.event.raw.group.GroupRequestsType?;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.String;kotlin.String;kotlin.Long;kotlin.Long){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests> { // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests) // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.GetGroupRequests.GroupRequests){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.Companion|null[0]
            final val $childSerializers // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests> // cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/GetGroupRequests> { // cn.rtast.rob.event.raw.group/GetGroupRequests.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.group/GetGroupRequests.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/GetGroupRequests.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/GetGroupRequests.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/GetGroupRequests // cn.rtast.rob.event.raw.group/GetGroupRequests.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/GetGroupRequests) // cn.rtast.rob.event.raw.group/GetGroupRequests.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.GetGroupRequests){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.group/GetGroupRequests.Companion|null[0]
        final val $childSerializers // cn.rtast.rob.event.raw.group/GetGroupRequests.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/GetGroupRequests> // cn.rtast.rob.event.raw.group/GetGroupRequests.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.group/GroupAtAllRemain { // cn.rtast.rob.event.raw.group/GroupAtAllRemain|null[0]
    constructor <init>(cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain) // cn.rtast.rob.event.raw.group/GroupAtAllRemain.<init>|<init>(cn.rtast.rob.event.raw.group.GroupAtAllRemain.AtAllRemain){}[0]

    final val data // cn.rtast.rob.event.raw.group/GroupAtAllRemain.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain // cn.rtast.rob.event.raw.group/GroupAtAllRemain.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain // cn.rtast.rob.event.raw.group/GroupAtAllRemain.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain = ...): cn.rtast.rob.event.raw.group/GroupAtAllRemain // cn.rtast.rob.event.raw.group/GroupAtAllRemain.copy|copy(cn.rtast.rob.event.raw.group.GroupAtAllRemain.AtAllRemain){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupAtAllRemain.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupAtAllRemain.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/GroupAtAllRemain.toString|toString(){}[0]

    final class AtAllRemain { // cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain|null[0]
        constructor <init>(kotlin/Boolean, kotlin/Int, kotlin/Int) // cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain.<init>|<init>(kotlin.Boolean;kotlin.Int;kotlin.Int){}[0]

        final val botRemainCount // cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain.botRemainCount|{}botRemainCount[0]
            final fun <get-botRemainCount>(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain.botRemainCount.<get-botRemainCount>|<get-botRemainCount>(){}[0]
        final val canAtAll // cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain.canAtAll|{}canAtAll[0]
            final fun <get-canAtAll>(): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain.canAtAll.<get-canAtAll>|<get-canAtAll>(){}[0]
        final val groupRemainCount // cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain.groupRemainCount|{}groupRemainCount[0]
            final fun <get-groupRemainCount>(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain.groupRemainCount.<get-groupRemainCount>|<get-groupRemainCount>(){}[0]

        final fun component1(): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain.component1|component1(){}[0]
        final fun component2(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain.component2|component2(){}[0]
        final fun component3(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain.component3|component3(){}[0]
        final fun copy(kotlin/Boolean = ..., kotlin/Int = ..., kotlin/Int = ...): cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain // cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain.copy|copy(kotlin.Boolean;kotlin.Int;kotlin.Int){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain> { // cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain // cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain) // cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.GroupAtAllRemain.AtAllRemain){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain> // cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/GroupAtAllRemain> { // cn.rtast.rob.event.raw.group/GroupAtAllRemain.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.group/GroupAtAllRemain.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/GroupAtAllRemain.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/GroupAtAllRemain.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/GroupAtAllRemain // cn.rtast.rob.event.raw.group/GroupAtAllRemain.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/GroupAtAllRemain) // cn.rtast.rob.event.raw.group/GroupAtAllRemain.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.GroupAtAllRemain){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.group/GroupAtAllRemain.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/GroupAtAllRemain> // cn.rtast.rob.event.raw.group/GroupAtAllRemain.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest { // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest|null[0]
    constructor <init>(kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request>) // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.<init>|<init>(kotlin.collections.List<cn.rtast.rob.event.raw.group.GroupIgnoreAddRequest.Request>){}[0]

    final val data // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.data|{}data[0]
        final fun <get-data>(): kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request> // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.data.<get-data>|<get-data>(){}[0]

    final fun component1(): kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request> // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.component1|component1(){}[0]
    final fun copy(kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request> = ...): cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.copy|copy(kotlin.collections.List<cn.rtast.rob.event.raw.group.GroupIgnoreAddRequest.Request>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.toString|toString(){}[0]

    final class Request { // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request|null[0]
        constructor <init>(kotlin/Long, kotlin/Long, kotlin/String) // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request.<init>|<init>(kotlin.Long;kotlin.Long;kotlin.String){}[0]

        final val flag // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request.flag|{}flag[0]
            final fun <get-flag>(): kotlin/String // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request.flag.<get-flag>|<get-flag>(){}[0]
        final val groupId // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request.groupId|{}groupId[0]
            final fun <get-groupId>(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request.groupId.<get-groupId>|<get-groupId>(){}[0]
        final val userId // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request.userId|{}userId[0]
            final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request.userId.<get-userId>|<get-userId>(){}[0]

        final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request.component1|component1(){}[0]
        final fun component2(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request.component2|component2(){}[0]
        final fun component3(): kotlin/String // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request.component3|component3(){}[0]
        final fun copy(kotlin/Long = ..., kotlin/Long = ..., kotlin/String = ...): cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request.copy|copy(kotlin.Long;kotlin.Long;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request> { // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request) // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.GroupIgnoreAddRequest.Request){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request> // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest> { // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest) // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.GroupIgnoreAddRequest){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Companion|null[0]
        final val $childSerializers // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest> // cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.group/GroupInfo { // cn.rtast.rob.event.raw.group/GroupInfo|null[0]
    constructor <init>(cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo) // cn.rtast.rob.event.raw.group/GroupInfo.<init>|<init>(cn.rtast.rob.event.raw.group.GroupInfo.GroupInfo){}[0]

    final val data // cn.rtast.rob.event.raw.group/GroupInfo.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo // cn.rtast.rob.event.raw.group/GroupInfo.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo // cn.rtast.rob.event.raw.group/GroupInfo.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo = ...): cn.rtast.rob.event.raw.group/GroupInfo // cn.rtast.rob.event.raw.group/GroupInfo.copy|copy(cn.rtast.rob.event.raw.group.GroupInfo.GroupInfo){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupInfo.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/GroupInfo.toString|toString(){}[0]

    final class GroupInfo { // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo|null[0]
        constructor <init>(kotlin/Long, kotlin/String, kotlin/Int, kotlin/Int) // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo.<init>|<init>(kotlin.Long;kotlin.String;kotlin.Int;kotlin.Int){}[0]

        final val groupId // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo.groupId|{}groupId[0]
            final fun <get-groupId>(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo.groupId.<get-groupId>|<get-groupId>(){}[0]
        final val groupName // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo.groupName|{}groupName[0]
            final fun <get-groupName>(): kotlin/String // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo.groupName.<get-groupName>|<get-groupName>(){}[0]
        final val maxMemberCount // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo.maxMemberCount|{}maxMemberCount[0]
            final fun <get-maxMemberCount>(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo.maxMemberCount.<get-maxMemberCount>|<get-maxMemberCount>(){}[0]
        final val memberCount // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo.memberCount|{}memberCount[0]
            final fun <get-memberCount>(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo.memberCount.<get-memberCount>|<get-memberCount>(){}[0]

        final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo.component2|component2(){}[0]
        final fun component3(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo.component3|component3(){}[0]
        final fun component4(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo.component4|component4(){}[0]
        final fun copy(kotlin/Long = ..., kotlin/String = ..., kotlin/Int = ..., kotlin/Int = ...): cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo.copy|copy(kotlin.Long;kotlin.String;kotlin.Int;kotlin.Int){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo> { // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo) // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.GroupInfo.GroupInfo){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo> // cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/GroupInfo> { // cn.rtast.rob.event.raw.group/GroupInfo.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.group/GroupInfo.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/GroupInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/GroupInfo.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/GroupInfo // cn.rtast.rob.event.raw.group/GroupInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/GroupInfo) // cn.rtast.rob.event.raw.group/GroupInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.GroupInfo){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.group/GroupInfo.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/GroupInfo> // cn.rtast.rob.event.raw.group/GroupInfo.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.group/GroupList { // cn.rtast.rob.event.raw.group/GroupList|null[0]
    constructor <init>(kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo>) // cn.rtast.rob.event.raw.group/GroupList.<init>|<init>(kotlin.collections.List<cn.rtast.rob.event.raw.group.GroupInfo.GroupInfo>){}[0]

    final val data // cn.rtast.rob.event.raw.group/GroupList.data|{}data[0]
        final fun <get-data>(): kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo> // cn.rtast.rob.event.raw.group/GroupList.data.<get-data>|<get-data>(){}[0]

    final fun component1(): kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo> // cn.rtast.rob.event.raw.group/GroupList.component1|component1(){}[0]
    final fun copy(kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo> = ...): cn.rtast.rob.event.raw.group/GroupList // cn.rtast.rob.event.raw.group/GroupList.copy|copy(kotlin.collections.List<cn.rtast.rob.event.raw.group.GroupInfo.GroupInfo>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupList.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupList.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/GroupList.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/GroupList> { // cn.rtast.rob.event.raw.group/GroupList.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.group/GroupList.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/GroupList.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/GroupList.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/GroupList // cn.rtast.rob.event.raw.group/GroupList.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/GroupList) // cn.rtast.rob.event.raw.group/GroupList.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.GroupList){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.group/GroupList.Companion|null[0]
        final val $childSerializers // cn.rtast.rob.event.raw.group/GroupList.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/GroupList> // cn.rtast.rob.event.raw.group/GroupList.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.group/GroupMemberInfo { // cn.rtast.rob.event.raw.group/GroupMemberInfo|null[0]
    constructor <init>(cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo) // cn.rtast.rob.event.raw.group/GroupMemberInfo.<init>|<init>(cn.rtast.rob.event.raw.group.GroupMemberList.MemberInfo){}[0]

    final val data // cn.rtast.rob.event.raw.group/GroupMemberInfo.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo // cn.rtast.rob.event.raw.group/GroupMemberInfo.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo // cn.rtast.rob.event.raw.group/GroupMemberInfo.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo = ...): cn.rtast.rob.event.raw.group/GroupMemberInfo // cn.rtast.rob.event.raw.group/GroupMemberInfo.copy|copy(cn.rtast.rob.event.raw.group.GroupMemberList.MemberInfo){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupMemberInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupMemberInfo.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/GroupMemberInfo.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/GroupMemberInfo> { // cn.rtast.rob.event.raw.group/GroupMemberInfo.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.group/GroupMemberInfo.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/GroupMemberInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/GroupMemberInfo.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/GroupMemberInfo // cn.rtast.rob.event.raw.group/GroupMemberInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/GroupMemberInfo) // cn.rtast.rob.event.raw.group/GroupMemberInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.GroupMemberInfo){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.group/GroupMemberInfo.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/GroupMemberInfo> // cn.rtast.rob.event.raw.group/GroupMemberInfo.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.group/GroupMemberList { // cn.rtast.rob.event.raw.group/GroupMemberList|null[0]
    constructor <init>(kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo>) // cn.rtast.rob.event.raw.group/GroupMemberList.<init>|<init>(kotlin.collections.List<cn.rtast.rob.event.raw.group.GroupMemberList.MemberInfo>){}[0]

    final val data // cn.rtast.rob.event.raw.group/GroupMemberList.data|{}data[0]
        final fun <get-data>(): kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo> // cn.rtast.rob.event.raw.group/GroupMemberList.data.<get-data>|<get-data>(){}[0]

    final fun component1(): kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo> // cn.rtast.rob.event.raw.group/GroupMemberList.component1|component1(){}[0]
    final fun copy(kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo> = ...): cn.rtast.rob.event.raw.group/GroupMemberList // cn.rtast.rob.event.raw.group/GroupMemberList.copy|copy(kotlin.collections.List<cn.rtast.rob.event.raw.group.GroupMemberList.MemberInfo>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupMemberList.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupMemberList.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/GroupMemberList.toString|toString(){}[0]

    final class MemberInfo { // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo|null[0]
        constructor <init>(kotlin/Int? = ..., kotlin/String, kotlin/String? = ..., kotlin/Boolean, kotlin/Long, kotlin/Long, kotlin/Long, kotlin/String, kotlin/String, kotlin/String, cn.rtast.rob.enums/UserSex? = ..., kotlin/String, kotlin/Long, kotlin/Boolean, kotlin/Long) // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.<init>|<init>(kotlin.Int?;kotlin.String;kotlin.String?;kotlin.Boolean;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.String;kotlin.String;kotlin.String;cn.rtast.rob.enums.UserSex?;kotlin.String;kotlin.Long;kotlin.Boolean;kotlin.Long){}[0]

        final val age // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.age|{}age[0]
            final fun <get-age>(): kotlin/Int? // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.age.<get-age>|<get-age>(){}[0]
        final val area // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.area|{}area[0]
            final fun <get-area>(): kotlin/String // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.area.<get-area>|<get-area>(){}[0]
        final val card // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.card|{}card[0]
            final fun <get-card>(): kotlin/String? // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.card.<get-card>|<get-card>(){}[0]
        final val cardChangeable // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.cardChangeable|{}cardChangeable[0]
            final fun <get-cardChangeable>(): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.cardChangeable.<get-cardChangeable>|<get-cardChangeable>(){}[0]
        final val groupId // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.groupId|{}groupId[0]
            final fun <get-groupId>(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.groupId.<get-groupId>|<get-groupId>(){}[0]
        final val joinTime // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.joinTime|{}joinTime[0]
            final fun <get-joinTime>(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.joinTime.<get-joinTime>|<get-joinTime>(){}[0]
        final val lastSentTime // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.lastSentTime|{}lastSentTime[0]
            final fun <get-lastSentTime>(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.lastSentTime.<get-lastSentTime>|<get-lastSentTime>(){}[0]
        final val level // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.level|{}level[0]
            final fun <get-level>(): kotlin/String // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.level.<get-level>|<get-level>(){}[0]
        final val nickname // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.nickname|{}nickname[0]
            final fun <get-nickname>(): kotlin/String // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.nickname.<get-nickname>|<get-nickname>(){}[0]
        final val role // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.role|{}role[0]
            final fun <get-role>(): kotlin/String // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.role.<get-role>|<get-role>(){}[0]
        final val sex // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.sex|{}sex[0]
            final fun <get-sex>(): cn.rtast.rob.enums/UserSex? // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.sex.<get-sex>|<get-sex>(){}[0]
        final val title // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.title|{}title[0]
            final fun <get-title>(): kotlin/String // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.title.<get-title>|<get-title>(){}[0]
        final val titleExpireTime // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.titleExpireTime|{}titleExpireTime[0]
            final fun <get-titleExpireTime>(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.titleExpireTime.<get-titleExpireTime>|<get-titleExpireTime>(){}[0]
        final val unfriendly // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.unfriendly|{}unfriendly[0]
            final fun <get-unfriendly>(): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.unfriendly.<get-unfriendly>|<get-unfriendly>(){}[0]
        final val userId // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.userId|{}userId[0]
            final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.userId.<get-userId>|<get-userId>(){}[0]

        final fun component1(): kotlin/Int? // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.component1|component1(){}[0]
        final fun component10(): kotlin/String // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.component10|component10(){}[0]
        final fun component11(): cn.rtast.rob.enums/UserSex? // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.component11|component11(){}[0]
        final fun component12(): kotlin/String // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.component12|component12(){}[0]
        final fun component13(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.component13|component13(){}[0]
        final fun component14(): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.component14|component14(){}[0]
        final fun component15(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.component15|component15(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.component2|component2(){}[0]
        final fun component3(): kotlin/String? // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.component3|component3(){}[0]
        final fun component4(): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.component4|component4(){}[0]
        final fun component5(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.component5|component5(){}[0]
        final fun component6(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.component6|component6(){}[0]
        final fun component7(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.component7|component7(){}[0]
        final fun component8(): kotlin/String // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.component8|component8(){}[0]
        final fun component9(): kotlin/String // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.component9|component9(){}[0]
        final fun copy(kotlin/Int? = ..., kotlin/String = ..., kotlin/String? = ..., kotlin/Boolean = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., cn.rtast.rob.enums/UserSex? = ..., kotlin/String = ..., kotlin/Long = ..., kotlin/Boolean = ..., kotlin/Long = ...): cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.copy|copy(kotlin.Int?;kotlin.String;kotlin.String?;kotlin.Boolean;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.String;kotlin.String;kotlin.String;cn.rtast.rob.enums.UserSex?;kotlin.String;kotlin.Long;kotlin.Boolean;kotlin.Long){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo> { // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo) // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.GroupMemberList.MemberInfo){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.Companion|null[0]
            final val $childSerializers // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo> // cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/GroupMemberList> { // cn.rtast.rob.event.raw.group/GroupMemberList.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.group/GroupMemberList.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/GroupMemberList.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/GroupMemberList.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/GroupMemberList // cn.rtast.rob.event.raw.group/GroupMemberList.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/GroupMemberList) // cn.rtast.rob.event.raw.group/GroupMemberList.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.GroupMemberList){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.group/GroupMemberList.Companion|null[0]
        final val $childSerializers // cn.rtast.rob.event.raw.group/GroupMemberList.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/GroupMemberList> // cn.rtast.rob.event.raw.group/GroupMemberList.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.group/GroupNotice { // cn.rtast.rob.event.raw.group/GroupNotice|null[0]
    constructor <init>(kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice>) // cn.rtast.rob.event.raw.group/GroupNotice.<init>|<init>(kotlin.collections.List<cn.rtast.rob.event.raw.group.GroupNotice.GroupNotice>){}[0]

    final val data // cn.rtast.rob.event.raw.group/GroupNotice.data|{}data[0]
        final fun <get-data>(): kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice> // cn.rtast.rob.event.raw.group/GroupNotice.data.<get-data>|<get-data>(){}[0]

    final fun component1(): kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice> // cn.rtast.rob.event.raw.group/GroupNotice.component1|component1(){}[0]
    final fun copy(kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice> = ...): cn.rtast.rob.event.raw.group/GroupNotice // cn.rtast.rob.event.raw.group/GroupNotice.copy|copy(kotlin.collections.List<cn.rtast.rob.event.raw.group.GroupNotice.GroupNotice>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupNotice.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupNotice.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/GroupNotice.toString|toString(){}[0]

    final class GroupNotice { // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice|null[0]
        constructor <init>(kotlin/String, kotlin/Long, kotlin/Long, cn.rtast.rob.event.raw.group/GroupNotice.Message) // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice.<init>|<init>(kotlin.String;kotlin.Long;kotlin.Long;cn.rtast.rob.event.raw.group.GroupNotice.Message){}[0]

        final val message // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice.message|{}message[0]
            final fun <get-message>(): cn.rtast.rob.event.raw.group/GroupNotice.Message // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice.message.<get-message>|<get-message>(){}[0]
        final val noticeId // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice.noticeId|{}noticeId[0]
            final fun <get-noticeId>(): kotlin/String // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice.noticeId.<get-noticeId>|<get-noticeId>(){}[0]
        final val publishTime // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice.publishTime|{}publishTime[0]
            final fun <get-publishTime>(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice.publishTime.<get-publishTime>|<get-publishTime>(){}[0]
        final val senderId // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice.senderId|{}senderId[0]
            final fun <get-senderId>(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice.senderId.<get-senderId>|<get-senderId>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice.component1|component1(){}[0]
        final fun component2(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice.component2|component2(){}[0]
        final fun component3(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice.component3|component3(){}[0]
        final fun component4(): cn.rtast.rob.event.raw.group/GroupNotice.Message // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice.component4|component4(){}[0]
        final fun copy(kotlin/String = ..., kotlin/Long = ..., kotlin/Long = ..., cn.rtast.rob.event.raw.group/GroupNotice.Message = ...): cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice.copy|copy(kotlin.String;kotlin.Long;kotlin.Long;cn.rtast.rob.event.raw.group.GroupNotice.Message){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice> { // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice) // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.GroupNotice.GroupNotice){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice> // cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice.Companion.serializer|serializer(){}[0]
        }
    }

    final class Image { // cn.rtast.rob.event.raw.group/GroupNotice.Image|null[0]
        constructor <init>(kotlin/String, kotlin/Int, kotlin/Int) // cn.rtast.rob.event.raw.group/GroupNotice.Image.<init>|<init>(kotlin.String;kotlin.Int;kotlin.Int){}[0]

        final val height // cn.rtast.rob.event.raw.group/GroupNotice.Image.height|{}height[0]
            final fun <get-height>(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupNotice.Image.height.<get-height>|<get-height>(){}[0]
        final val id // cn.rtast.rob.event.raw.group/GroupNotice.Image.id|{}id[0]
            final fun <get-id>(): kotlin/String // cn.rtast.rob.event.raw.group/GroupNotice.Image.id.<get-id>|<get-id>(){}[0]
        final val imageUrl // cn.rtast.rob.event.raw.group/GroupNotice.Image.imageUrl|{}imageUrl[0]
            final fun <get-imageUrl>(): kotlin/String // cn.rtast.rob.event.raw.group/GroupNotice.Image.imageUrl.<get-imageUrl>|<get-imageUrl>(){}[0]
        final val width // cn.rtast.rob.event.raw.group/GroupNotice.Image.width|{}width[0]
            final fun <get-width>(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupNotice.Image.width.<get-width>|<get-width>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.event.raw.group/GroupNotice.Image.component1|component1(){}[0]
        final fun component2(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupNotice.Image.component2|component2(){}[0]
        final fun component3(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupNotice.Image.component3|component3(){}[0]
        final fun copy(kotlin/String = ..., kotlin/Int = ..., kotlin/Int = ...): cn.rtast.rob.event.raw.group/GroupNotice.Image // cn.rtast.rob.event.raw.group/GroupNotice.Image.copy|copy(kotlin.String;kotlin.Int;kotlin.Int){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupNotice.Image.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupNotice.Image.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/GroupNotice.Image.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/GroupNotice.Image> { // cn.rtast.rob.event.raw.group/GroupNotice.Image.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.group/GroupNotice.Image.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/GroupNotice.Image.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/GroupNotice.Image.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/GroupNotice.Image // cn.rtast.rob.event.raw.group/GroupNotice.Image.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/GroupNotice.Image) // cn.rtast.rob.event.raw.group/GroupNotice.Image.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.GroupNotice.Image){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.group/GroupNotice.Image.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/GroupNotice.Image> // cn.rtast.rob.event.raw.group/GroupNotice.Image.Companion.serializer|serializer(){}[0]
        }
    }

    final class Message { // cn.rtast.rob.event.raw.group/GroupNotice.Message|null[0]
        constructor <init>(kotlin/String, kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupNotice.Image>) // cn.rtast.rob.event.raw.group/GroupNotice.Message.<init>|<init>(kotlin.String;kotlin.collections.List<cn.rtast.rob.event.raw.group.GroupNotice.Image>){}[0]

        final val images // cn.rtast.rob.event.raw.group/GroupNotice.Message.images|{}images[0]
            final fun <get-images>(): kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupNotice.Image> // cn.rtast.rob.event.raw.group/GroupNotice.Message.images.<get-images>|<get-images>(){}[0]
        final val text // cn.rtast.rob.event.raw.group/GroupNotice.Message.text|{}text[0]
            final fun <get-text>(): kotlin/String // cn.rtast.rob.event.raw.group/GroupNotice.Message.text.<get-text>|<get-text>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.event.raw.group/GroupNotice.Message.component1|component1(){}[0]
        final fun component2(): kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupNotice.Image> // cn.rtast.rob.event.raw.group/GroupNotice.Message.component2|component2(){}[0]
        final fun copy(kotlin/String = ..., kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupNotice.Image> = ...): cn.rtast.rob.event.raw.group/GroupNotice.Message // cn.rtast.rob.event.raw.group/GroupNotice.Message.copy|copy(kotlin.String;kotlin.collections.List<cn.rtast.rob.event.raw.group.GroupNotice.Image>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupNotice.Message.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupNotice.Message.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/GroupNotice.Message.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/GroupNotice.Message> { // cn.rtast.rob.event.raw.group/GroupNotice.Message.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.group/GroupNotice.Message.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/GroupNotice.Message.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/GroupNotice.Message.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/GroupNotice.Message // cn.rtast.rob.event.raw.group/GroupNotice.Message.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/GroupNotice.Message) // cn.rtast.rob.event.raw.group/GroupNotice.Message.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.GroupNotice.Message){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.group/GroupNotice.Message.Companion|null[0]
            final val $childSerializers // cn.rtast.rob.event.raw.group/GroupNotice.Message.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/GroupNotice.Message> // cn.rtast.rob.event.raw.group/GroupNotice.Message.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/GroupNotice> { // cn.rtast.rob.event.raw.group/GroupNotice.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.group/GroupNotice.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/GroupNotice.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/GroupNotice.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/GroupNotice // cn.rtast.rob.event.raw.group/GroupNotice.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/GroupNotice) // cn.rtast.rob.event.raw.group/GroupNotice.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.GroupNotice){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.group/GroupNotice.Companion|null[0]
        final val $childSerializers // cn.rtast.rob.event.raw.group/GroupNotice.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/GroupNotice> // cn.rtast.rob.event.raw.group/GroupNotice.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.group/GroupShutListResponse { // cn.rtast.rob.event.raw.group/GroupShutListResponse|null[0]
    constructor <init>(kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser>) // cn.rtast.rob.event.raw.group/GroupShutListResponse.<init>|<init>(kotlin.collections.List<cn.rtast.rob.event.raw.group.GroupShutListResponse.GroupShutListUser>){}[0]

    final val data // cn.rtast.rob.event.raw.group/GroupShutListResponse.data|{}data[0]
        final fun <get-data>(): kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser> // cn.rtast.rob.event.raw.group/GroupShutListResponse.data.<get-data>|<get-data>(){}[0]

    final fun component1(): kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser> // cn.rtast.rob.event.raw.group/GroupShutListResponse.component1|component1(){}[0]
    final fun copy(kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser> = ...): cn.rtast.rob.event.raw.group/GroupShutListResponse // cn.rtast.rob.event.raw.group/GroupShutListResponse.copy|copy(kotlin.collections.List<cn.rtast.rob.event.raw.group.GroupShutListResponse.GroupShutListUser>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupShutListResponse.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/GroupShutListResponse.toString|toString(){}[0]

    final class GroupShutListUser { // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser|null[0]
        constructor <init>(kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/Int, kotlin/String, kotlin/Int, kotlin/String, kotlin/Long, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, kotlin.collections/Map<kotlin/String, kotlin/Int>, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/String, kotlin/String, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/String, kotlin/Int, kotlin/Long, kotlin/Long, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Boolean, kotlin/Int) // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.<init>|<init>(kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.Int;kotlin.String;kotlin.Int;kotlin.String;kotlin.Long;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.collections.Map<kotlin.String,kotlin.Int>;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.String;kotlin.String;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.String;kotlin.Int;kotlin.Long;kotlin.Long;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Int){}[0]

        final val autoRemark // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.autoRemark|{}autoRemark[0]
            final fun <get-autoRemark>(): kotlin/String // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.autoRemark.<get-autoRemark>|<get-autoRemark>(){}[0]
        final val avatarPath // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.avatarPath|{}avatarPath[0]
            final fun <get-avatarPath>(): kotlin/String // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.avatarPath.<get-avatarPath>|<get-avatarPath>(){}[0]
        final val bigClubFlag // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.bigClubFlag|{}bigClubFlag[0]
            final fun <get-bigClubFlag>(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.bigClubFlag.<get-bigClubFlag>|<get-bigClubFlag>(){}[0]
        final val bigClubLevel // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.bigClubLevel|{}bigClubLevel[0]
            final fun <get-bigClubLevel>(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.bigClubLevel.<get-bigClubLevel>|<get-bigClubLevel>(){}[0]
        final val cardName // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.cardName|{}cardName[0]
            final fun <get-cardName>(): kotlin/String // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.cardName.<get-cardName>|<get-cardName>(){}[0]
        final val cardNameId // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.cardNameId|{}cardNameId[0]
            final fun <get-cardNameId>(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.cardNameId.<get-cardNameId>|<get-cardNameId>(){}[0]
        final val cardType // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.cardType|{}cardType[0]
            final fun <get-cardType>(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.cardType.<get-cardType>|<get-cardType>(){}[0]
        final val creditLevel // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.creditLevel|{}creditLevel[0]
            final fun <get-creditLevel>(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.creditLevel.<get-creditLevel>|<get-creditLevel>(){}[0]
        final val globalGroupLevel // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.globalGroupLevel|{}globalGroupLevel[0]
            final fun <get-globalGroupLevel>(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.globalGroupLevel.<get-globalGroupLevel>|<get-globalGroupLevel>(){}[0]
        final val globalGroupPoint // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.globalGroupPoint|{}globalGroupPoint[0]
            final fun <get-globalGroupPoint>(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.globalGroupPoint.<get-globalGroupPoint>|<get-globalGroupPoint>(){}[0]
        final val groupHonor // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.groupHonor|{}groupHonor[0]
            final fun <get-groupHonor>(): kotlin.collections/Map<kotlin/String, kotlin/Int> // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.groupHonor.<get-groupHonor>|<get-groupHonor>(){}[0]
        final val isDelete // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.isDelete|{}isDelete[0]
            final fun <get-isDelete>(): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.isDelete.<get-isDelete>|<get-isDelete>(){}[0]
        final val isRobot // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.isRobot|{}isRobot[0]
            final fun <get-isRobot>(): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.isRobot.<get-isRobot>|<get-isRobot>(){}[0]
        final val isSpecialConcerned // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.isSpecialConcerned|{}isSpecialConcerned[0]
            final fun <get-isSpecialConcerned>(): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.isSpecialConcerned.<get-isSpecialConcerned>|<get-isSpecialConcerned>(){}[0]
        final val isSpecialShield // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.isSpecialShield|{}isSpecialShield[0]
            final fun <get-isSpecialShield>(): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.isSpecialShield.<get-isSpecialShield>|<get-isSpecialShield>(){}[0]
        final val isSpecialShielded // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.isSpecialShielded|{}isSpecialShielded[0]
            final fun <get-isSpecialShielded>(): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.isSpecialShielded.<get-isSpecialShielded>|<get-isSpecialShielded>(){}[0]
        final val joinTime // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.joinTime|{}joinTime[0]
            final fun <get-joinTime>(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.joinTime.<get-joinTime>|<get-joinTime>(){}[0]
        final val lastSpeakTime // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.lastSpeakTime|{}lastSpeakTime[0]
            final fun <get-lastSpeakTime>(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.lastSpeakTime.<get-lastSpeakTime>|<get-lastSpeakTime>(){}[0]
        final val memberFlag // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.memberFlag|{}memberFlag[0]
            final fun <get-memberFlag>(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.memberFlag.<get-memberFlag>|<get-memberFlag>(){}[0]
        final val memberFlagExt // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.memberFlagExt|{}memberFlagExt[0]
            final fun <get-memberFlagExt>(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.memberFlagExt.<get-memberFlagExt>|<get-memberFlagExt>(){}[0]
        final val memberFlagExt2 // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.memberFlagExt2|{}memberFlagExt2[0]
            final fun <get-memberFlagExt2>(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.memberFlagExt2.<get-memberFlagExt2>|<get-memberFlagExt2>(){}[0]
        final val memberLevel // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.memberLevel|{}memberLevel[0]
            final fun <get-memberLevel>(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.memberLevel.<get-memberLevel>|<get-memberLevel>(){}[0]
        final val memberMobileFlag // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.memberMobileFlag|{}memberMobileFlag[0]
            final fun <get-memberMobileFlag>(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.memberMobileFlag.<get-memberMobileFlag>|<get-memberMobileFlag>(){}[0]
        final val memberRealLevel // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.memberRealLevel|{}memberRealLevel[0]
            final fun <get-memberRealLevel>(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.memberRealLevel.<get-memberRealLevel>|<get-memberRealLevel>(){}[0]
        final val memberSpecialTitle // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.memberSpecialTitle|{}memberSpecialTitle[0]
            final fun <get-memberSpecialTitle>(): kotlin/String // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.memberSpecialTitle.<get-memberSpecialTitle>|<get-memberSpecialTitle>(){}[0]
        final val memberTitleId // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.memberTitleId|{}memberTitleId[0]
            final fun <get-memberTitleId>(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.memberTitleId.<get-memberTitleId>|<get-memberTitleId>(){}[0]
        final val mssVipType // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.mssVipType|{}mssVipType[0]
            final fun <get-mssVipType>(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.mssVipType.<get-mssVipType>|<get-mssVipType>(){}[0]
        final val nick // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.nick|{}nick[0]
            final fun <get-nick>(): kotlin/String // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.nick.<get-nick>|<get-nick>(){}[0]
        final val qid // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.qid|{}qid[0]
            final fun <get-qid>(): kotlin/String // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.qid.<get-qid>|<get-qid>(){}[0]
        final val remark // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.remark|{}remark[0]
            final fun <get-remark>(): kotlin/String // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.remark.<get-remark>|<get-remark>(){}[0]
        final val richFlag // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.richFlag|{}richFlag[0]
            final fun <get-richFlag>(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.richFlag.<get-richFlag>|<get-richFlag>(){}[0]
        final val role // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.role|{}role[0]
            final fun <get-role>(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.role.<get-role>|<get-role>(){}[0]
        final val shutUpTime // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.shutUpTime|{}shutUpTime[0]
            final fun <get-shutUpTime>(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.shutUpTime.<get-shutUpTime>|<get-shutUpTime>(){}[0]
        final val specialTitleExpireTime // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.specialTitleExpireTime|{}specialTitleExpireTime[0]
            final fun <get-specialTitleExpireTime>(): kotlin/String // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.specialTitleExpireTime.<get-specialTitleExpireTime>|<get-specialTitleExpireTime>(){}[0]
        final val uid // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.uid|{}uid[0]
            final fun <get-uid>(): kotlin/String // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.uid.<get-uid>|<get-uid>(){}[0]
        final val uin // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.uin|{}uin[0]
            final fun <get-uin>(): kotlin/String // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.uin.<get-uin>|<get-uin>(){}[0]
        final val userShowFlag // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.userShowFlag|{}userShowFlag[0]
            final fun <get-userShowFlag>(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.userShowFlag.<get-userShowFlag>|<get-userShowFlag>(){}[0]
        final val userShowFlagNew // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.userShowFlagNew|{}userShowFlagNew[0]
            final fun <get-userShowFlagNew>(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.userShowFlagNew.<get-userShowFlagNew>|<get-userShowFlagNew>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component1|component1(){}[0]
        final fun component10(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component10|component10(){}[0]
        final fun component11(): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component11|component11(){}[0]
        final fun component12(): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component12|component12(){}[0]
        final fun component13(): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component13|component13(){}[0]
        final fun component14(): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component14|component14(){}[0]
        final fun component15(): kotlin.collections/Map<kotlin/String, kotlin/Int> // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component15|component15(){}[0]
        final fun component16(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component16|component16(){}[0]
        final fun component17(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component17|component17(){}[0]
        final fun component18(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component18|component18(){}[0]
        final fun component19(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component19|component19(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component2|component2(){}[0]
        final fun component20(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component20|component20(){}[0]
        final fun component21(): kotlin/String // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component21|component21(){}[0]
        final fun component22(): kotlin/String // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component22|component22(){}[0]
        final fun component23(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component23|component23(){}[0]
        final fun component24(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component24|component24(){}[0]
        final fun component25(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component25|component25(){}[0]
        final fun component26(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component26|component26(){}[0]
        final fun component27(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component27|component27(){}[0]
        final fun component28(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component28|component28(){}[0]
        final fun component29(): kotlin/String // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component29|component29(){}[0]
        final fun component3(): kotlin/String // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component3|component3(){}[0]
        final fun component30(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component30|component30(){}[0]
        final fun component31(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component31|component31(){}[0]
        final fun component32(): kotlin/Long // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component32|component32(){}[0]
        final fun component33(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component33|component33(){}[0]
        final fun component34(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component34|component34(){}[0]
        final fun component35(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component35|component35(){}[0]
        final fun component36(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component36|component36(){}[0]
        final fun component37(): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component37|component37(){}[0]
        final fun component38(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component38|component38(){}[0]
        final fun component4(): kotlin/String // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component4|component4(){}[0]
        final fun component5(): kotlin/String // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component5|component5(){}[0]
        final fun component6(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component6|component6(){}[0]
        final fun component7(): kotlin/String // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component7|component7(){}[0]
        final fun component8(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component8|component8(){}[0]
        final fun component9(): kotlin/String // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.component9|component9(){}[0]
        final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/Int = ..., kotlin/String = ..., kotlin/Int = ..., kotlin/String = ..., kotlin/Long = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin.collections/Map<kotlin/String, kotlin/Int> = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/String = ..., kotlin/String = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/String = ..., kotlin/Int = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Boolean = ..., kotlin/Int = ...): cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.copy|copy(kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.Int;kotlin.String;kotlin.Int;kotlin.String;kotlin.Long;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.collections.Map<kotlin.String,kotlin.Int>;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.String;kotlin.String;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.String;kotlin.Int;kotlin.Long;kotlin.Long;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Int){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser> { // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser) // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.GroupShutListResponse.GroupShutListUser){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.Companion|null[0]
            final val $childSerializers // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser> // cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/GroupShutListResponse> { // cn.rtast.rob.event.raw.group/GroupShutListResponse.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.group/GroupShutListResponse.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/GroupShutListResponse.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/GroupShutListResponse.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/GroupShutListResponse // cn.rtast.rob.event.raw.group/GroupShutListResponse.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/GroupShutListResponse) // cn.rtast.rob.event.raw.group/GroupShutListResponse.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.GroupShutListResponse){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.group/GroupShutListResponse.Companion|null[0]
        final val $childSerializers // cn.rtast.rob.event.raw.group/GroupShutListResponse.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/GroupShutListResponse> // cn.rtast.rob.event.raw.group/GroupShutListResponse.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.group/HonorInfo { // cn.rtast.rob.event.raw.group/HonorInfo|null[0]
    constructor <init>(cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo) // cn.rtast.rob.event.raw.group/HonorInfo.<init>|<init>(cn.rtast.rob.event.raw.group.HonorInfo.HonorInfo){}[0]

    final val data // cn.rtast.rob.event.raw.group/HonorInfo.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo // cn.rtast.rob.event.raw.group/HonorInfo.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo // cn.rtast.rob.event.raw.group/HonorInfo.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo = ...): cn.rtast.rob.event.raw.group/HonorInfo // cn.rtast.rob.event.raw.group/HonorInfo.copy|copy(cn.rtast.rob.event.raw.group.HonorInfo.HonorInfo){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/HonorInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/HonorInfo.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.toString|toString(){}[0]

    final class CurrentTalkAction { // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction|null[0]
        constructor <init>(kotlin/Long, kotlin/Int, kotlin/String, kotlin/Int, kotlin/String) // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.<init>|<init>(kotlin.Long;kotlin.Int;kotlin.String;kotlin.Int;kotlin.String){}[0]

        final val avatar // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.avatar|{}avatar[0]
            final fun <get-avatar>(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.avatar.<get-avatar>|<get-avatar>(){}[0]
        final val avatarSize // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.avatarSize|{}avatarSize[0]
            final fun <get-avatarSize>(): kotlin/Int // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.avatarSize.<get-avatarSize>|<get-avatarSize>(){}[0]
        final val dayCount // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.dayCount|{}dayCount[0]
            final fun <get-dayCount>(): kotlin/Int // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.dayCount.<get-dayCount>|<get-dayCount>(){}[0]
        final val nick // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.nick|{}nick[0]
            final fun <get-nick>(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.nick.<get-nick>|<get-nick>(){}[0]
        final val uin // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.uin|{}uin[0]
            final fun <get-uin>(): kotlin/Long // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.uin.<get-uin>|<get-uin>(){}[0]

        final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.component1|component1(){}[0]
        final fun component2(): kotlin/Int // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.component2|component2(){}[0]
        final fun component3(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.component3|component3(){}[0]
        final fun component4(): kotlin/Int // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.component4|component4(){}[0]
        final fun component5(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.component5|component5(){}[0]
        final fun copy(kotlin/Long = ..., kotlin/Int = ..., kotlin/String = ..., kotlin/Int = ..., kotlin/String = ...): cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.copy|copy(kotlin.Long;kotlin.Int;kotlin.String;kotlin.Int;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction> { // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction) // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.HonorInfo.CurrentTalkAction){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction> // cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction.Companion.serializer|serializer(){}[0]
        }
    }

    final class EmotionList { // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList|null[0]
        constructor <init>(kotlin/Long, kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/Int, kotlin/String) // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.<init>|<init>(kotlin.Long;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.Int;kotlin.String){}[0]

        final val avatar // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.avatar|{}avatar[0]
            final fun <get-avatar>(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.avatar.<get-avatar>|<get-avatar>(){}[0]
        final val btnText // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.btnText|{}btnText[0]
            final fun <get-btnText>(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.btnText.<get-btnText>|<get-btnText>(){}[0]
        final val description // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.description|{}description[0]
            final fun <get-description>(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.description.<get-description>|<get-description>(){}[0]
        final val icon // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.icon|{}icon[0]
            final fun <get-icon>(): kotlin/Int // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.icon.<get-icon>|<get-icon>(){}[0]
        final val nickname // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.nickname|{}nickname[0]
            final fun <get-nickname>(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.nickname.<get-nickname>|<get-nickname>(){}[0]
        final val text // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.text|{}text[0]
            final fun <get-text>(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.text.<get-text>|<get-text>(){}[0]
        final val userId // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.userId|{}userId[0]
            final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.userId.<get-userId>|<get-userId>(){}[0]

        final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.component2|component2(){}[0]
        final fun component3(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.component3|component3(){}[0]
        final fun component4(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.component4|component4(){}[0]
        final fun component5(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.component5|component5(){}[0]
        final fun component6(): kotlin/Int // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.component6|component6(){}[0]
        final fun component7(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.component7|component7(){}[0]
        final fun copy(kotlin/Long = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/Int = ..., kotlin/String = ...): cn.rtast.rob.event.raw.group/HonorInfo.EmotionList // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.copy|copy(kotlin.Long;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.Int;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/HonorInfo.EmotionList> { // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/HonorInfo.EmotionList // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/HonorInfo.EmotionList) // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.HonorInfo.EmotionList){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/HonorInfo.EmotionList> // cn.rtast.rob.event.raw.group/HonorInfo.EmotionList.Companion.serializer|serializer(){}[0]
        }
    }

    final class HonorInfo { // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo|null[0]
        constructor <init>(kotlin/Long, cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction, kotlin.collections/List<cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList>, kotlin.collections/List<cn.rtast.rob.event.raw.group/HonorInfo.LegendList>, kotlin.collections/List<cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList>, kotlin.collections/List<cn.rtast.rob.event.raw.group/HonorInfo.EmotionList>, kotlin.collections/List<cn.rtast.rob.event.raw.group/HonorInfo.PerformerList>) // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.<init>|<init>(kotlin.Long;cn.rtast.rob.event.raw.group.HonorInfo.CurrentTalkAction;kotlin.collections.List<cn.rtast.rob.event.raw.group.HonorInfo.TalkActiveList>;kotlin.collections.List<cn.rtast.rob.event.raw.group.HonorInfo.LegendList>;kotlin.collections.List<cn.rtast.rob.event.raw.group.HonorInfo.StringNewbieList>;kotlin.collections.List<cn.rtast.rob.event.raw.group.HonorInfo.EmotionList>;kotlin.collections.List<cn.rtast.rob.event.raw.group.HonorInfo.PerformerList>){}[0]

        final val currentTalkActive // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.currentTalkActive|{}currentTalkActive[0]
            final fun <get-currentTalkActive>(): cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.currentTalkActive.<get-currentTalkActive>|<get-currentTalkActive>(){}[0]
        final val emotionList // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.emotionList|{}emotionList[0]
            final fun <get-emotionList>(): kotlin.collections/List<cn.rtast.rob.event.raw.group/HonorInfo.EmotionList> // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.emotionList.<get-emotionList>|<get-emotionList>(){}[0]
        final val groupId // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.groupId|{}groupId[0]
            final fun <get-groupId>(): kotlin/Long // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.groupId.<get-groupId>|<get-groupId>(){}[0]
        final val legendList // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.legendList|{}legendList[0]
            final fun <get-legendList>(): kotlin.collections/List<cn.rtast.rob.event.raw.group/HonorInfo.LegendList> // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.legendList.<get-legendList>|<get-legendList>(){}[0]
        final val performerList // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.performerList|{}performerList[0]
            final fun <get-performerList>(): kotlin.collections/List<cn.rtast.rob.event.raw.group/HonorInfo.PerformerList> // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.performerList.<get-performerList>|<get-performerList>(){}[0]
        final val strongNewbieList // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.strongNewbieList|{}strongNewbieList[0]
            final fun <get-strongNewbieList>(): kotlin.collections/List<cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList> // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.strongNewbieList.<get-strongNewbieList>|<get-strongNewbieList>(){}[0]
        final val talkActiveList // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.talkActiveList|{}talkActiveList[0]
            final fun <get-talkActiveList>(): kotlin.collections/List<cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList> // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.talkActiveList.<get-talkActiveList>|<get-talkActiveList>(){}[0]

        final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.component1|component1(){}[0]
        final fun component2(): cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.component2|component2(){}[0]
        final fun component3(): kotlin.collections/List<cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList> // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.component3|component3(){}[0]
        final fun component4(): kotlin.collections/List<cn.rtast.rob.event.raw.group/HonorInfo.LegendList> // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.component4|component4(){}[0]
        final fun component5(): kotlin.collections/List<cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList> // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.component5|component5(){}[0]
        final fun component6(): kotlin.collections/List<cn.rtast.rob.event.raw.group/HonorInfo.EmotionList> // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.component6|component6(){}[0]
        final fun component7(): kotlin.collections/List<cn.rtast.rob.event.raw.group/HonorInfo.PerformerList> // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.component7|component7(){}[0]
        final fun copy(kotlin/Long = ..., cn.rtast.rob.event.raw.group/HonorInfo.CurrentTalkAction = ..., kotlin.collections/List<cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList> = ..., kotlin.collections/List<cn.rtast.rob.event.raw.group/HonorInfo.LegendList> = ..., kotlin.collections/List<cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList> = ..., kotlin.collections/List<cn.rtast.rob.event.raw.group/HonorInfo.EmotionList> = ..., kotlin.collections/List<cn.rtast.rob.event.raw.group/HonorInfo.PerformerList> = ...): cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.copy|copy(kotlin.Long;cn.rtast.rob.event.raw.group.HonorInfo.CurrentTalkAction;kotlin.collections.List<cn.rtast.rob.event.raw.group.HonorInfo.TalkActiveList>;kotlin.collections.List<cn.rtast.rob.event.raw.group.HonorInfo.LegendList>;kotlin.collections.List<cn.rtast.rob.event.raw.group.HonorInfo.StringNewbieList>;kotlin.collections.List<cn.rtast.rob.event.raw.group.HonorInfo.EmotionList>;kotlin.collections.List<cn.rtast.rob.event.raw.group.HonorInfo.PerformerList>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo> { // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo) // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.HonorInfo.HonorInfo){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.Companion|null[0]
            final val $childSerializers // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo> // cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo.Companion.serializer|serializer(){}[0]
        }
    }

    final class LegendList { // cn.rtast.rob.event.raw.group/HonorInfo.LegendList|null[0]
        constructor <init>(kotlin/Long, kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String) // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.<init>|<init>(kotlin.Long;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]

        final val avatar // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.avatar|{}avatar[0]
            final fun <get-avatar>(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.avatar.<get-avatar>|<get-avatar>(){}[0]
        final val btnText // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.btnText|{}btnText[0]
            final fun <get-btnText>(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.btnText.<get-btnText>|<get-btnText>(){}[0]
        final val description // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.description|{}description[0]
            final fun <get-description>(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.description.<get-description>|<get-description>(){}[0]
        final val icon // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.icon|{}icon[0]
            final fun <get-icon>(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.icon.<get-icon>|<get-icon>(){}[0]
        final val name // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.name|{}name[0]
            final fun <get-name>(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.name.<get-name>|<get-name>(){}[0]
        final val text // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.text|{}text[0]
            final fun <get-text>(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.text.<get-text>|<get-text>(){}[0]
        final val uin // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.uin|{}uin[0]
            final fun <get-uin>(): kotlin/Long // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.uin.<get-uin>|<get-uin>(){}[0]

        final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.component2|component2(){}[0]
        final fun component3(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.component3|component3(){}[0]
        final fun component4(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.component4|component4(){}[0]
        final fun component5(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.component5|component5(){}[0]
        final fun component6(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.component6|component6(){}[0]
        final fun component7(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.component7|component7(){}[0]
        final fun copy(kotlin/Long = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ...): cn.rtast.rob.event.raw.group/HonorInfo.LegendList // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.copy|copy(kotlin.Long;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/HonorInfo.LegendList> { // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/HonorInfo.LegendList // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/HonorInfo.LegendList) // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.HonorInfo.LegendList){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/HonorInfo.LegendList> // cn.rtast.rob.event.raw.group/HonorInfo.LegendList.Companion.serializer|serializer(){}[0]
        }
    }

    final class PerformerList { // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList|null[0]
        constructor <init>(kotlin/Long, kotlin/String, kotlin/String, kotlin/Int) // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList.<init>|<init>(kotlin.Long;kotlin.String;kotlin.String;kotlin.Int){}[0]

        final val avatar // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList.avatar|{}avatar[0]
            final fun <get-avatar>(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList.avatar.<get-avatar>|<get-avatar>(){}[0]
        final val description // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList.description|{}description[0]
            final fun <get-description>(): kotlin/Int // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList.description.<get-description>|<get-description>(){}[0]
        final val nickname // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList.nickname|{}nickname[0]
            final fun <get-nickname>(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList.nickname.<get-nickname>|<get-nickname>(){}[0]
        final val userId // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList.userId|{}userId[0]
            final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList.userId.<get-userId>|<get-userId>(){}[0]

        final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList.component2|component2(){}[0]
        final fun component3(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList.component3|component3(){}[0]
        final fun component4(): kotlin/Int // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList.component4|component4(){}[0]
        final fun copy(kotlin/Long = ..., kotlin/String = ..., kotlin/String = ..., kotlin/Int = ...): cn.rtast.rob.event.raw.group/HonorInfo.PerformerList // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList.copy|copy(kotlin.Long;kotlin.String;kotlin.String;kotlin.Int){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/HonorInfo.PerformerList> { // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/HonorInfo.PerformerList // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/HonorInfo.PerformerList) // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.HonorInfo.PerformerList){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/HonorInfo.PerformerList> // cn.rtast.rob.event.raw.group/HonorInfo.PerformerList.Companion.serializer|serializer(){}[0]
        }
    }

    final class StringNewbieList { // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList|null[0]
        constructor <init>(kotlin/Long, kotlin/String, kotlin/String, kotlin/Int) // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList.<init>|<init>(kotlin.Long;kotlin.String;kotlin.String;kotlin.Int){}[0]

        final val avatar // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList.avatar|{}avatar[0]
            final fun <get-avatar>(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList.avatar.<get-avatar>|<get-avatar>(){}[0]
        final val description // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList.description|{}description[0]
            final fun <get-description>(): kotlin/Int // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList.description.<get-description>|<get-description>(){}[0]
        final val nickname // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList.nickname|{}nickname[0]
            final fun <get-nickname>(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList.nickname.<get-nickname>|<get-nickname>(){}[0]
        final val userId // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList.userId|{}userId[0]
            final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList.userId.<get-userId>|<get-userId>(){}[0]

        final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList.component2|component2(){}[0]
        final fun component3(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList.component3|component3(){}[0]
        final fun component4(): kotlin/Int // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList.component4|component4(){}[0]
        final fun copy(kotlin/Long = ..., kotlin/String = ..., kotlin/String = ..., kotlin/Int = ...): cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList.copy|copy(kotlin.Long;kotlin.String;kotlin.String;kotlin.Int){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList> { // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList) // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.HonorInfo.StringNewbieList){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList> // cn.rtast.rob.event.raw.group/HonorInfo.StringNewbieList.Companion.serializer|serializer(){}[0]
        }
    }

    final class TalkActiveList { // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList|null[0]
        constructor <init>(kotlin/Long, kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String) // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.<init>|<init>(kotlin.Long;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]

        final val avatar // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.avatar|{}avatar[0]
            final fun <get-avatar>(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.avatar.<get-avatar>|<get-avatar>(){}[0]
        final val btnText // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.btnText|{}btnText[0]
            final fun <get-btnText>(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.btnText.<get-btnText>|<get-btnText>(){}[0]
        final val description // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.description|{}description[0]
            final fun <get-description>(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.description.<get-description>|<get-description>(){}[0]
        final val name // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.name|{}name[0]
            final fun <get-name>(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.name.<get-name>|<get-name>(){}[0]
        final val text // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.text|{}text[0]
            final fun <get-text>(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.text.<get-text>|<get-text>(){}[0]
        final val uin // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.uin|{}uin[0]
            final fun <get-uin>(): kotlin/Long // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.uin.<get-uin>|<get-uin>(){}[0]

        final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.component2|component2(){}[0]
        final fun component3(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.component3|component3(){}[0]
        final fun component4(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.component4|component4(){}[0]
        final fun component5(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.component5|component5(){}[0]
        final fun component6(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.component6|component6(){}[0]
        final fun copy(kotlin/Long = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ...): cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.copy|copy(kotlin.Long;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList> { // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList) // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.HonorInfo.TalkActiveList){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList> // cn.rtast.rob.event.raw.group/HonorInfo.TalkActiveList.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/HonorInfo> { // cn.rtast.rob.event.raw.group/HonorInfo.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.group/HonorInfo.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/HonorInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/HonorInfo.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/HonorInfo // cn.rtast.rob.event.raw.group/HonorInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/HonorInfo) // cn.rtast.rob.event.raw.group/HonorInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.HonorInfo){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.group/HonorInfo.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/HonorInfo> // cn.rtast.rob.event.raw.group/HonorInfo.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.group/OneBotGroupFile { // cn.rtast.rob.event.raw.group/OneBotGroupFile|null[0]
    constructor <init>(kotlin/Long, kotlin/String, kotlin/String, kotlin/Int, kotlin/Int, kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long, kotlin/String) // cn.rtast.rob.event.raw.group/OneBotGroupFile.<init>|<init>(kotlin.Long;kotlin.String;kotlin.String;kotlin.Int;kotlin.Int;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.String){}[0]

    final val busid // cn.rtast.rob.event.raw.group/OneBotGroupFile.busid|{}busid[0]
        final fun <get-busid>(): kotlin/Int // cn.rtast.rob.event.raw.group/OneBotGroupFile.busid.<get-busid>|<get-busid>(){}[0]
    final val deadTime // cn.rtast.rob.event.raw.group/OneBotGroupFile.deadTime|{}deadTime[0]
        final fun <get-deadTime>(): kotlin/Long // cn.rtast.rob.event.raw.group/OneBotGroupFile.deadTime.<get-deadTime>|<get-deadTime>(){}[0]
    final val downloadTimes // cn.rtast.rob.event.raw.group/OneBotGroupFile.downloadTimes|{}downloadTimes[0]
        final fun <get-downloadTimes>(): kotlin/Long // cn.rtast.rob.event.raw.group/OneBotGroupFile.downloadTimes.<get-downloadTimes>|<get-downloadTimes>(){}[0]
    final val fileId // cn.rtast.rob.event.raw.group/OneBotGroupFile.fileId|{}fileId[0]
        final fun <get-fileId>(): kotlin/String // cn.rtast.rob.event.raw.group/OneBotGroupFile.fileId.<get-fileId>|<get-fileId>(){}[0]
    final val fileSize // cn.rtast.rob.event.raw.group/OneBotGroupFile.fileSize|{}fileSize[0]
        final fun <get-fileSize>(): kotlin/Int // cn.rtast.rob.event.raw.group/OneBotGroupFile.fileSize.<get-fileSize>|<get-fileSize>(){}[0]
    final val filename // cn.rtast.rob.event.raw.group/OneBotGroupFile.filename|{}filename[0]
        final fun <get-filename>(): kotlin/String // cn.rtast.rob.event.raw.group/OneBotGroupFile.filename.<get-filename>|<get-filename>(){}[0]
    final val groupId // cn.rtast.rob.event.raw.group/OneBotGroupFile.groupId|{}groupId[0]
        final fun <get-groupId>(): kotlin/Long // cn.rtast.rob.event.raw.group/OneBotGroupFile.groupId.<get-groupId>|<get-groupId>(){}[0]
    final val modifyTime // cn.rtast.rob.event.raw.group/OneBotGroupFile.modifyTime|{}modifyTime[0]
        final fun <get-modifyTime>(): kotlin/Long // cn.rtast.rob.event.raw.group/OneBotGroupFile.modifyTime.<get-modifyTime>|<get-modifyTime>(){}[0]
    final val uploadTime // cn.rtast.rob.event.raw.group/OneBotGroupFile.uploadTime|{}uploadTime[0]
        final fun <get-uploadTime>(): kotlin/Long // cn.rtast.rob.event.raw.group/OneBotGroupFile.uploadTime.<get-uploadTime>|<get-uploadTime>(){}[0]
    final val uploader // cn.rtast.rob.event.raw.group/OneBotGroupFile.uploader|{}uploader[0]
        final fun <get-uploader>(): kotlin/Long // cn.rtast.rob.event.raw.group/OneBotGroupFile.uploader.<get-uploader>|<get-uploader>(){}[0]
    final val uploaderName // cn.rtast.rob.event.raw.group/OneBotGroupFile.uploaderName|{}uploaderName[0]
        final fun <get-uploaderName>(): kotlin/String // cn.rtast.rob.event.raw.group/OneBotGroupFile.uploaderName.<get-uploaderName>|<get-uploaderName>(){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.group/OneBotGroupFile.component1|component1(){}[0]
    final fun component10(): kotlin/Long // cn.rtast.rob.event.raw.group/OneBotGroupFile.component10|component10(){}[0]
    final fun component11(): kotlin/String // cn.rtast.rob.event.raw.group/OneBotGroupFile.component11|component11(){}[0]
    final fun component2(): kotlin/String // cn.rtast.rob.event.raw.group/OneBotGroupFile.component2|component2(){}[0]
    final fun component3(): kotlin/String // cn.rtast.rob.event.raw.group/OneBotGroupFile.component3|component3(){}[0]
    final fun component4(): kotlin/Int // cn.rtast.rob.event.raw.group/OneBotGroupFile.component4|component4(){}[0]
    final fun component5(): kotlin/Int // cn.rtast.rob.event.raw.group/OneBotGroupFile.component5|component5(){}[0]
    final fun component6(): kotlin/Long // cn.rtast.rob.event.raw.group/OneBotGroupFile.component6|component6(){}[0]
    final fun component7(): kotlin/Long // cn.rtast.rob.event.raw.group/OneBotGroupFile.component7|component7(){}[0]
    final fun component8(): kotlin/Long // cn.rtast.rob.event.raw.group/OneBotGroupFile.component8|component8(){}[0]
    final fun component9(): kotlin/Long // cn.rtast.rob.event.raw.group/OneBotGroupFile.component9|component9(){}[0]
    final fun copy(kotlin/Long = ..., kotlin/String = ..., kotlin/String = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/String = ...): cn.rtast.rob.event.raw.group/OneBotGroupFile // cn.rtast.rob.event.raw.group/OneBotGroupFile.copy|copy(kotlin.Long;kotlin.String;kotlin.String;kotlin.Int;kotlin.Int;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/OneBotGroupFile.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/OneBotGroupFile.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/OneBotGroupFile.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/OneBotGroupFile> { // cn.rtast.rob.event.raw.group/OneBotGroupFile.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.group/OneBotGroupFile.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/OneBotGroupFile.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/OneBotGroupFile.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/OneBotGroupFile // cn.rtast.rob.event.raw.group/OneBotGroupFile.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/OneBotGroupFile) // cn.rtast.rob.event.raw.group/OneBotGroupFile.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.OneBotGroupFile){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.group/OneBotGroupFile.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/OneBotGroupFile> // cn.rtast.rob.event.raw.group/OneBotGroupFile.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.group/OneBotGroupFolder { // cn.rtast.rob.event.raw.group/OneBotGroupFolder|null[0]
    constructor <init>(kotlin/Long, kotlin/String, kotlin/String, kotlin/Long, kotlin/Long, kotlin/String, kotlin/Int) // cn.rtast.rob.event.raw.group/OneBotGroupFolder.<init>|<init>(kotlin.Long;kotlin.String;kotlin.String;kotlin.Long;kotlin.Long;kotlin.String;kotlin.Int){}[0]

    final val createTime // cn.rtast.rob.event.raw.group/OneBotGroupFolder.createTime|{}createTime[0]
        final fun <get-createTime>(): kotlin/Long // cn.rtast.rob.event.raw.group/OneBotGroupFolder.createTime.<get-createTime>|<get-createTime>(){}[0]
    final val creator // cn.rtast.rob.event.raw.group/OneBotGroupFolder.creator|{}creator[0]
        final fun <get-creator>(): kotlin/Long // cn.rtast.rob.event.raw.group/OneBotGroupFolder.creator.<get-creator>|<get-creator>(){}[0]
    final val creatorName // cn.rtast.rob.event.raw.group/OneBotGroupFolder.creatorName|{}creatorName[0]
        final fun <get-creatorName>(): kotlin/String // cn.rtast.rob.event.raw.group/OneBotGroupFolder.creatorName.<get-creatorName>|<get-creatorName>(){}[0]
    final val folderId // cn.rtast.rob.event.raw.group/OneBotGroupFolder.folderId|{}folderId[0]
        final fun <get-folderId>(): kotlin/String // cn.rtast.rob.event.raw.group/OneBotGroupFolder.folderId.<get-folderId>|<get-folderId>(){}[0]
    final val folderName // cn.rtast.rob.event.raw.group/OneBotGroupFolder.folderName|{}folderName[0]
        final fun <get-folderName>(): kotlin/String // cn.rtast.rob.event.raw.group/OneBotGroupFolder.folderName.<get-folderName>|<get-folderName>(){}[0]
    final val groupId // cn.rtast.rob.event.raw.group/OneBotGroupFolder.groupId|{}groupId[0]
        final fun <get-groupId>(): kotlin/Long // cn.rtast.rob.event.raw.group/OneBotGroupFolder.groupId.<get-groupId>|<get-groupId>(){}[0]
    final val totalFileCount // cn.rtast.rob.event.raw.group/OneBotGroupFolder.totalFileCount|{}totalFileCount[0]
        final fun <get-totalFileCount>(): kotlin/Int // cn.rtast.rob.event.raw.group/OneBotGroupFolder.totalFileCount.<get-totalFileCount>|<get-totalFileCount>(){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.group/OneBotGroupFolder.component1|component1(){}[0]
    final fun component2(): kotlin/String // cn.rtast.rob.event.raw.group/OneBotGroupFolder.component2|component2(){}[0]
    final fun component3(): kotlin/String // cn.rtast.rob.event.raw.group/OneBotGroupFolder.component3|component3(){}[0]
    final fun component4(): kotlin/Long // cn.rtast.rob.event.raw.group/OneBotGroupFolder.component4|component4(){}[0]
    final fun component5(): kotlin/Long // cn.rtast.rob.event.raw.group/OneBotGroupFolder.component5|component5(){}[0]
    final fun component6(): kotlin/String // cn.rtast.rob.event.raw.group/OneBotGroupFolder.component6|component6(){}[0]
    final fun component7(): kotlin/Int // cn.rtast.rob.event.raw.group/OneBotGroupFolder.component7|component7(){}[0]
    final fun copy(kotlin/Long = ..., kotlin/String = ..., kotlin/String = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/String = ..., kotlin/Int = ...): cn.rtast.rob.event.raw.group/OneBotGroupFolder // cn.rtast.rob.event.raw.group/OneBotGroupFolder.copy|copy(kotlin.Long;kotlin.String;kotlin.String;kotlin.Long;kotlin.Long;kotlin.String;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/OneBotGroupFolder.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/OneBotGroupFolder.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/OneBotGroupFolder.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/OneBotGroupFolder> { // cn.rtast.rob.event.raw.group/OneBotGroupFolder.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.group/OneBotGroupFolder.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/OneBotGroupFolder.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/OneBotGroupFolder.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/OneBotGroupFolder // cn.rtast.rob.event.raw.group/OneBotGroupFolder.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/OneBotGroupFolder) // cn.rtast.rob.event.raw.group/OneBotGroupFolder.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.OneBotGroupFolder){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.group/OneBotGroupFolder.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/OneBotGroupFolder> // cn.rtast.rob.event.raw.group/OneBotGroupFolder.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.group/RawBanEvent { // cn.rtast.rob.event.raw.group/RawBanEvent|null[0]
    constructor <init>(kotlin/Long, kotlin/Long, kotlin/Int, kotlin/Long, kotlin/Long, cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.group/RawBanEvent.<init>|<init>(kotlin.Long;kotlin.Long;kotlin.Int;kotlin.Long;kotlin.Long;cn.rtast.rob.onebot.OneBotAction){}[0]

    final val action // cn.rtast.rob.event.raw.group/RawBanEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.group/RawBanEvent.action.<get-action>|<get-action>(){}[0]
    final val duration // cn.rtast.rob.event.raw.group/RawBanEvent.duration|{}duration[0]
        final fun <get-duration>(): kotlin/Int // cn.rtast.rob.event.raw.group/RawBanEvent.duration.<get-duration>|<get-duration>(){}[0]
    final val groupId // cn.rtast.rob.event.raw.group/RawBanEvent.groupId|{}groupId[0]
        final fun <get-groupId>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawBanEvent.groupId.<get-groupId>|<get-groupId>(){}[0]
    final val operator // cn.rtast.rob.event.raw.group/RawBanEvent.operator|{}operator[0]
        final fun <get-operator>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawBanEvent.operator.<get-operator>|<get-operator>(){}[0]
    final val time // cn.rtast.rob.event.raw.group/RawBanEvent.time|{}time[0]
        final fun <get-time>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawBanEvent.time.<get-time>|<get-time>(){}[0]
    final val userId // cn.rtast.rob.event.raw.group/RawBanEvent.userId|{}userId[0]
        final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawBanEvent.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.group/RawBanEvent.component1|component1(){}[0]
    final fun component2(): kotlin/Long // cn.rtast.rob.event.raw.group/RawBanEvent.component2|component2(){}[0]
    final fun component3(): kotlin/Int // cn.rtast.rob.event.raw.group/RawBanEvent.component3|component3(){}[0]
    final fun component4(): kotlin/Long // cn.rtast.rob.event.raw.group/RawBanEvent.component4|component4(){}[0]
    final fun component5(): kotlin/Long // cn.rtast.rob.event.raw.group/RawBanEvent.component5|component5(){}[0]
    final fun component6(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.group/RawBanEvent.component6|component6(){}[0]
    final fun copy(kotlin/Long = ..., kotlin/Long = ..., kotlin/Int = ..., kotlin/Long = ..., kotlin/Long = ..., cn.rtast.rob.onebot/OneBotAction = ...): cn.rtast.rob.event.raw.group/RawBanEvent // cn.rtast.rob.event.raw.group/RawBanEvent.copy|copy(kotlin.Long;kotlin.Long;kotlin.Int;kotlin.Long;kotlin.Long;cn.rtast.rob.onebot.OneBotAction){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/RawBanEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/RawBanEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/RawBanEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.raw.group/RawBotBeKickEvent { // cn.rtast.rob.event.raw.group/RawBotBeKickEvent|null[0]
    constructor <init>(kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long, cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.group/RawBotBeKickEvent.<init>|<init>(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;cn.rtast.rob.onebot.OneBotAction){}[0]

    final val action // cn.rtast.rob.event.raw.group/RawBotBeKickEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.group/RawBotBeKickEvent.action.<get-action>|<get-action>(){}[0]
    final val groupId // cn.rtast.rob.event.raw.group/RawBotBeKickEvent.groupId|{}groupId[0]
        final fun <get-groupId>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawBotBeKickEvent.groupId.<get-groupId>|<get-groupId>(){}[0]
    final val operator // cn.rtast.rob.event.raw.group/RawBotBeKickEvent.operator|{}operator[0]
        final fun <get-operator>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawBotBeKickEvent.operator.<get-operator>|<get-operator>(){}[0]
    final val time // cn.rtast.rob.event.raw.group/RawBotBeKickEvent.time|{}time[0]
        final fun <get-time>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawBotBeKickEvent.time.<get-time>|<get-time>(){}[0]
    final val userId // cn.rtast.rob.event.raw.group/RawBotBeKickEvent.userId|{}userId[0]
        final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawBotBeKickEvent.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.group/RawBotBeKickEvent.component1|component1(){}[0]
    final fun component2(): kotlin/Long // cn.rtast.rob.event.raw.group/RawBotBeKickEvent.component2|component2(){}[0]
    final fun component3(): kotlin/Long // cn.rtast.rob.event.raw.group/RawBotBeKickEvent.component3|component3(){}[0]
    final fun component4(): kotlin/Long // cn.rtast.rob.event.raw.group/RawBotBeKickEvent.component4|component4(){}[0]
    final fun component5(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.group/RawBotBeKickEvent.component5|component5(){}[0]
    final fun copy(kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., cn.rtast.rob.onebot/OneBotAction = ...): cn.rtast.rob.event.raw.group/RawBotBeKickEvent // cn.rtast.rob.event.raw.group/RawBotBeKickEvent.copy|copy(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;cn.rtast.rob.onebot.OneBotAction){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/RawBotBeKickEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/RawBotBeKickEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/RawBotBeKickEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent { // cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent|null[0]
    constructor <init>(kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long, cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent.<init>|<init>(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;cn.rtast.rob.onebot.OneBotAction){}[0]

    final val action // cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent.action.<get-action>|<get-action>(){}[0]
    final val groupId // cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent.groupId|{}groupId[0]
        final fun <get-groupId>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent.groupId.<get-groupId>|<get-groupId>(){}[0]
    final val operator // cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent.operator|{}operator[0]
        final fun <get-operator>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent.operator.<get-operator>|<get-operator>(){}[0]
    final val time // cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent.time|{}time[0]
        final fun <get-time>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent.time.<get-time>|<get-time>(){}[0]
    final val userId // cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent.userId|{}userId[0]
        final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent.component1|component1(){}[0]
    final fun component2(): kotlin/Long // cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent.component2|component2(){}[0]
    final fun component3(): kotlin/Long // cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent.component3|component3(){}[0]
    final fun component4(): kotlin/Long // cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent.component4|component4(){}[0]
    final fun component5(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent.component5|component5(){}[0]
    final fun copy(kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., cn.rtast.rob.onebot/OneBotAction = ...): cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent // cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent.copy|copy(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;cn.rtast.rob.onebot.OneBotAction){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/RawGroupMemberLeaveEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent { // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent|null[0]
    constructor <init>(kotlin/Long, kotlin/Long, kotlin/String) // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent.<init>|<init>(kotlin.Long;kotlin.Long;kotlin.String){}[0]

    final val groupId // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent.groupId|{}groupId[0]
        final fun <get-groupId>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent.groupId.<get-groupId>|<get-groupId>(){}[0]
    final val name // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent.name|{}name[0]
        final fun <get-name>(): kotlin/String // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent.name.<get-name>|<get-name>(){}[0]
    final val selfId // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent.selfId|{}selfId[0]
        final fun <get-selfId>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent.selfId.<get-selfId>|<get-selfId>(){}[0]

    final var action // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent.action.<get-action>|<get-action>(){}[0]
        final fun <set-action>(cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent.action.<set-action>|<set-action>(cn.rtast.rob.onebot.OneBotAction){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent.component1|component1(){}[0]
    final fun component2(): kotlin/Long // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent.component2|component2(){}[0]
    final fun component3(): kotlin/String // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent.component3|component3(){}[0]
    final fun copy(kotlin/Long = ..., kotlin/Long = ..., kotlin/String = ...): cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent.copy|copy(kotlin.Long;kotlin.Long;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent> { // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent) // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.RawGroupNameChangeEvent){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent> // cn.rtast.rob.event.raw.group/RawGroupNameChangeEvent.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent { // cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent|null[0]
    constructor <init>(kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long, cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent.<init>|<init>(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;cn.rtast.rob.onebot.OneBotAction){}[0]

    final val action // cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent.action.<get-action>|<get-action>(){}[0]
    final val groupId // cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent.groupId|{}groupId[0]
        final fun <get-groupId>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent.groupId.<get-groupId>|<get-groupId>(){}[0]
    final val operator // cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent.operator|{}operator[0]
        final fun <get-operator>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent.operator.<get-operator>|<get-operator>(){}[0]
    final val time // cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent.time|{}time[0]
        final fun <get-time>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent.time.<get-time>|<get-time>(){}[0]
    final val userId // cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent.userId|{}userId[0]
        final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent.component1|component1(){}[0]
    final fun component2(): kotlin/Long // cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent.component2|component2(){}[0]
    final fun component3(): kotlin/Long // cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent.component3|component3(){}[0]
    final fun component4(): kotlin/Long // cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent.component4|component4(){}[0]
    final fun component5(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent.component5|component5(){}[0]
    final fun copy(kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., cn.rtast.rob.onebot/OneBotAction = ...): cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent // cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent.copy|copy(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;cn.rtast.rob.onebot.OneBotAction){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/RawJoinRequestApproveEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent { // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent|null[0]
    constructor <init>(kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long) // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.<init>|<init>(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long){}[0]

    final val groupId // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.groupId|{}groupId[0]
        final fun <get-groupId>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.groupId.<get-groupId>|<get-groupId>(){}[0]
    final val operator // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.operator|{}operator[0]
        final fun <get-operator>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.operator.<get-operator>|<get-operator>(){}[0]
    final val time // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.time|{}time[0]
        final fun <get-time>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.time.<get-time>|<get-time>(){}[0]
    final val userId // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.userId|{}userId[0]
        final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.userId.<get-userId>|<get-userId>(){}[0]

    final var action // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.action.<get-action>|<get-action>(){}[0]
        final fun <set-action>(cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.action.<set-action>|<set-action>(cn.rtast.rob.onebot.OneBotAction){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.component1|component1(){}[0]
    final fun component2(): kotlin/Long // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.component2|component2(){}[0]
    final fun component3(): kotlin/Long // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.component3|component3(){}[0]
    final fun component4(): kotlin/Long // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.component4|component4(){}[0]
    final fun copy(kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ...): cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.copy|copy(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent> { // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent) // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.RawMemberBeInviteEvent){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent> // cn.rtast.rob.event.raw.group/RawMemberBeInviteEvent.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.group/RawMemberKickEvent { // cn.rtast.rob.event.raw.group/RawMemberKickEvent|null[0]
    constructor <init>(kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long, cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.group/RawMemberKickEvent.<init>|<init>(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;cn.rtast.rob.onebot.OneBotAction){}[0]

    final val action // cn.rtast.rob.event.raw.group/RawMemberKickEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.group/RawMemberKickEvent.action.<get-action>|<get-action>(){}[0]
    final val groupId // cn.rtast.rob.event.raw.group/RawMemberKickEvent.groupId|{}groupId[0]
        final fun <get-groupId>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawMemberKickEvent.groupId.<get-groupId>|<get-groupId>(){}[0]
    final val operator // cn.rtast.rob.event.raw.group/RawMemberKickEvent.operator|{}operator[0]
        final fun <get-operator>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawMemberKickEvent.operator.<get-operator>|<get-operator>(){}[0]
    final val time // cn.rtast.rob.event.raw.group/RawMemberKickEvent.time|{}time[0]
        final fun <get-time>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawMemberKickEvent.time.<get-time>|<get-time>(){}[0]
    final val userId // cn.rtast.rob.event.raw.group/RawMemberKickEvent.userId|{}userId[0]
        final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawMemberKickEvent.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.group/RawMemberKickEvent.component1|component1(){}[0]
    final fun component2(): kotlin/Long // cn.rtast.rob.event.raw.group/RawMemberKickEvent.component2|component2(){}[0]
    final fun component3(): kotlin/Long // cn.rtast.rob.event.raw.group/RawMemberKickEvent.component3|component3(){}[0]
    final fun component4(): kotlin/Long // cn.rtast.rob.event.raw.group/RawMemberKickEvent.component4|component4(){}[0]
    final fun component5(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.group/RawMemberKickEvent.component5|component5(){}[0]
    final fun copy(kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., cn.rtast.rob.onebot/OneBotAction = ...): cn.rtast.rob.event.raw.group/RawMemberKickEvent // cn.rtast.rob.event.raw.group/RawMemberKickEvent.copy|copy(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;cn.rtast.rob.onebot.OneBotAction){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/RawMemberKickEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/RawMemberKickEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/RawMemberKickEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.raw.group/RawPardonBanEvent { // cn.rtast.rob.event.raw.group/RawPardonBanEvent|null[0]
    constructor <init>(kotlin/Long, kotlin/Long, kotlin/Int, kotlin/Long, kotlin/Long, cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.group/RawPardonBanEvent.<init>|<init>(kotlin.Long;kotlin.Long;kotlin.Int;kotlin.Long;kotlin.Long;cn.rtast.rob.onebot.OneBotAction){}[0]

    final val action // cn.rtast.rob.event.raw.group/RawPardonBanEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.group/RawPardonBanEvent.action.<get-action>|<get-action>(){}[0]
    final val duration // cn.rtast.rob.event.raw.group/RawPardonBanEvent.duration|{}duration[0]
        final fun <get-duration>(): kotlin/Int // cn.rtast.rob.event.raw.group/RawPardonBanEvent.duration.<get-duration>|<get-duration>(){}[0]
    final val groupId // cn.rtast.rob.event.raw.group/RawPardonBanEvent.groupId|{}groupId[0]
        final fun <get-groupId>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawPardonBanEvent.groupId.<get-groupId>|<get-groupId>(){}[0]
    final val operator // cn.rtast.rob.event.raw.group/RawPardonBanEvent.operator|{}operator[0]
        final fun <get-operator>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawPardonBanEvent.operator.<get-operator>|<get-operator>(){}[0]
    final val time // cn.rtast.rob.event.raw.group/RawPardonBanEvent.time|{}time[0]
        final fun <get-time>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawPardonBanEvent.time.<get-time>|<get-time>(){}[0]
    final val userId // cn.rtast.rob.event.raw.group/RawPardonBanEvent.userId|{}userId[0]
        final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawPardonBanEvent.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.group/RawPardonBanEvent.component1|component1(){}[0]
    final fun component2(): kotlin/Long // cn.rtast.rob.event.raw.group/RawPardonBanEvent.component2|component2(){}[0]
    final fun component3(): kotlin/Int // cn.rtast.rob.event.raw.group/RawPardonBanEvent.component3|component3(){}[0]
    final fun component4(): kotlin/Long // cn.rtast.rob.event.raw.group/RawPardonBanEvent.component4|component4(){}[0]
    final fun component5(): kotlin/Long // cn.rtast.rob.event.raw.group/RawPardonBanEvent.component5|component5(){}[0]
    final fun component6(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.group/RawPardonBanEvent.component6|component6(){}[0]
    final fun copy(kotlin/Long = ..., kotlin/Long = ..., kotlin/Int = ..., kotlin/Long = ..., kotlin/Long = ..., cn.rtast.rob.onebot/OneBotAction = ...): cn.rtast.rob.event.raw.group/RawPardonBanEvent // cn.rtast.rob.event.raw.group/RawPardonBanEvent.copy|copy(kotlin.Long;kotlin.Long;kotlin.Int;kotlin.Long;kotlin.Long;cn.rtast.rob.onebot.OneBotAction){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/RawPardonBanEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/RawPardonBanEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/RawPardonBanEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.raw.group/RawPokeEvent { // cn.rtast.rob.event.raw.group/RawPokeEvent|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/String, kotlin/Long, kotlin/Long, kotlin/Long?) // cn.rtast.rob.event.raw.group/RawPokeEvent.<init>|<init>(kotlin.String;kotlin.String;kotlin.String;kotlin.Long;kotlin.Long;kotlin.Long?){}[0]

    final val actionImgUrl // cn.rtast.rob.event.raw.group/RawPokeEvent.actionImgUrl|{}actionImgUrl[0]
        final fun <get-actionImgUrl>(): kotlin/String // cn.rtast.rob.event.raw.group/RawPokeEvent.actionImgUrl.<get-actionImgUrl>|<get-actionImgUrl>(){}[0]
    final val groupId // cn.rtast.rob.event.raw.group/RawPokeEvent.groupId|{}groupId[0]
        final fun <get-groupId>(): kotlin/Long? // cn.rtast.rob.event.raw.group/RawPokeEvent.groupId.<get-groupId>|<get-groupId>(){}[0]
    final val pokeAction // cn.rtast.rob.event.raw.group/RawPokeEvent.pokeAction|{}pokeAction[0]
        final fun <get-pokeAction>(): kotlin/String // cn.rtast.rob.event.raw.group/RawPokeEvent.pokeAction.<get-pokeAction>|<get-pokeAction>(){}[0]
    final val suffix // cn.rtast.rob.event.raw.group/RawPokeEvent.suffix|{}suffix[0]
        final fun <get-suffix>(): kotlin/String // cn.rtast.rob.event.raw.group/RawPokeEvent.suffix.<get-suffix>|<get-suffix>(){}[0]
    final val targetId // cn.rtast.rob.event.raw.group/RawPokeEvent.targetId|{}targetId[0]
        final fun <get-targetId>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawPokeEvent.targetId.<get-targetId>|<get-targetId>(){}[0]
    final val userId // cn.rtast.rob.event.raw.group/RawPokeEvent.userId|{}userId[0]
        final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawPokeEvent.userId.<get-userId>|<get-userId>(){}[0]

    final var action // cn.rtast.rob.event.raw.group/RawPokeEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.group/RawPokeEvent.action.<get-action>|<get-action>(){}[0]
        final fun <set-action>(cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.group/RawPokeEvent.action.<set-action>|<set-action>(cn.rtast.rob.onebot.OneBotAction){}[0]

    final fun component1(): kotlin/String // cn.rtast.rob.event.raw.group/RawPokeEvent.component1|component1(){}[0]
    final fun component2(): kotlin/String // cn.rtast.rob.event.raw.group/RawPokeEvent.component2|component2(){}[0]
    final fun component3(): kotlin/String // cn.rtast.rob.event.raw.group/RawPokeEvent.component3|component3(){}[0]
    final fun component4(): kotlin/Long // cn.rtast.rob.event.raw.group/RawPokeEvent.component4|component4(){}[0]
    final fun component5(): kotlin/Long // cn.rtast.rob.event.raw.group/RawPokeEvent.component5|component5(){}[0]
    final fun component6(): kotlin/Long? // cn.rtast.rob.event.raw.group/RawPokeEvent.component6|component6(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long? = ...): cn.rtast.rob.event.raw.group/RawPokeEvent // cn.rtast.rob.event.raw.group/RawPokeEvent.copy|copy(kotlin.String;kotlin.String;kotlin.String;kotlin.Long;kotlin.Long;kotlin.Long?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/RawPokeEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/RawPokeEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/RawPokeEvent.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/RawPokeEvent> { // cn.rtast.rob.event.raw.group/RawPokeEvent.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.group/RawPokeEvent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/RawPokeEvent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/RawPokeEvent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/RawPokeEvent // cn.rtast.rob.event.raw.group/RawPokeEvent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/RawPokeEvent) // cn.rtast.rob.event.raw.group/RawPokeEvent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.RawPokeEvent){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.group/RawPokeEvent.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/RawPokeEvent> // cn.rtast.rob.event.raw.group/RawPokeEvent.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.group/RawSetOperatorEvent { // cn.rtast.rob.event.raw.group/RawSetOperatorEvent|null[0]
    constructor <init>(kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long, cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.group/RawSetOperatorEvent.<init>|<init>(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;cn.rtast.rob.onebot.OneBotAction){}[0]

    final val action // cn.rtast.rob.event.raw.group/RawSetOperatorEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.group/RawSetOperatorEvent.action.<get-action>|<get-action>(){}[0]
    final val groupId // cn.rtast.rob.event.raw.group/RawSetOperatorEvent.groupId|{}groupId[0]
        final fun <get-groupId>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawSetOperatorEvent.groupId.<get-groupId>|<get-groupId>(){}[0]
    final val operator // cn.rtast.rob.event.raw.group/RawSetOperatorEvent.operator|{}operator[0]
        final fun <get-operator>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawSetOperatorEvent.operator.<get-operator>|<get-operator>(){}[0]
    final val time // cn.rtast.rob.event.raw.group/RawSetOperatorEvent.time|{}time[0]
        final fun <get-time>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawSetOperatorEvent.time.<get-time>|<get-time>(){}[0]
    final val userId // cn.rtast.rob.event.raw.group/RawSetOperatorEvent.userId|{}userId[0]
        final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawSetOperatorEvent.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.group/RawSetOperatorEvent.component1|component1(){}[0]
    final fun component2(): kotlin/Long // cn.rtast.rob.event.raw.group/RawSetOperatorEvent.component2|component2(){}[0]
    final fun component3(): kotlin/Long // cn.rtast.rob.event.raw.group/RawSetOperatorEvent.component3|component3(){}[0]
    final fun component4(): kotlin/Long // cn.rtast.rob.event.raw.group/RawSetOperatorEvent.component4|component4(){}[0]
    final fun component5(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.group/RawSetOperatorEvent.component5|component5(){}[0]
    final fun copy(kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., cn.rtast.rob.onebot/OneBotAction = ...): cn.rtast.rob.event.raw.group/RawSetOperatorEvent // cn.rtast.rob.event.raw.group/RawSetOperatorEvent.copy|copy(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;cn.rtast.rob.onebot.OneBotAction){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/RawSetOperatorEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/RawSetOperatorEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/RawSetOperatorEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent { // cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent|null[0]
    constructor <init>(kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long, cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent.<init>|<init>(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;cn.rtast.rob.onebot.OneBotAction){}[0]

    final val action // cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent.action.<get-action>|<get-action>(){}[0]
    final val groupId // cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent.groupId|{}groupId[0]
        final fun <get-groupId>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent.groupId.<get-groupId>|<get-groupId>(){}[0]
    final val operator // cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent.operator|{}operator[0]
        final fun <get-operator>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent.operator.<get-operator>|<get-operator>(){}[0]
    final val time // cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent.time|{}time[0]
        final fun <get-time>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent.time.<get-time>|<get-time>(){}[0]
    final val userId // cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent.userId|{}userId[0]
        final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent.userId.<get-userId>|<get-userId>(){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent.component1|component1(){}[0]
    final fun component2(): kotlin/Long // cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent.component2|component2(){}[0]
    final fun component3(): kotlin/Long // cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent.component3|component3(){}[0]
    final fun component4(): kotlin/Long // cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent.component4|component4(){}[0]
    final fun component5(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent.component5|component5(){}[0]
    final fun copy(kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., cn.rtast.rob.onebot/OneBotAction = ...): cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent // cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent.copy|copy(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;cn.rtast.rob.onebot.OneBotAction){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/RawUnsetOperatorEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.raw.group/ReactionEvent { // cn.rtast.rob.event.raw.group/ReactionEvent|null[0]
    constructor <init>(kotlin/Long, kotlin/Long, kotlin/Int, kotlin/Long, kotlin/Long, kotlin/String) // cn.rtast.rob.event.raw.group/ReactionEvent.<init>|<init>(kotlin.Long;kotlin.Long;kotlin.Int;kotlin.Long;kotlin.Long;kotlin.String){}[0]

    final val code // cn.rtast.rob.event.raw.group/ReactionEvent.code|{}code[0]
        final fun <get-code>(): kotlin/String // cn.rtast.rob.event.raw.group/ReactionEvent.code.<get-code>|<get-code>(){}[0]
    final val count // cn.rtast.rob.event.raw.group/ReactionEvent.count|{}count[0]
        final fun <get-count>(): kotlin/Int // cn.rtast.rob.event.raw.group/ReactionEvent.count.<get-count>|<get-count>(){}[0]
    final val groupId // cn.rtast.rob.event.raw.group/ReactionEvent.groupId|{}groupId[0]
        final fun <get-groupId>(): kotlin/Long // cn.rtast.rob.event.raw.group/ReactionEvent.groupId.<get-groupId>|<get-groupId>(){}[0]
    final val messageId // cn.rtast.rob.event.raw.group/ReactionEvent.messageId|{}messageId[0]
        final fun <get-messageId>(): kotlin/Long // cn.rtast.rob.event.raw.group/ReactionEvent.messageId.<get-messageId>|<get-messageId>(){}[0]
    final val operatorId // cn.rtast.rob.event.raw.group/ReactionEvent.operatorId|{}operatorId[0]
        final fun <get-operatorId>(): kotlin/Long // cn.rtast.rob.event.raw.group/ReactionEvent.operatorId.<get-operatorId>|<get-operatorId>(){}[0]
    final val selfId // cn.rtast.rob.event.raw.group/ReactionEvent.selfId|{}selfId[0]
        final fun <get-selfId>(): kotlin/Long // cn.rtast.rob.event.raw.group/ReactionEvent.selfId.<get-selfId>|<get-selfId>(){}[0]

    final var action // cn.rtast.rob.event.raw.group/ReactionEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.group/ReactionEvent.action.<get-action>|<get-action>(){}[0]
        final fun <set-action>(cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.group/ReactionEvent.action.<set-action>|<set-action>(cn.rtast.rob.onebot.OneBotAction){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.group/ReactionEvent.component1|component1(){}[0]
    final fun component2(): kotlin/Long // cn.rtast.rob.event.raw.group/ReactionEvent.component2|component2(){}[0]
    final fun component3(): kotlin/Int // cn.rtast.rob.event.raw.group/ReactionEvent.component3|component3(){}[0]
    final fun component4(): kotlin/Long // cn.rtast.rob.event.raw.group/ReactionEvent.component4|component4(){}[0]
    final fun component5(): kotlin/Long // cn.rtast.rob.event.raw.group/ReactionEvent.component5|component5(){}[0]
    final fun component6(): kotlin/String // cn.rtast.rob.event.raw.group/ReactionEvent.component6|component6(){}[0]
    final fun copy(kotlin/Long = ..., kotlin/Long = ..., kotlin/Int = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/String = ...): cn.rtast.rob.event.raw.group/ReactionEvent // cn.rtast.rob.event.raw.group/ReactionEvent.copy|copy(kotlin.Long;kotlin.Long;kotlin.Int;kotlin.Long;kotlin.Long;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.group/ReactionEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.group/ReactionEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.group/ReactionEvent.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.group/ReactionEvent> { // cn.rtast.rob.event.raw.group/ReactionEvent.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.group/ReactionEvent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.group/ReactionEvent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.group/ReactionEvent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.group/ReactionEvent // cn.rtast.rob.event.raw.group/ReactionEvent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.group/ReactionEvent) // cn.rtast.rob.event.raw.group/ReactionEvent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.group.ReactionEvent){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.group/ReactionEvent.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.group/ReactionEvent> // cn.rtast.rob.event.raw.group/ReactionEvent.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.info/CustomFace { // cn.rtast.rob.event.raw.info/CustomFace|null[0]
    constructor <init>(kotlin.collections/List<kotlin/String>) // cn.rtast.rob.event.raw.info/CustomFace.<init>|<init>(kotlin.collections.List<kotlin.String>){}[0]

    final val data // cn.rtast.rob.event.raw.info/CustomFace.data|{}data[0]
        final fun <get-data>(): kotlin.collections/List<kotlin/String> // cn.rtast.rob.event.raw.info/CustomFace.data.<get-data>|<get-data>(){}[0]

    final fun component1(): kotlin.collections/List<kotlin/String> // cn.rtast.rob.event.raw.info/CustomFace.component1|component1(){}[0]
    final fun copy(kotlin.collections/List<kotlin/String> = ...): cn.rtast.rob.event.raw.info/CustomFace // cn.rtast.rob.event.raw.info/CustomFace.copy|copy(kotlin.collections.List<kotlin.String>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.info/CustomFace.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.info/CustomFace.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.info/CustomFace.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.info/CustomFace> { // cn.rtast.rob.event.raw.info/CustomFace.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.info/CustomFace.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.info/CustomFace.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.info/CustomFace.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.info/CustomFace // cn.rtast.rob.event.raw.info/CustomFace.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.info/CustomFace) // cn.rtast.rob.event.raw.info/CustomFace.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.info.CustomFace){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.info/CustomFace.Companion|null[0]
        final val $childSerializers // cn.rtast.rob.event.raw.info/CustomFace.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.info/CustomFace> // cn.rtast.rob.event.raw.info/CustomFace.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.info/GetProfileLike { // cn.rtast.rob.event.raw.info/GetProfileLike|null[0]
    constructor <init>(cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike) // cn.rtast.rob.event.raw.info/GetProfileLike.<init>|<init>(cn.rtast.rob.event.raw.info.GetProfileLike.ProfileLike){}[0]

    final val data // cn.rtast.rob.event.raw.info/GetProfileLike.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike // cn.rtast.rob.event.raw.info/GetProfileLike.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike // cn.rtast.rob.event.raw.info/GetProfileLike.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike = ...): cn.rtast.rob.event.raw.info/GetProfileLike // cn.rtast.rob.event.raw.info/GetProfileLike.copy|copy(cn.rtast.rob.event.raw.info.GetProfileLike.ProfileLike){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.info/GetProfileLike.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.info/GetProfileLike.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.info/GetProfileLike.toString|toString(){}[0]

    final class ProfileLike { // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike|null[0]
        constructor <init>(kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long, kotlin.collections/List<cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo>) // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.<init>|<init>(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.collections.List<cn.rtast.rob.event.raw.info.GetProfileLike.UserInfo>){}[0]

        final val lastVisitTime // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.lastVisitTime|{}lastVisitTime[0]
            final fun <get-lastVisitTime>(): kotlin/Long // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.lastVisitTime.<get-lastVisitTime>|<get-lastVisitTime>(){}[0]
        final val newCount // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.newCount|{}newCount[0]
            final fun <get-newCount>(): kotlin/Long // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.newCount.<get-newCount>|<get-newCount>(){}[0]
        final val newNearbyCount // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.newNearbyCount|{}newNearbyCount[0]
            final fun <get-newNearbyCount>(): kotlin/Long // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.newNearbyCount.<get-newNearbyCount>|<get-newNearbyCount>(){}[0]
        final val totalCount // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.totalCount|{}totalCount[0]
            final fun <get-totalCount>(): kotlin/Long // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.totalCount.<get-totalCount>|<get-totalCount>(){}[0]
        final val userInfos // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.userInfos|{}userInfos[0]
            final fun <get-userInfos>(): kotlin.collections/List<cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo> // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.userInfos.<get-userInfos>|<get-userInfos>(){}[0]

        final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.component1|component1(){}[0]
        final fun component2(): kotlin/Long // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.component2|component2(){}[0]
        final fun component3(): kotlin/Long // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.component3|component3(){}[0]
        final fun component4(): kotlin/Long // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.component4|component4(){}[0]
        final fun component5(): kotlin.collections/List<cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo> // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.component5|component5(){}[0]
        final fun copy(kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin.collections/List<cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo> = ...): cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.copy|copy(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.collections.List<cn.rtast.rob.event.raw.info.GetProfileLike.UserInfo>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike> { // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike) // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.info.GetProfileLike.ProfileLike){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.Companion|null[0]
            final val $childSerializers // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike> // cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike.Companion.serializer|serializer(){}[0]
        }
    }

    final class UserInfo { // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo|null[0]
        constructor <init>(kotlin/String, kotlin/Int, kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long, kotlin/String, kotlin/Int, kotlin/Int, kotlin/Boolean, kotlin/Boolean, kotlin/Boolean, kotlin/Long) // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.<init>|<init>(kotlin.String;kotlin.Int;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.String;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Long){}[0]

        final val age // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.age|{}age[0]
            final fun <get-age>(): kotlin/Int // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.age.<get-age>|<get-age>(){}[0]
        final val bAvailableCnt // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.bAvailableCnt|{}bAvailableCnt[0]
            final fun <get-bAvailableCnt>(): kotlin/Long // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.bAvailableCnt.<get-bAvailableCnt>|<get-bAvailableCnt>(){}[0]
        final val bTodayVotedCnt // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.bTodayVotedCnt|{}bTodayVotedCnt[0]
            final fun <get-bTodayVotedCnt>(): kotlin/Long // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.bTodayVotedCnt.<get-bTodayVotedCnt>|<get-bTodayVotedCnt>(){}[0]
        final val count // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.count|{}count[0]
            final fun <get-count>(): kotlin/Long // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.count.<get-count>|<get-count>(){}[0]
        final val customId // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.customId|{}customId[0]
            final fun <get-customId>(): kotlin/Long // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.customId.<get-customId>|<get-customId>(){}[0]
        final val gender // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.gender|{}gender[0]
            final fun <get-gender>(): kotlin/Int // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.gender.<get-gender>|<get-gender>(){}[0]
        final val isFriend // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.isFriend|{}isFriend[0]
            final fun <get-isFriend>(): kotlin/Boolean // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.isFriend.<get-isFriend>|<get-isFriend>(){}[0]
        final val isSVip // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.isSVip|{}isSVip[0]
            final fun <get-isSVip>(): kotlin/Boolean // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.isSVip.<get-isSVip>|<get-isSVip>(){}[0]
        final val isVip // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.isVip|{}isVip[0]
            final fun <get-isVip>(): kotlin/Boolean // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.isVip.<get-isVip>|<get-isVip>(){}[0]
        final val lastCharged // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.lastCharged|{}lastCharged[0]
            final fun <get-lastCharged>(): kotlin/Long // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.lastCharged.<get-lastCharged>|<get-lastCharged>(){}[0]
        final val latestTime // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.latestTime|{}latestTime[0]
            final fun <get-latestTime>(): kotlin/Long // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.latestTime.<get-latestTime>|<get-latestTime>(){}[0]
        final val nick // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.nick|{}nick[0]
            final fun <get-nick>(): kotlin/String // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.nick.<get-nick>|<get-nick>(){}[0]
        final val src // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.src|{}src[0]
            final fun <get-src>(): kotlin/Int // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.src.<get-src>|<get-src>(){}[0]
        final val uid // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.uid|{}uid[0]
            final fun <get-uid>(): kotlin/String // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.uid.<get-uid>|<get-uid>(){}[0]
        final val uin // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.uin|{}uin[0]
            final fun <get-uin>(): kotlin/Long // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.uin.<get-uin>|<get-uin>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.component1|component1(){}[0]
        final fun component10(): kotlin/Int // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.component10|component10(){}[0]
        final fun component11(): kotlin/Int // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.component11|component11(){}[0]
        final fun component12(): kotlin/Boolean // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.component12|component12(){}[0]
        final fun component13(): kotlin/Boolean // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.component13|component13(){}[0]
        final fun component14(): kotlin/Boolean // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.component14|component14(){}[0]
        final fun component15(): kotlin/Long // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.component15|component15(){}[0]
        final fun component2(): kotlin/Int // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.component2|component2(){}[0]
        final fun component3(): kotlin/Long // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.component3|component3(){}[0]
        final fun component4(): kotlin/Long // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.component4|component4(){}[0]
        final fun component5(): kotlin/Long // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.component5|component5(){}[0]
        final fun component6(): kotlin/Long // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.component6|component6(){}[0]
        final fun component7(): kotlin/Long // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.component7|component7(){}[0]
        final fun component8(): kotlin/Long // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.component8|component8(){}[0]
        final fun component9(): kotlin/String // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.component9|component9(){}[0]
        final fun copy(kotlin/String = ..., kotlin/Int = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/String = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Long = ...): cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.copy|copy(kotlin.String;kotlin.Int;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long;kotlin.String;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Long){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo> { // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo) // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.info.GetProfileLike.UserInfo){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo> // cn.rtast.rob.event.raw.info/GetProfileLike.UserInfo.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.info/GetProfileLike> { // cn.rtast.rob.event.raw.info/GetProfileLike.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.info/GetProfileLike.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.info/GetProfileLike.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.info/GetProfileLike.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.info/GetProfileLike // cn.rtast.rob.event.raw.info/GetProfileLike.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.info/GetProfileLike) // cn.rtast.rob.event.raw.info/GetProfileLike.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.info.GetProfileLike){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.info/GetProfileLike.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.info/GetProfileLike> // cn.rtast.rob.event.raw.info/GetProfileLike.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.info/LoginInfo { // cn.rtast.rob.event.raw.info/LoginInfo|null[0]
    constructor <init>(cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo) // cn.rtast.rob.event.raw.info/LoginInfo.<init>|<init>(cn.rtast.rob.event.raw.info.LoginInfo.LoginInfo){}[0]

    final val data // cn.rtast.rob.event.raw.info/LoginInfo.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo // cn.rtast.rob.event.raw.info/LoginInfo.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo // cn.rtast.rob.event.raw.info/LoginInfo.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo = ...): cn.rtast.rob.event.raw.info/LoginInfo // cn.rtast.rob.event.raw.info/LoginInfo.copy|copy(cn.rtast.rob.event.raw.info.LoginInfo.LoginInfo){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.info/LoginInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.info/LoginInfo.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.info/LoginInfo.toString|toString(){}[0]

    final class LoginInfo { // cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo|null[0]
        constructor <init>(kotlin/Long, kotlin/String) // cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo.<init>|<init>(kotlin.Long;kotlin.String){}[0]

        final val nickname // cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo.nickname|{}nickname[0]
            final fun <get-nickname>(): kotlin/String // cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo.nickname.<get-nickname>|<get-nickname>(){}[0]
        final val userId // cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo.userId|{}userId[0]
            final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo.userId.<get-userId>|<get-userId>(){}[0]

        final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo.component2|component2(){}[0]
        final fun copy(kotlin/Long = ..., kotlin/String = ...): cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo // cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo.copy|copy(kotlin.Long;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo> { // cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo // cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo) // cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.info.LoginInfo.LoginInfo){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo> // cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.info/LoginInfo> { // cn.rtast.rob.event.raw.info/LoginInfo.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.info/LoginInfo.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.info/LoginInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.info/LoginInfo.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.info/LoginInfo // cn.rtast.rob.event.raw.info/LoginInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.info/LoginInfo) // cn.rtast.rob.event.raw.info/LoginInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.info.LoginInfo){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.info/LoginInfo.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.info/LoginInfo> // cn.rtast.rob.event.raw.info/LoginInfo.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.info/OCRImage { // cn.rtast.rob.event.raw.info/OCRImage|null[0]
    constructor <init>(cn.rtast.rob.event.raw.info/OCRImage.ORCResult) // cn.rtast.rob.event.raw.info/OCRImage.<init>|<init>(cn.rtast.rob.event.raw.info.OCRImage.ORCResult){}[0]

    final val data // cn.rtast.rob.event.raw.info/OCRImage.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.info/OCRImage.ORCResult // cn.rtast.rob.event.raw.info/OCRImage.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.info/OCRImage.ORCResult // cn.rtast.rob.event.raw.info/OCRImage.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.info/OCRImage.ORCResult = ...): cn.rtast.rob.event.raw.info/OCRImage // cn.rtast.rob.event.raw.info/OCRImage.copy|copy(cn.rtast.rob.event.raw.info.OCRImage.ORCResult){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.info/OCRImage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.info/OCRImage.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.info/OCRImage.toString|toString(){}[0]

    final class Coordinate { // cn.rtast.rob.event.raw.info/OCRImage.Coordinate|null[0]
        constructor <init>(kotlin/Int, kotlin/Int) // cn.rtast.rob.event.raw.info/OCRImage.Coordinate.<init>|<init>(kotlin.Int;kotlin.Int){}[0]

        final val x // cn.rtast.rob.event.raw.info/OCRImage.Coordinate.x|{}x[0]
            final fun <get-x>(): kotlin/Int // cn.rtast.rob.event.raw.info/OCRImage.Coordinate.x.<get-x>|<get-x>(){}[0]
        final val y // cn.rtast.rob.event.raw.info/OCRImage.Coordinate.y|{}y[0]
            final fun <get-y>(): kotlin/Int // cn.rtast.rob.event.raw.info/OCRImage.Coordinate.y.<get-y>|<get-y>(){}[0]

        final fun component1(): kotlin/Int // cn.rtast.rob.event.raw.info/OCRImage.Coordinate.component1|component1(){}[0]
        final fun component2(): kotlin/Int // cn.rtast.rob.event.raw.info/OCRImage.Coordinate.component2|component2(){}[0]
        final fun copy(kotlin/Int = ..., kotlin/Int = ...): cn.rtast.rob.event.raw.info/OCRImage.Coordinate // cn.rtast.rob.event.raw.info/OCRImage.Coordinate.copy|copy(kotlin.Int;kotlin.Int){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.info/OCRImage.Coordinate.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.info/OCRImage.Coordinate.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.info/OCRImage.Coordinate.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.info/OCRImage.Coordinate> { // cn.rtast.rob.event.raw.info/OCRImage.Coordinate.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.info/OCRImage.Coordinate.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.info/OCRImage.Coordinate.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.info/OCRImage.Coordinate.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.info/OCRImage.Coordinate // cn.rtast.rob.event.raw.info/OCRImage.Coordinate.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.info/OCRImage.Coordinate) // cn.rtast.rob.event.raw.info/OCRImage.Coordinate.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.info.OCRImage.Coordinate){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.info/OCRImage.Coordinate.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.info/OCRImage.Coordinate> // cn.rtast.rob.event.raw.info/OCRImage.Coordinate.Companion.serializer|serializer(){}[0]
        }
    }

    final class ORCResult { // cn.rtast.rob.event.raw.info/OCRImage.ORCResult|null[0]
        constructor <init>(kotlin/String, kotlin.collections/List<cn.rtast.rob.event.raw.info/OCRImage.Text>) // cn.rtast.rob.event.raw.info/OCRImage.ORCResult.<init>|<init>(kotlin.String;kotlin.collections.List<cn.rtast.rob.event.raw.info.OCRImage.Text>){}[0]

        final val language // cn.rtast.rob.event.raw.info/OCRImage.ORCResult.language|{}language[0]
            final fun <get-language>(): kotlin/String // cn.rtast.rob.event.raw.info/OCRImage.ORCResult.language.<get-language>|<get-language>(){}[0]
        final val texts // cn.rtast.rob.event.raw.info/OCRImage.ORCResult.texts|{}texts[0]
            final fun <get-texts>(): kotlin.collections/List<cn.rtast.rob.event.raw.info/OCRImage.Text> // cn.rtast.rob.event.raw.info/OCRImage.ORCResult.texts.<get-texts>|<get-texts>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.event.raw.info/OCRImage.ORCResult.component1|component1(){}[0]
        final fun component2(): kotlin.collections/List<cn.rtast.rob.event.raw.info/OCRImage.Text> // cn.rtast.rob.event.raw.info/OCRImage.ORCResult.component2|component2(){}[0]
        final fun copy(kotlin/String = ..., kotlin.collections/List<cn.rtast.rob.event.raw.info/OCRImage.Text> = ...): cn.rtast.rob.event.raw.info/OCRImage.ORCResult // cn.rtast.rob.event.raw.info/OCRImage.ORCResult.copy|copy(kotlin.String;kotlin.collections.List<cn.rtast.rob.event.raw.info.OCRImage.Text>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.info/OCRImage.ORCResult.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.info/OCRImage.ORCResult.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.info/OCRImage.ORCResult.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.info/OCRImage.ORCResult> { // cn.rtast.rob.event.raw.info/OCRImage.ORCResult.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.info/OCRImage.ORCResult.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.info/OCRImage.ORCResult.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.info/OCRImage.ORCResult.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.info/OCRImage.ORCResult // cn.rtast.rob.event.raw.info/OCRImage.ORCResult.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.info/OCRImage.ORCResult) // cn.rtast.rob.event.raw.info/OCRImage.ORCResult.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.info.OCRImage.ORCResult){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.info/OCRImage.ORCResult.Companion|null[0]
            final val $childSerializers // cn.rtast.rob.event.raw.info/OCRImage.ORCResult.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.info/OCRImage.ORCResult> // cn.rtast.rob.event.raw.info/OCRImage.ORCResult.Companion.serializer|serializer(){}[0]
        }
    }

    final class Text { // cn.rtast.rob.event.raw.info/OCRImage.Text|null[0]
        constructor <init>(kotlin/Int, kotlin.collections/List<cn.rtast.rob.event.raw.info/OCRImage.Coordinate>, kotlin/String) // cn.rtast.rob.event.raw.info/OCRImage.Text.<init>|<init>(kotlin.Int;kotlin.collections.List<cn.rtast.rob.event.raw.info.OCRImage.Coordinate>;kotlin.String){}[0]

        final val confidence // cn.rtast.rob.event.raw.info/OCRImage.Text.confidence|{}confidence[0]
            final fun <get-confidence>(): kotlin/Int // cn.rtast.rob.event.raw.info/OCRImage.Text.confidence.<get-confidence>|<get-confidence>(){}[0]
        final val coordinates // cn.rtast.rob.event.raw.info/OCRImage.Text.coordinates|{}coordinates[0]
            final fun <get-coordinates>(): kotlin.collections/List<cn.rtast.rob.event.raw.info/OCRImage.Coordinate> // cn.rtast.rob.event.raw.info/OCRImage.Text.coordinates.<get-coordinates>|<get-coordinates>(){}[0]
        final val text // cn.rtast.rob.event.raw.info/OCRImage.Text.text|{}text[0]
            final fun <get-text>(): kotlin/String // cn.rtast.rob.event.raw.info/OCRImage.Text.text.<get-text>|<get-text>(){}[0]

        final fun component1(): kotlin/Int // cn.rtast.rob.event.raw.info/OCRImage.Text.component1|component1(){}[0]
        final fun component2(): kotlin.collections/List<cn.rtast.rob.event.raw.info/OCRImage.Coordinate> // cn.rtast.rob.event.raw.info/OCRImage.Text.component2|component2(){}[0]
        final fun component3(): kotlin/String // cn.rtast.rob.event.raw.info/OCRImage.Text.component3|component3(){}[0]
        final fun copy(kotlin/Int = ..., kotlin.collections/List<cn.rtast.rob.event.raw.info/OCRImage.Coordinate> = ..., kotlin/String = ...): cn.rtast.rob.event.raw.info/OCRImage.Text // cn.rtast.rob.event.raw.info/OCRImage.Text.copy|copy(kotlin.Int;kotlin.collections.List<cn.rtast.rob.event.raw.info.OCRImage.Coordinate>;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.info/OCRImage.Text.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.info/OCRImage.Text.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.info/OCRImage.Text.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.info/OCRImage.Text> { // cn.rtast.rob.event.raw.info/OCRImage.Text.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.info/OCRImage.Text.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.info/OCRImage.Text.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.info/OCRImage.Text.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.info/OCRImage.Text // cn.rtast.rob.event.raw.info/OCRImage.Text.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.info/OCRImage.Text) // cn.rtast.rob.event.raw.info/OCRImage.Text.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.info.OCRImage.Text){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.info/OCRImage.Text.Companion|null[0]
            final val $childSerializers // cn.rtast.rob.event.raw.info/OCRImage.Text.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.info/OCRImage.Text> // cn.rtast.rob.event.raw.info/OCRImage.Text.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.info/OCRImage> { // cn.rtast.rob.event.raw.info/OCRImage.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.info/OCRImage.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.info/OCRImage.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.info/OCRImage.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.info/OCRImage // cn.rtast.rob.event.raw.info/OCRImage.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.info/OCRImage) // cn.rtast.rob.event.raw.info/OCRImage.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.info.OCRImage){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.info/OCRImage.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.info/OCRImage> // cn.rtast.rob.event.raw.info/OCRImage.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.info/RobotUinRange { // cn.rtast.rob.event.raw.info/RobotUinRange|null[0]
    constructor <init>(kotlin.collections/List<cn.rtast.rob.event.raw.info/RobotUinRange.UinRange>) // cn.rtast.rob.event.raw.info/RobotUinRange.<init>|<init>(kotlin.collections.List<cn.rtast.rob.event.raw.info.RobotUinRange.UinRange>){}[0]

    final val data // cn.rtast.rob.event.raw.info/RobotUinRange.data|{}data[0]
        final fun <get-data>(): kotlin.collections/List<cn.rtast.rob.event.raw.info/RobotUinRange.UinRange> // cn.rtast.rob.event.raw.info/RobotUinRange.data.<get-data>|<get-data>(){}[0]

    final fun component1(): kotlin.collections/List<cn.rtast.rob.event.raw.info/RobotUinRange.UinRange> // cn.rtast.rob.event.raw.info/RobotUinRange.component1|component1(){}[0]
    final fun copy(kotlin.collections/List<cn.rtast.rob.event.raw.info/RobotUinRange.UinRange> = ...): cn.rtast.rob.event.raw.info/RobotUinRange // cn.rtast.rob.event.raw.info/RobotUinRange.copy|copy(kotlin.collections.List<cn.rtast.rob.event.raw.info.RobotUinRange.UinRange>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.info/RobotUinRange.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.info/RobotUinRange.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.info/RobotUinRange.toString|toString(){}[0]

    final class UinRange { // cn.rtast.rob.event.raw.info/RobotUinRange.UinRange|null[0]
        constructor <init>(kotlin/String, kotlin/String) // cn.rtast.rob.event.raw.info/RobotUinRange.UinRange.<init>|<init>(kotlin.String;kotlin.String){}[0]

        final val maxUin // cn.rtast.rob.event.raw.info/RobotUinRange.UinRange.maxUin|{}maxUin[0]
            final fun <get-maxUin>(): kotlin/String // cn.rtast.rob.event.raw.info/RobotUinRange.UinRange.maxUin.<get-maxUin>|<get-maxUin>(){}[0]
        final val minUin // cn.rtast.rob.event.raw.info/RobotUinRange.UinRange.minUin|{}minUin[0]
            final fun <get-minUin>(): kotlin/String // cn.rtast.rob.event.raw.info/RobotUinRange.UinRange.minUin.<get-minUin>|<get-minUin>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.event.raw.info/RobotUinRange.UinRange.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.info/RobotUinRange.UinRange.component2|component2(){}[0]
        final fun copy(kotlin/String = ..., kotlin/String = ...): cn.rtast.rob.event.raw.info/RobotUinRange.UinRange // cn.rtast.rob.event.raw.info/RobotUinRange.UinRange.copy|copy(kotlin.String;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.info/RobotUinRange.UinRange.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.info/RobotUinRange.UinRange.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.info/RobotUinRange.UinRange.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.info/RobotUinRange.UinRange> { // cn.rtast.rob.event.raw.info/RobotUinRange.UinRange.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.info/RobotUinRange.UinRange.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.info/RobotUinRange.UinRange.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.info/RobotUinRange.UinRange.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.info/RobotUinRange.UinRange // cn.rtast.rob.event.raw.info/RobotUinRange.UinRange.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.info/RobotUinRange.UinRange) // cn.rtast.rob.event.raw.info/RobotUinRange.UinRange.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.info.RobotUinRange.UinRange){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.info/RobotUinRange.UinRange.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.info/RobotUinRange.UinRange> // cn.rtast.rob.event.raw.info/RobotUinRange.UinRange.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.info/RobotUinRange> { // cn.rtast.rob.event.raw.info/RobotUinRange.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.info/RobotUinRange.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.info/RobotUinRange.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.info/RobotUinRange.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.info/RobotUinRange // cn.rtast.rob.event.raw.info/RobotUinRange.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.info/RobotUinRange) // cn.rtast.rob.event.raw.info/RobotUinRange.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.info.RobotUinRange){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.info/RobotUinRange.Companion|null[0]
        final val $childSerializers // cn.rtast.rob.event.raw.info/RobotUinRange.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.info/RobotUinRange> // cn.rtast.rob.event.raw.info/RobotUinRange.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.info/StrangerInfo { // cn.rtast.rob.event.raw.info/StrangerInfo|null[0]
    constructor <init>(cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo) // cn.rtast.rob.event.raw.info/StrangerInfo.<init>|<init>(cn.rtast.rob.event.raw.info.StrangerInfo.StrangerInfo){}[0]

    final val data // cn.rtast.rob.event.raw.info/StrangerInfo.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo // cn.rtast.rob.event.raw.info/StrangerInfo.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo // cn.rtast.rob.event.raw.info/StrangerInfo.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo = ...): cn.rtast.rob.event.raw.info/StrangerInfo // cn.rtast.rob.event.raw.info/StrangerInfo.copy|copy(cn.rtast.rob.event.raw.info.StrangerInfo.StrangerInfo){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.info/StrangerInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.info/StrangerInfo.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.info/StrangerInfo.toString|toString(){}[0]

    final class Business { // cn.rtast.rob.event.raw.info/StrangerInfo.Business|null[0]
        constructor <init>(kotlin/Int, kotlin/String, kotlin/Int, kotlin/String, kotlin/Int, kotlin/Int) // cn.rtast.rob.event.raw.info/StrangerInfo.Business.<init>|<init>(kotlin.Int;kotlin.String;kotlin.Int;kotlin.String;kotlin.Int;kotlin.Int){}[0]

        final val icon // cn.rtast.rob.event.raw.info/StrangerInfo.Business.icon|{}icon[0]
            final fun <get-icon>(): kotlin/String // cn.rtast.rob.event.raw.info/StrangerInfo.Business.icon.<get-icon>|<get-icon>(){}[0]
        final val isPro // cn.rtast.rob.event.raw.info/StrangerInfo.Business.isPro|{}isPro[0]
            final fun <get-isPro>(): kotlin/Int // cn.rtast.rob.event.raw.info/StrangerInfo.Business.isPro.<get-isPro>|<get-isPro>(){}[0]
        final val isYear // cn.rtast.rob.event.raw.info/StrangerInfo.Business.isYear|{}isYear[0]
            final fun <get-isYear>(): kotlin/Int // cn.rtast.rob.event.raw.info/StrangerInfo.Business.isYear.<get-isYear>|<get-isYear>(){}[0]
        final val level // cn.rtast.rob.event.raw.info/StrangerInfo.Business.level|{}level[0]
            final fun <get-level>(): kotlin/Int // cn.rtast.rob.event.raw.info/StrangerInfo.Business.level.<get-level>|<get-level>(){}[0]
        final val name // cn.rtast.rob.event.raw.info/StrangerInfo.Business.name|{}name[0]
            final fun <get-name>(): kotlin/String // cn.rtast.rob.event.raw.info/StrangerInfo.Business.name.<get-name>|<get-name>(){}[0]
        final val type // cn.rtast.rob.event.raw.info/StrangerInfo.Business.type|{}type[0]
            final fun <get-type>(): kotlin/Int // cn.rtast.rob.event.raw.info/StrangerInfo.Business.type.<get-type>|<get-type>(){}[0]

        final fun component1(): kotlin/Int // cn.rtast.rob.event.raw.info/StrangerInfo.Business.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.info/StrangerInfo.Business.component2|component2(){}[0]
        final fun component3(): kotlin/Int // cn.rtast.rob.event.raw.info/StrangerInfo.Business.component3|component3(){}[0]
        final fun component4(): kotlin/String // cn.rtast.rob.event.raw.info/StrangerInfo.Business.component4|component4(){}[0]
        final fun component5(): kotlin/Int // cn.rtast.rob.event.raw.info/StrangerInfo.Business.component5|component5(){}[0]
        final fun component6(): kotlin/Int // cn.rtast.rob.event.raw.info/StrangerInfo.Business.component6|component6(){}[0]
        final fun copy(kotlin/Int = ..., kotlin/String = ..., kotlin/Int = ..., kotlin/String = ..., kotlin/Int = ..., kotlin/Int = ...): cn.rtast.rob.event.raw.info/StrangerInfo.Business // cn.rtast.rob.event.raw.info/StrangerInfo.Business.copy|copy(kotlin.Int;kotlin.String;kotlin.Int;kotlin.String;kotlin.Int;kotlin.Int){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.info/StrangerInfo.Business.equals|equals(kotlin.Any?){}[0]
        final fun getType(): cn.rtast.rob.enums/BusinessName? // cn.rtast.rob.event.raw.info/StrangerInfo.Business.getType|getType(){}[0]
        final fun getTypeByName(): cn.rtast.rob.enums/BusinessName? // cn.rtast.rob.event.raw.info/StrangerInfo.Business.getTypeByName|getTypeByName(){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.info/StrangerInfo.Business.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.info/StrangerInfo.Business.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.info/StrangerInfo.Business> { // cn.rtast.rob.event.raw.info/StrangerInfo.Business.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.info/StrangerInfo.Business.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.info/StrangerInfo.Business.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.info/StrangerInfo.Business.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.info/StrangerInfo.Business // cn.rtast.rob.event.raw.info/StrangerInfo.Business.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.info/StrangerInfo.Business) // cn.rtast.rob.event.raw.info/StrangerInfo.Business.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.info.StrangerInfo.Business){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.info/StrangerInfo.Business.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.info/StrangerInfo.Business> // cn.rtast.rob.event.raw.info/StrangerInfo.Business.Companion.serializer|serializer(){}[0]
        }
    }

    final class Status { // cn.rtast.rob.event.raw.info/StrangerInfo.Status|null[0]
        constructor <init>(kotlin/UInt, kotlin/Int, kotlin/String) // cn.rtast.rob.event.raw.info/StrangerInfo.Status.<init>|<init>(kotlin.UInt;kotlin.Int;kotlin.String){}[0]

        final val faceId // cn.rtast.rob.event.raw.info/StrangerInfo.Status.faceId|{}faceId[0]
            final fun <get-faceId>(): kotlin/Int // cn.rtast.rob.event.raw.info/StrangerInfo.Status.faceId.<get-faceId>|<get-faceId>(){}[0]
        final val message // cn.rtast.rob.event.raw.info/StrangerInfo.Status.message|{}message[0]
            final fun <get-message>(): kotlin/String // cn.rtast.rob.event.raw.info/StrangerInfo.Status.message.<get-message>|<get-message>(){}[0]
        final val statusId // cn.rtast.rob.event.raw.info/StrangerInfo.Status.statusId|{}statusId[0]
            final fun <get-statusId>(): kotlin/UInt // cn.rtast.rob.event.raw.info/StrangerInfo.Status.statusId.<get-statusId>|<get-statusId>(){}[0]

        final fun component1(): kotlin/UInt // cn.rtast.rob.event.raw.info/StrangerInfo.Status.component1|component1(){}[0]
        final fun component2(): kotlin/Int // cn.rtast.rob.event.raw.info/StrangerInfo.Status.component2|component2(){}[0]
        final fun component3(): kotlin/String // cn.rtast.rob.event.raw.info/StrangerInfo.Status.component3|component3(){}[0]
        final fun copy(kotlin/UInt = ..., kotlin/Int = ..., kotlin/String = ...): cn.rtast.rob.event.raw.info/StrangerInfo.Status // cn.rtast.rob.event.raw.info/StrangerInfo.Status.copy|copy(kotlin.UInt;kotlin.Int;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.info/StrangerInfo.Status.equals|equals(kotlin.Any?){}[0]
        final fun getStatus(): cn.rtast.rob.enums/StatusId? // cn.rtast.rob.event.raw.info/StrangerInfo.Status.getStatus|getStatus(){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.info/StrangerInfo.Status.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.info/StrangerInfo.Status.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.info/StrangerInfo.Status> { // cn.rtast.rob.event.raw.info/StrangerInfo.Status.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.info/StrangerInfo.Status.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.info/StrangerInfo.Status.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.info/StrangerInfo.Status.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.info/StrangerInfo.Status // cn.rtast.rob.event.raw.info/StrangerInfo.Status.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.info/StrangerInfo.Status) // cn.rtast.rob.event.raw.info/StrangerInfo.Status.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.info.StrangerInfo.Status){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.info/StrangerInfo.Status.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.info/StrangerInfo.Status> // cn.rtast.rob.event.raw.info/StrangerInfo.Status.Companion.serializer|serializer(){}[0]
        }
    }

    final class StrangerInfo { // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo|null[0]
        constructor <init>(kotlin/Long, kotlin/String, kotlin/String, cn.rtast.rob.enums/UserSex, kotlin/Int, kotlin/Int, kotlin/String, kotlin/String, cn.rtast.rob.event.raw.info/StrangerInfo.Status, kotlin/String, kotlin.collections/List<cn.rtast.rob.event.raw.info/StrangerInfo.Business>) // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.<init>|<init>(kotlin.Long;kotlin.String;kotlin.String;cn.rtast.rob.enums.UserSex;kotlin.Int;kotlin.Int;kotlin.String;kotlin.String;cn.rtast.rob.event.raw.info.StrangerInfo.Status;kotlin.String;kotlin.collections.List<cn.rtast.rob.event.raw.info.StrangerInfo.Business>){}[0]

        final val age // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.age|{}age[0]
            final fun <get-age>(): kotlin/Int // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.age.<get-age>|<get-age>(){}[0]
        final val avatar // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.avatar|{}avatar[0]
            final fun <get-avatar>(): kotlin/String // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.avatar.<get-avatar>|<get-avatar>(){}[0]
        final val business // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.business|{}business[0]
            final fun <get-business>(): kotlin.collections/List<cn.rtast.rob.event.raw.info/StrangerInfo.Business> // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.business.<get-business>|<get-business>(){}[0]
        final val level // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.level|{}level[0]
            final fun <get-level>(): kotlin/Int // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.level.<get-level>|<get-level>(){}[0]
        final val nickname // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.nickname|{}nickname[0]
            final fun <get-nickname>(): kotlin/String // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.nickname.<get-nickname>|<get-nickname>(){}[0]
        final val qId // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.qId|{}qId[0]
            final fun <get-qId>(): kotlin/String // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.qId.<get-qId>|<get-qId>(){}[0]
        final val registerTime // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.registerTime|{}registerTime[0]
            final fun <get-registerTime>(): kotlin/String // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.registerTime.<get-registerTime>|<get-registerTime>(){}[0]
        final val sex // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.sex|{}sex[0]
            final fun <get-sex>(): cn.rtast.rob.enums/UserSex // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.sex.<get-sex>|<get-sex>(){}[0]
        final val sign // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.sign|{}sign[0]
            final fun <get-sign>(): kotlin/String // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.sign.<get-sign>|<get-sign>(){}[0]
        final val status // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.status|{}status[0]
            final fun <get-status>(): cn.rtast.rob.event.raw.info/StrangerInfo.Status // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.status.<get-status>|<get-status>(){}[0]
        final val userId // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.userId|{}userId[0]
            final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.userId.<get-userId>|<get-userId>(){}[0]

        final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.component1|component1(){}[0]
        final fun component10(): kotlin/String // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.component10|component10(){}[0]
        final fun component11(): kotlin.collections/List<cn.rtast.rob.event.raw.info/StrangerInfo.Business> // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.component11|component11(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.component2|component2(){}[0]
        final fun component3(): kotlin/String // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.component3|component3(){}[0]
        final fun component4(): cn.rtast.rob.enums/UserSex // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.component4|component4(){}[0]
        final fun component5(): kotlin/Int // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.component5|component5(){}[0]
        final fun component6(): kotlin/Int // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.component6|component6(){}[0]
        final fun component7(): kotlin/String // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.component7|component7(){}[0]
        final fun component8(): kotlin/String // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.component8|component8(){}[0]
        final fun component9(): cn.rtast.rob.event.raw.info/StrangerInfo.Status // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.component9|component9(){}[0]
        final fun copy(kotlin/Long = ..., kotlin/String = ..., kotlin/String = ..., cn.rtast.rob.enums/UserSex = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/String = ..., kotlin/String = ..., cn.rtast.rob.event.raw.info/StrangerInfo.Status = ..., kotlin/String = ..., kotlin.collections/List<cn.rtast.rob.event.raw.info/StrangerInfo.Business> = ...): cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.copy|copy(kotlin.Long;kotlin.String;kotlin.String;cn.rtast.rob.enums.UserSex;kotlin.Int;kotlin.Int;kotlin.String;kotlin.String;cn.rtast.rob.event.raw.info.StrangerInfo.Status;kotlin.String;kotlin.collections.List<cn.rtast.rob.event.raw.info.StrangerInfo.Business>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo> { // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo) // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.info.StrangerInfo.StrangerInfo){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.Companion|null[0]
            final val $childSerializers // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo> // cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.info/StrangerInfo> { // cn.rtast.rob.event.raw.info/StrangerInfo.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.info/StrangerInfo.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.info/StrangerInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.info/StrangerInfo.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.info/StrangerInfo // cn.rtast.rob.event.raw.info/StrangerInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.info/StrangerInfo) // cn.rtast.rob.event.raw.info/StrangerInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.info.StrangerInfo){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.info/StrangerInfo.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.info/StrangerInfo> // cn.rtast.rob.event.raw.info/StrangerInfo.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.info/TranslateEN2ZHResponse { // cn.rtast.rob.event.raw.info/TranslateEN2ZHResponse|null[0]
    constructor <init>(kotlin.collections/List<kotlin/String>) // cn.rtast.rob.event.raw.info/TranslateEN2ZHResponse.<init>|<init>(kotlin.collections.List<kotlin.String>){}[0]

    final val data // cn.rtast.rob.event.raw.info/TranslateEN2ZHResponse.data|{}data[0]
        final fun <get-data>(): kotlin.collections/List<kotlin/String> // cn.rtast.rob.event.raw.info/TranslateEN2ZHResponse.data.<get-data>|<get-data>(){}[0]

    final fun component1(): kotlin.collections/List<kotlin/String> // cn.rtast.rob.event.raw.info/TranslateEN2ZHResponse.component1|component1(){}[0]
    final fun copy(kotlin.collections/List<kotlin/String> = ...): cn.rtast.rob.event.raw.info/TranslateEN2ZHResponse // cn.rtast.rob.event.raw.info/TranslateEN2ZHResponse.copy|copy(kotlin.collections.List<kotlin.String>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.info/TranslateEN2ZHResponse.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.info/TranslateEN2ZHResponse.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.info/TranslateEN2ZHResponse.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.info/TranslateEN2ZHResponse> { // cn.rtast.rob.event.raw.info/TranslateEN2ZHResponse.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.info/TranslateEN2ZHResponse.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.info/TranslateEN2ZHResponse.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.info/TranslateEN2ZHResponse.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.info/TranslateEN2ZHResponse // cn.rtast.rob.event.raw.info/TranslateEN2ZHResponse.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.info/TranslateEN2ZHResponse) // cn.rtast.rob.event.raw.info/TranslateEN2ZHResponse.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.info.TranslateEN2ZHResponse){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.info/TranslateEN2ZHResponse.Companion|null[0]
        final val $childSerializers // cn.rtast.rob.event.raw.info/TranslateEN2ZHResponse.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.info/TranslateEN2ZHResponse> // cn.rtast.rob.event.raw.info/TranslateEN2ZHResponse.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.internal/RawWebsocketCloseEvent { // cn.rtast.rob.event.raw.internal/RawWebsocketCloseEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.internal/RawWebsocketCloseEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction){}[0]

    final val action // cn.rtast.rob.event.raw.internal/RawWebsocketCloseEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.internal/RawWebsocketCloseEvent.action.<get-action>|<get-action>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.internal/RawWebsocketCloseEvent.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ...): cn.rtast.rob.event.raw.internal/RawWebsocketCloseEvent // cn.rtast.rob.event.raw.internal/RawWebsocketCloseEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.internal/RawWebsocketCloseEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.internal/RawWebsocketCloseEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.internal/RawWebsocketCloseEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.raw.internal/RawWebsocketErrorEvent { // cn.rtast.rob.event.raw.internal/RawWebsocketErrorEvent|null[0]
    constructor <init>(cn.rtast.rob.onebot/OneBotAction, kotlin/Exception) // cn.rtast.rob.event.raw.internal/RawWebsocketErrorEvent.<init>|<init>(cn.rtast.rob.onebot.OneBotAction;kotlin.Exception){}[0]

    final val action // cn.rtast.rob.event.raw.internal/RawWebsocketErrorEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.internal/RawWebsocketErrorEvent.action.<get-action>|<get-action>(){}[0]
    final val exception // cn.rtast.rob.event.raw.internal/RawWebsocketErrorEvent.exception|{}exception[0]
        final fun <get-exception>(): kotlin/Exception // cn.rtast.rob.event.raw.internal/RawWebsocketErrorEvent.exception.<get-exception>|<get-exception>(){}[0]

    final fun component1(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.internal/RawWebsocketErrorEvent.component1|component1(){}[0]
    final fun component2(): kotlin/Exception // cn.rtast.rob.event.raw.internal/RawWebsocketErrorEvent.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.onebot/OneBotAction = ..., kotlin/Exception = ...): cn.rtast.rob.event.raw.internal/RawWebsocketErrorEvent // cn.rtast.rob.event.raw.internal/RawWebsocketErrorEvent.copy|copy(cn.rtast.rob.onebot.OneBotAction;kotlin.Exception){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.internal/RawWebsocketErrorEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.internal/RawWebsocketErrorEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.internal/RawWebsocketErrorEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.raw.internal/SendPacketResponse { // cn.rtast.rob.event.raw.internal/SendPacketResponse|null[0]
    constructor <init>(cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket) // cn.rtast.rob.event.raw.internal/SendPacketResponse.<init>|<init>(cn.rtast.rob.event.raw.internal.SendPacketResponse.SendPacket){}[0]

    final val data // cn.rtast.rob.event.raw.internal/SendPacketResponse.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket // cn.rtast.rob.event.raw.internal/SendPacketResponse.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket // cn.rtast.rob.event.raw.internal/SendPacketResponse.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket = ...): cn.rtast.rob.event.raw.internal/SendPacketResponse // cn.rtast.rob.event.raw.internal/SendPacketResponse.copy|copy(cn.rtast.rob.event.raw.internal.SendPacketResponse.SendPacket){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.internal/SendPacketResponse.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.internal/SendPacketResponse.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.internal/SendPacketResponse.toString|toString(){}[0]

    final class SendPacket { // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket|null[0]
        constructor <init>(kotlin/Int, kotlin/String = ..., kotlin/Int, kotlin/String? = ...) // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket.<init>|<init>(kotlin.Int;kotlin.String;kotlin.Int;kotlin.String?){}[0]

        final val extra // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket.extra|{}extra[0]
            final fun <get-extra>(): kotlin/String? // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket.extra.<get-extra>|<get-extra>(){}[0]
        final val result // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket.result|{}result[0]
            final fun <get-result>(): kotlin/String // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket.result.<get-result>|<get-result>(){}[0]
        final val retCode // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket.retCode|{}retCode[0]
            final fun <get-retCode>(): kotlin/Int // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket.retCode.<get-retCode>|<get-retCode>(){}[0]
        final val sequence // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket.sequence|{}sequence[0]
            final fun <get-sequence>(): kotlin/Int // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket.sequence.<get-sequence>|<get-sequence>(){}[0]

        final fun component1(): kotlin/Int // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket.component2|component2(){}[0]
        final fun component3(): kotlin/Int // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket.component3|component3(){}[0]
        final fun component4(): kotlin/String? // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket.component4|component4(){}[0]
        final fun copy(kotlin/Int = ..., kotlin/String = ..., kotlin/Int = ..., kotlin/String? = ...): cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket.copy|copy(kotlin.Int;kotlin.String;kotlin.Int;kotlin.String?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket> { // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket) // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.internal.SendPacketResponse.SendPacket){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket> // cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.internal/SendPacketResponse> { // cn.rtast.rob.event.raw.internal/SendPacketResponse.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.internal/SendPacketResponse.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.internal/SendPacketResponse.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.internal/SendPacketResponse.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.internal/SendPacketResponse // cn.rtast.rob.event.raw.internal/SendPacketResponse.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.internal/SendPacketResponse) // cn.rtast.rob.event.raw.internal/SendPacketResponse.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.internal.SendPacketResponse){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.internal/SendPacketResponse.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.internal/SendPacketResponse> // cn.rtast.rob.event.raw.internal/SendPacketResponse.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.message/ArrayMessage { // cn.rtast.rob.event.raw.message/ArrayMessage|null[0]
    constructor <init>(cn.rtast.rob.enums/SegmentType, cn.rtast.rob.event.raw.message/ArrayMessage.Data) // cn.rtast.rob.event.raw.message/ArrayMessage.<init>|<init>(cn.rtast.rob.enums.SegmentType;cn.rtast.rob.event.raw.message.ArrayMessage.Data){}[0]

    final val data // cn.rtast.rob.event.raw.message/ArrayMessage.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.message/ArrayMessage.Data // cn.rtast.rob.event.raw.message/ArrayMessage.data.<get-data>|<get-data>(){}[0]
    final val type // cn.rtast.rob.event.raw.message/ArrayMessage.type|{}type[0]
        final fun <get-type>(): cn.rtast.rob.enums/SegmentType // cn.rtast.rob.event.raw.message/ArrayMessage.type.<get-type>|<get-type>(){}[0]

    final fun component1(): cn.rtast.rob.enums/SegmentType // cn.rtast.rob.event.raw.message/ArrayMessage.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.message/ArrayMessage.Data // cn.rtast.rob.event.raw.message/ArrayMessage.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.enums/SegmentType = ..., cn.rtast.rob.event.raw.message/ArrayMessage.Data = ...): cn.rtast.rob.event.raw.message/ArrayMessage // cn.rtast.rob.event.raw.message/ArrayMessage.copy|copy(cn.rtast.rob.enums.SegmentType;cn.rtast.rob.event.raw.message.ArrayMessage.Data){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/ArrayMessage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/ArrayMessage.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/ArrayMessage.toString|toString(){}[0]

    final class Data { // cn.rtast.rob.event.raw.message/ArrayMessage.Data|null[0]
        constructor <init>(kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/Double? = ..., kotlin/Double? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ...) // cn.rtast.rob.event.raw.message/ArrayMessage.Data.<init>|<init>(kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.Double?;kotlin.Double?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?){}[0]

        final val audio // cn.rtast.rob.event.raw.message/ArrayMessage.Data.audio|{}audio[0]
            final fun <get-audio>(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.audio.<get-audio>|<get-audio>(){}[0]
        final val content // cn.rtast.rob.event.raw.message/ArrayMessage.Data.content|{}content[0]
            final fun <get-content>(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.content.<get-content>|<get-content>(){}[0]
        final val data // cn.rtast.rob.event.raw.message/ArrayMessage.Data.data|{}data[0]
            final fun <get-data>(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.data.<get-data>|<get-data>(){}[0]
        final val emojiId // cn.rtast.rob.event.raw.message/ArrayMessage.Data.emojiId|{}emojiId[0]
            final fun <get-emojiId>(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.emojiId.<get-emojiId>|<get-emojiId>(){}[0]
        final val emojiPackageId // cn.rtast.rob.event.raw.message/ArrayMessage.Data.emojiPackageId|{}emojiPackageId[0]
            final fun <get-emojiPackageId>(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.emojiPackageId.<get-emojiPackageId>|<get-emojiPackageId>(){}[0]
        final val file // cn.rtast.rob.event.raw.message/ArrayMessage.Data.file|{}file[0]
            final fun <get-file>(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.file.<get-file>|<get-file>(){}[0]
        final val fileHash // cn.rtast.rob.event.raw.message/ArrayMessage.Data.fileHash|{}fileHash[0]
            final fun <get-fileHash>(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.fileHash.<get-fileHash>|<get-fileHash>(){}[0]
        final val fileId // cn.rtast.rob.event.raw.message/ArrayMessage.Data.fileId|{}fileId[0]
            final fun <get-fileId>(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.fileId.<get-fileId>|<get-fileId>(){}[0]
        final val fileName // cn.rtast.rob.event.raw.message/ArrayMessage.Data.fileName|{}fileName[0]
            final fun <get-fileName>(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.fileName.<get-fileName>|<get-fileName>(){}[0]
        final val filename // cn.rtast.rob.event.raw.message/ArrayMessage.Data.filename|{}filename[0]
            final fun <get-filename>(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.filename.<get-filename>|<get-filename>(){}[0]
        final val id // cn.rtast.rob.event.raw.message/ArrayMessage.Data.id|{}id[0]
            final fun <get-id>(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.id.<get-id>|<get-id>(){}[0]
        final val key // cn.rtast.rob.event.raw.message/ArrayMessage.Data.key|{}key[0]
            final fun <get-key>(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.key.<get-key>|<get-key>(){}[0]
        final val large // cn.rtast.rob.event.raw.message/ArrayMessage.Data.large|{}large[0]
            final fun <get-large>(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.large.<get-large>|<get-large>(){}[0]
        final val lat // cn.rtast.rob.event.raw.message/ArrayMessage.Data.lat|{}lat[0]
            final fun <get-lat>(): kotlin/Double? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.lat.<get-lat>|<get-lat>(){}[0]
        final val lon // cn.rtast.rob.event.raw.message/ArrayMessage.Data.lon|{}lon[0]
            final fun <get-lon>(): kotlin/Double? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.lon.<get-lon>|<get-lon>(){}[0]
        final val name // cn.rtast.rob.event.raw.message/ArrayMessage.Data.name|{}name[0]
            final fun <get-name>(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.name.<get-name>|<get-name>(){}[0]
        final val qq // cn.rtast.rob.event.raw.message/ArrayMessage.Data.qq|{}qq[0]
            final fun <get-qq>(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.qq.<get-qq>|<get-qq>(){}[0]
        final val subType // cn.rtast.rob.event.raw.message/ArrayMessage.Data.subType|{}subType[0]
            final fun <get-subType>(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.subType.<get-subType>|<get-subType>(){}[0]
        final val summary // cn.rtast.rob.event.raw.message/ArrayMessage.Data.summary|{}summary[0]
            final fun <get-summary>(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.summary.<get-summary>|<get-summary>(){}[0]
        final val text // cn.rtast.rob.event.raw.message/ArrayMessage.Data.text|{}text[0]
            final fun <get-text>(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.text.<get-text>|<get-text>(){}[0]
        final val title // cn.rtast.rob.event.raw.message/ArrayMessage.Data.title|{}title[0]
            final fun <get-title>(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.title.<get-title>|<get-title>(){}[0]
        final val type // cn.rtast.rob.event.raw.message/ArrayMessage.Data.type|{}type[0]
            final fun <get-type>(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.type.<get-type>|<get-type>(){}[0]
        final val url // cn.rtast.rob.event.raw.message/ArrayMessage.Data.url|{}url[0]
            final fun <get-url>(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.url.<get-url>|<get-url>(){}[0]

        final fun component1(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.component1|component1(){}[0]
        final fun component10(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.component10|component10(){}[0]
        final fun component11(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.component11|component11(){}[0]
        final fun component12(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.component12|component12(){}[0]
        final fun component13(): kotlin/Double? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.component13|component13(){}[0]
        final fun component14(): kotlin/Double? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.component14|component14(){}[0]
        final fun component15(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.component15|component15(){}[0]
        final fun component16(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.component16|component16(){}[0]
        final fun component17(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.component17|component17(){}[0]
        final fun component18(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.component18|component18(){}[0]
        final fun component19(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.component19|component19(){}[0]
        final fun component2(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.component2|component2(){}[0]
        final fun component20(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.component20|component20(){}[0]
        final fun component21(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.component21|component21(){}[0]
        final fun component22(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.component22|component22(){}[0]
        final fun component23(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.component23|component23(){}[0]
        final fun component3(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.component3|component3(){}[0]
        final fun component4(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.component4|component4(){}[0]
        final fun component5(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.component5|component5(){}[0]
        final fun component6(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.component6|component6(){}[0]
        final fun component7(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.component7|component7(){}[0]
        final fun component8(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.component8|component8(){}[0]
        final fun component9(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.component9|component9(){}[0]
        final fun copy(kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/Double? = ..., kotlin/Double? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ...): cn.rtast.rob.event.raw.message/ArrayMessage.Data // cn.rtast.rob.event.raw.message/ArrayMessage.Data.copy|copy(kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.Double?;kotlin.Double?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/ArrayMessage.Data.equals|equals(kotlin.Any?){}[0]
        final fun getAt(): cn.rtast.rob.event.raw.message/MessageData.InboundAT? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.getAt|getAt(){}[0]
        final fun getFace(): cn.rtast.rob.event.raw.message/MessageData.InboundFace? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.getFace|getFace(){}[0]
        final fun getImage(): cn.rtast.rob.event.raw.message/MessageData.InboundImage? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.getImage|getImage(){}[0]
        final fun getJSON(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.getJSON|getJSON(){}[0]
        final fun getMFace(): cn.rtast.rob.event.raw.message/MessageData.InboundMFace? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.getMFace|getMFace(){}[0]
        final fun getRecord(): cn.rtast.rob.event.raw.message/MessageData.InboundRecord? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.getRecord|getRecord(){}[0]
        final fun getReply(): cn.rtast.rob.event.raw.message/MessageData.InboundRecord? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.getReply|getReply(){}[0]
        final fun getXML(): kotlin/String? // cn.rtast.rob.event.raw.message/ArrayMessage.Data.getXML|getXML(){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/ArrayMessage.Data.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/ArrayMessage.Data.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.message/ArrayMessage.Data> { // cn.rtast.rob.event.raw.message/ArrayMessage.Data.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.message/ArrayMessage.Data.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.message/ArrayMessage.Data.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.message/ArrayMessage.Data.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.message/ArrayMessage.Data // cn.rtast.rob.event.raw.message/ArrayMessage.Data.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.message/ArrayMessage.Data) // cn.rtast.rob.event.raw.message/ArrayMessage.Data.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.message.ArrayMessage.Data){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.message/ArrayMessage.Data.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.message/ArrayMessage.Data> // cn.rtast.rob.event.raw.message/ArrayMessage.Data.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.message/ArrayMessage> { // cn.rtast.rob.event.raw.message/ArrayMessage.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.message/ArrayMessage.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.message/ArrayMessage.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.message/ArrayMessage.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.message/ArrayMessage // cn.rtast.rob.event.raw.message/ArrayMessage.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.message/ArrayMessage) // cn.rtast.rob.event.raw.message/ArrayMessage.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.message.ArrayMessage){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.message/ArrayMessage.Companion|null[0]
        final val $childSerializers // cn.rtast.rob.event.raw.message/ArrayMessage.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.message/ArrayMessage> // cn.rtast.rob.event.raw.message/ArrayMessage.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.message/EssenceMessageList { // cn.rtast.rob.event.raw.message/EssenceMessageList|null[0]
    constructor <init>(kotlin.collections/List<cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage>) // cn.rtast.rob.event.raw.message/EssenceMessageList.<init>|<init>(kotlin.collections.List<cn.rtast.rob.event.raw.message.EssenceMessageList.EssenceMessage>){}[0]

    final val data // cn.rtast.rob.event.raw.message/EssenceMessageList.data|{}data[0]
        final fun <get-data>(): kotlin.collections/List<cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage> // cn.rtast.rob.event.raw.message/EssenceMessageList.data.<get-data>|<get-data>(){}[0]

    final fun component1(): kotlin.collections/List<cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage> // cn.rtast.rob.event.raw.message/EssenceMessageList.component1|component1(){}[0]
    final fun copy(kotlin.collections/List<cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage> = ...): cn.rtast.rob.event.raw.message/EssenceMessageList // cn.rtast.rob.event.raw.message/EssenceMessageList.copy|copy(kotlin.collections.List<cn.rtast.rob.event.raw.message.EssenceMessageList.EssenceMessage>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/EssenceMessageList.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/EssenceMessageList.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/EssenceMessageList.toString|toString(){}[0]

    final class Content { // cn.rtast.rob.event.raw.message/EssenceMessageList.Content|null[0]
        constructor <init>(cn.rtast.rob.enums/EssenceMessageType, cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData) // cn.rtast.rob.event.raw.message/EssenceMessageList.Content.<init>|<init>(cn.rtast.rob.enums.EssenceMessageType;cn.rtast.rob.event.raw.message.EssenceMessageList.ContentData){}[0]

        final val data // cn.rtast.rob.event.raw.message/EssenceMessageList.Content.data|{}data[0]
            final fun <get-data>(): cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData // cn.rtast.rob.event.raw.message/EssenceMessageList.Content.data.<get-data>|<get-data>(){}[0]
        final val type // cn.rtast.rob.event.raw.message/EssenceMessageList.Content.type|{}type[0]
            final fun <get-type>(): cn.rtast.rob.enums/EssenceMessageType // cn.rtast.rob.event.raw.message/EssenceMessageList.Content.type.<get-type>|<get-type>(){}[0]

        final fun component1(): cn.rtast.rob.enums/EssenceMessageType // cn.rtast.rob.event.raw.message/EssenceMessageList.Content.component1|component1(){}[0]
        final fun component2(): cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData // cn.rtast.rob.event.raw.message/EssenceMessageList.Content.component2|component2(){}[0]
        final fun copy(cn.rtast.rob.enums/EssenceMessageType = ..., cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData = ...): cn.rtast.rob.event.raw.message/EssenceMessageList.Content // cn.rtast.rob.event.raw.message/EssenceMessageList.Content.copy|copy(cn.rtast.rob.enums.EssenceMessageType;cn.rtast.rob.event.raw.message.EssenceMessageList.ContentData){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/EssenceMessageList.Content.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/EssenceMessageList.Content.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/EssenceMessageList.Content.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.message/EssenceMessageList.Content> { // cn.rtast.rob.event.raw.message/EssenceMessageList.Content.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.message/EssenceMessageList.Content.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.message/EssenceMessageList.Content.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.message/EssenceMessageList.Content.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.message/EssenceMessageList.Content // cn.rtast.rob.event.raw.message/EssenceMessageList.Content.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.message/EssenceMessageList.Content) // cn.rtast.rob.event.raw.message/EssenceMessageList.Content.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.message.EssenceMessageList.Content){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.message/EssenceMessageList.Content.Companion|null[0]
            final val $childSerializers // cn.rtast.rob.event.raw.message/EssenceMessageList.Content.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.message/EssenceMessageList.Content> // cn.rtast.rob.event.raw.message/EssenceMessageList.Content.Companion.serializer|serializer(){}[0]
        }
    }

    final class ContentData { // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData|null[0]
        constructor <init>(kotlin/String?, kotlin/String?, kotlin/String?, kotlin/String?, kotlin/Int, kotlin/String?) // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.<init>|<init>(kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.Int;kotlin.String?){}[0]

        final val file // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.file|{}file[0]
            final fun <get-file>(): kotlin/String? // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.file.<get-file>|<get-file>(){}[0]
        final val filename // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.filename|{}filename[0]
            final fun <get-filename>(): kotlin/String? // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.filename.<get-filename>|<get-filename>(){}[0]
        final val subType // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.subType|{}subType[0]
            final fun <get-subType>(): kotlin/Int // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.subType.<get-subType>|<get-subType>(){}[0]
        final val summary // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.summary|{}summary[0]
            final fun <get-summary>(): kotlin/String? // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.summary.<get-summary>|<get-summary>(){}[0]
        final val text // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.text|{}text[0]
            final fun <get-text>(): kotlin/String? // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.text.<get-text>|<get-text>(){}[0]
        final val url // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.url|{}url[0]
            final fun <get-url>(): kotlin/String? // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.url.<get-url>|<get-url>(){}[0]

        final fun component1(): kotlin/String? // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.component1|component1(){}[0]
        final fun component2(): kotlin/String? // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.component2|component2(){}[0]
        final fun component3(): kotlin/String? // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.component3|component3(){}[0]
        final fun component4(): kotlin/String? // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.component4|component4(){}[0]
        final fun component5(): kotlin/Int // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.component5|component5(){}[0]
        final fun component6(): kotlin/String? // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.component6|component6(){}[0]
        final fun copy(kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/Int = ..., kotlin/String? = ...): cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.copy|copy(kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.Int;kotlin.String?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData> { // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData) // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.message.EssenceMessageList.ContentData){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData> // cn.rtast.rob.event.raw.message/EssenceMessageList.ContentData.Companion.serializer|serializer(){}[0]
        }
    }

    final class EssenceMessage { // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage|null[0]
        constructor <init>(kotlin/Long, kotlin/String, kotlin/Long, kotlin/Long, kotlin/String, kotlin/Long, kotlin/Long, kotlin.collections/List<cn.rtast.rob.event.raw.message/EssenceMessageList.Content>) // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.<init>|<init>(kotlin.Long;kotlin.String;kotlin.Long;kotlin.Long;kotlin.String;kotlin.Long;kotlin.Long;kotlin.collections.List<cn.rtast.rob.event.raw.message.EssenceMessageList.Content>){}[0]

        final val content // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.content|{}content[0]
            final fun <get-content>(): kotlin.collections/List<cn.rtast.rob.event.raw.message/EssenceMessageList.Content> // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.content.<get-content>|<get-content>(){}[0]
        final val messageId // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.messageId|{}messageId[0]
            final fun <get-messageId>(): kotlin/Long // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.messageId.<get-messageId>|<get-messageId>(){}[0]
        final val operatorId // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.operatorId|{}operatorId[0]
            final fun <get-operatorId>(): kotlin/Long // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.operatorId.<get-operatorId>|<get-operatorId>(){}[0]
        final val operatorNick // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.operatorNick|{}operatorNick[0]
            final fun <get-operatorNick>(): kotlin/String // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.operatorNick.<get-operatorNick>|<get-operatorNick>(){}[0]
        final val operatorTime // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.operatorTime|{}operatorTime[0]
            final fun <get-operatorTime>(): kotlin/Long // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.operatorTime.<get-operatorTime>|<get-operatorTime>(){}[0]
        final val senderId // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.senderId|{}senderId[0]
            final fun <get-senderId>(): kotlin/Long // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.senderId.<get-senderId>|<get-senderId>(){}[0]
        final val senderNick // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.senderNick|{}senderNick[0]
            final fun <get-senderNick>(): kotlin/String // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.senderNick.<get-senderNick>|<get-senderNick>(){}[0]
        final val senderTime // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.senderTime|{}senderTime[0]
            final fun <get-senderTime>(): kotlin/Long // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.senderTime.<get-senderTime>|<get-senderTime>(){}[0]

        final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.component2|component2(){}[0]
        final fun component3(): kotlin/Long // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.component3|component3(){}[0]
        final fun component4(): kotlin/Long // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.component4|component4(){}[0]
        final fun component5(): kotlin/String // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.component5|component5(){}[0]
        final fun component6(): kotlin/Long // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.component6|component6(){}[0]
        final fun component7(): kotlin/Long // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.component7|component7(){}[0]
        final fun component8(): kotlin.collections/List<cn.rtast.rob.event.raw.message/EssenceMessageList.Content> // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.component8|component8(){}[0]
        final fun copy(kotlin/Long = ..., kotlin/String = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/String = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin.collections/List<cn.rtast.rob.event.raw.message/EssenceMessageList.Content> = ...): cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.copy|copy(kotlin.Long;kotlin.String;kotlin.Long;kotlin.Long;kotlin.String;kotlin.Long;kotlin.Long;kotlin.collections.List<cn.rtast.rob.event.raw.message.EssenceMessageList.Content>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage> { // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage) // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.message.EssenceMessageList.EssenceMessage){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.Companion|null[0]
            final val $childSerializers // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage> // cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.message/EssenceMessageList> { // cn.rtast.rob.event.raw.message/EssenceMessageList.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.message/EssenceMessageList.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.message/EssenceMessageList.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.message/EssenceMessageList.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.message/EssenceMessageList // cn.rtast.rob.event.raw.message/EssenceMessageList.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.message/EssenceMessageList) // cn.rtast.rob.event.raw.message/EssenceMessageList.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.message.EssenceMessageList){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.message/EssenceMessageList.Companion|null[0]
        final val $childSerializers // cn.rtast.rob.event.raw.message/EssenceMessageList.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.message/EssenceMessageList> // cn.rtast.rob.event.raw.message/EssenceMessageList.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.message/ForwardMessage { // cn.rtast.rob.event.raw.message/ForwardMessage|null[0]
    constructor <init>(cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage) // cn.rtast.rob.event.raw.message/ForwardMessage.<init>|<init>(cn.rtast.rob.event.raw.message.ForwardMessage.ForwardMessage){}[0]

    final val data // cn.rtast.rob.event.raw.message/ForwardMessage.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage // cn.rtast.rob.event.raw.message/ForwardMessage.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage // cn.rtast.rob.event.raw.message/ForwardMessage.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage = ...): cn.rtast.rob.event.raw.message/ForwardMessage // cn.rtast.rob.event.raw.message/ForwardMessage.copy|copy(cn.rtast.rob.event.raw.message.ForwardMessage.ForwardMessage){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/ForwardMessage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/ForwardMessage.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/ForwardMessage.toString|toString(){}[0]

    final class ArrayMessage { // cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage|null[0]
        constructor <init>(kotlin/Long, kotlin/String, kotlin.collections/List<cn.rtast.rob.event.raw.message/ForwardMessage.Content>) // cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage.<init>|<init>(kotlin.Long;kotlin.String;kotlin.collections.List<cn.rtast.rob.event.raw.message.ForwardMessage.Content>){}[0]

        final val content // cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage.content|{}content[0]
            final fun <get-content>(): kotlin.collections/List<cn.rtast.rob.event.raw.message/ForwardMessage.Content> // cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage.content.<get-content>|<get-content>(){}[0]
        final val nickname // cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage.nickname|{}nickname[0]
            final fun <get-nickname>(): kotlin/String // cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage.nickname.<get-nickname>|<get-nickname>(){}[0]
        final val userId // cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage.userId|{}userId[0]
            final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage.userId.<get-userId>|<get-userId>(){}[0]

        final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage.component2|component2(){}[0]
        final fun component3(): kotlin.collections/List<cn.rtast.rob.event.raw.message/ForwardMessage.Content> // cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage.component3|component3(){}[0]
        final fun copy(kotlin/Long = ..., kotlin/String = ..., kotlin.collections/List<cn.rtast.rob.event.raw.message/ForwardMessage.Content> = ...): cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage // cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage.copy|copy(kotlin.Long;kotlin.String;kotlin.collections.List<cn.rtast.rob.event.raw.message.ForwardMessage.Content>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage> { // cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage // cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage) // cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.message.ForwardMessage.ArrayMessage){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage.Companion|null[0]
            final val $childSerializers // cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage> // cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage.Companion.serializer|serializer(){}[0]
        }
    }

    final class Content { // cn.rtast.rob.event.raw.message/ForwardMessage.Content|null[0]
        constructor <init>(cn.rtast.rob.enums/SegmentType, cn.rtast.rob.event.raw.message/ArrayMessage.Data) // cn.rtast.rob.event.raw.message/ForwardMessage.Content.<init>|<init>(cn.rtast.rob.enums.SegmentType;cn.rtast.rob.event.raw.message.ArrayMessage.Data){}[0]

        final val data // cn.rtast.rob.event.raw.message/ForwardMessage.Content.data|{}data[0]
            final fun <get-data>(): cn.rtast.rob.event.raw.message/ArrayMessage.Data // cn.rtast.rob.event.raw.message/ForwardMessage.Content.data.<get-data>|<get-data>(){}[0]
        final val type // cn.rtast.rob.event.raw.message/ForwardMessage.Content.type|{}type[0]
            final fun <get-type>(): cn.rtast.rob.enums/SegmentType // cn.rtast.rob.event.raw.message/ForwardMessage.Content.type.<get-type>|<get-type>(){}[0]

        final fun component1(): cn.rtast.rob.enums/SegmentType // cn.rtast.rob.event.raw.message/ForwardMessage.Content.component1|component1(){}[0]
        final fun component2(): cn.rtast.rob.event.raw.message/ArrayMessage.Data // cn.rtast.rob.event.raw.message/ForwardMessage.Content.component2|component2(){}[0]
        final fun copy(cn.rtast.rob.enums/SegmentType = ..., cn.rtast.rob.event.raw.message/ArrayMessage.Data = ...): cn.rtast.rob.event.raw.message/ForwardMessage.Content // cn.rtast.rob.event.raw.message/ForwardMessage.Content.copy|copy(cn.rtast.rob.enums.SegmentType;cn.rtast.rob.event.raw.message.ArrayMessage.Data){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/ForwardMessage.Content.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/ForwardMessage.Content.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/ForwardMessage.Content.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.message/ForwardMessage.Content> { // cn.rtast.rob.event.raw.message/ForwardMessage.Content.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.message/ForwardMessage.Content.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.message/ForwardMessage.Content.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.message/ForwardMessage.Content.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.message/ForwardMessage.Content // cn.rtast.rob.event.raw.message/ForwardMessage.Content.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.message/ForwardMessage.Content) // cn.rtast.rob.event.raw.message/ForwardMessage.Content.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.message.ForwardMessage.Content){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.message/ForwardMessage.Content.Companion|null[0]
            final val $childSerializers // cn.rtast.rob.event.raw.message/ForwardMessage.Content.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.message/ForwardMessage.Content> // cn.rtast.rob.event.raw.message/ForwardMessage.Content.Companion.serializer|serializer(){}[0]
        }
    }

    final class ForwardArrayMessage { // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage|null[0]
        constructor <init>(cn.rtast.rob.enums/SegmentType, cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage) // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage.<init>|<init>(cn.rtast.rob.enums.SegmentType;cn.rtast.rob.event.raw.message.ForwardMessage.ArrayMessage){}[0]

        final val data // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage.data|{}data[0]
            final fun <get-data>(): cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage.data.<get-data>|<get-data>(){}[0]
        final val type // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage.type|{}type[0]
            final fun <get-type>(): cn.rtast.rob.enums/SegmentType // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage.type.<get-type>|<get-type>(){}[0]

        final fun component1(): cn.rtast.rob.enums/SegmentType // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage.component1|component1(){}[0]
        final fun component2(): cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage.component2|component2(){}[0]
        final fun copy(cn.rtast.rob.enums/SegmentType = ..., cn.rtast.rob.event.raw.message/ForwardMessage.ArrayMessage = ...): cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage.copy|copy(cn.rtast.rob.enums.SegmentType;cn.rtast.rob.event.raw.message.ForwardMessage.ArrayMessage){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage> { // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage) // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.message.ForwardMessage.ForwardArrayMessage){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage.Companion|null[0]
            final val $childSerializers // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage> // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage.Companion.serializer|serializer(){}[0]
        }
    }

    final class ForwardMessage { // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage|null[0]
        constructor <init>(kotlin.collections/List<cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage>) // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage.<init>|<init>(kotlin.collections.List<cn.rtast.rob.event.raw.message.ForwardMessage.ForwardArrayMessage>){}[0]

        final val message // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage.message|{}message[0]
            final fun <get-message>(): kotlin.collections/List<cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage> // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage.message.<get-message>|<get-message>(){}[0]

        final fun component1(): kotlin.collections/List<cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage> // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage.component1|component1(){}[0]
        final fun copy(kotlin.collections/List<cn.rtast.rob.event.raw.message/ForwardMessage.ForwardArrayMessage> = ...): cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage.copy|copy(kotlin.collections.List<cn.rtast.rob.event.raw.message.ForwardMessage.ForwardArrayMessage>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage> { // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage) // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.message.ForwardMessage.ForwardMessage){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage.Companion|null[0]
            final val $childSerializers // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage> // cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.message/ForwardMessage> { // cn.rtast.rob.event.raw.message/ForwardMessage.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.message/ForwardMessage.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.message/ForwardMessage.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.message/ForwardMessage.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.message/ForwardMessage // cn.rtast.rob.event.raw.message/ForwardMessage.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.message/ForwardMessage) // cn.rtast.rob.event.raw.message/ForwardMessage.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.message.ForwardMessage){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.message/ForwardMessage.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.message/ForwardMessage> // cn.rtast.rob.event.raw.message/ForwardMessage.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.message/ForwardMessageId { // cn.rtast.rob.event.raw.message/ForwardMessageId|null[0]
    constructor <init>(cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId) // cn.rtast.rob.event.raw.message/ForwardMessageId.<init>|<init>(cn.rtast.rob.event.raw.message.ForwardMessageId.ForwardMessageId){}[0]

    final val data // cn.rtast.rob.event.raw.message/ForwardMessageId.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId // cn.rtast.rob.event.raw.message/ForwardMessageId.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId // cn.rtast.rob.event.raw.message/ForwardMessageId.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId = ...): cn.rtast.rob.event.raw.message/ForwardMessageId // cn.rtast.rob.event.raw.message/ForwardMessageId.copy|copy(cn.rtast.rob.event.raw.message.ForwardMessageId.ForwardMessageId){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/ForwardMessageId.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/ForwardMessageId.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/ForwardMessageId.toString|toString(){}[0]

    final class ForwardMessageId { // cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId|null[0]
        constructor <init>(kotlin/String, kotlin/String) // cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId.<init>|<init>(kotlin.String;kotlin.String){}[0]

        final val forwardId // cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId.forwardId|{}forwardId[0]
            final fun <get-forwardId>(): kotlin/String // cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId.forwardId.<get-forwardId>|<get-forwardId>(){}[0]
        final val messageId // cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId.messageId|{}messageId[0]
            final fun <get-messageId>(): kotlin/String // cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId.messageId.<get-messageId>|<get-messageId>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId.component2|component2(){}[0]
        final fun copy(kotlin/String = ..., kotlin/String = ...): cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId // cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId.copy|copy(kotlin.String;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId> { // cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId // cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId) // cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.message.ForwardMessageId.ForwardMessageId){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId> // cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.message/ForwardMessageId> { // cn.rtast.rob.event.raw.message/ForwardMessageId.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.message/ForwardMessageId.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.message/ForwardMessageId.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.message/ForwardMessageId.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.message/ForwardMessageId // cn.rtast.rob.event.raw.message/ForwardMessageId.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.message/ForwardMessageId) // cn.rtast.rob.event.raw.message/ForwardMessageId.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.message.ForwardMessageId){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.message/ForwardMessageId.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.message/ForwardMessageId> // cn.rtast.rob.event.raw.message/ForwardMessageId.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.message/GetMessage { // cn.rtast.rob.event.raw.message/GetMessage|null[0]
    constructor <init>(cn.rtast.rob.event.raw.message/GetMessage.Message, kotlin/String?) // cn.rtast.rob.event.raw.message/GetMessage.<init>|<init>(cn.rtast.rob.event.raw.message.GetMessage.Message;kotlin.String?){}[0]

    final val data // cn.rtast.rob.event.raw.message/GetMessage.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.message/GetMessage.Message // cn.rtast.rob.event.raw.message/GetMessage.data.<get-data>|<get-data>(){}[0]
    final val echo // cn.rtast.rob.event.raw.message/GetMessage.echo|{}echo[0]
        final fun <get-echo>(): kotlin/String? // cn.rtast.rob.event.raw.message/GetMessage.echo.<get-echo>|<get-echo>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.message/GetMessage.Message // cn.rtast.rob.event.raw.message/GetMessage.component1|component1(){}[0]
    final fun component2(): kotlin/String? // cn.rtast.rob.event.raw.message/GetMessage.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.event.raw.message/GetMessage.Message = ..., kotlin/String? = ...): cn.rtast.rob.event.raw.message/GetMessage // cn.rtast.rob.event.raw.message/GetMessage.copy|copy(cn.rtast.rob.event.raw.message.GetMessage.Message;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/GetMessage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/GetMessage.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/GetMessage.toString|toString(){}[0]

    final class Message { // cn.rtast.rob.event.raw.message/GetMessage.Message|null[0]
        constructor <init>(kotlin/Long, cn.rtast.rob.enums/InboundMessageType, kotlin.collections/List<cn.rtast.rob.event.raw.message/ArrayMessage>, kotlin/Long, cn.rtast.rob.event.raw/GroupSender, kotlin/String?) // cn.rtast.rob.event.raw.message/GetMessage.Message.<init>|<init>(kotlin.Long;cn.rtast.rob.enums.InboundMessageType;kotlin.collections.List<cn.rtast.rob.event.raw.message.ArrayMessage>;kotlin.Long;cn.rtast.rob.event.raw.GroupSender;kotlin.String?){}[0]

        final val id // cn.rtast.rob.event.raw.message/GetMessage.Message.id|{}id[0]
            final fun <get-id>(): kotlin/String? // cn.rtast.rob.event.raw.message/GetMessage.Message.id.<get-id>|<get-id>(){}[0]
        final val message // cn.rtast.rob.event.raw.message/GetMessage.Message.message|{}message[0]
            final fun <get-message>(): kotlin.collections/List<cn.rtast.rob.event.raw.message/ArrayMessage> // cn.rtast.rob.event.raw.message/GetMessage.Message.message.<get-message>|<get-message>(){}[0]
        final val messageId // cn.rtast.rob.event.raw.message/GetMessage.Message.messageId|{}messageId[0]
            final fun <get-messageId>(): kotlin/Long // cn.rtast.rob.event.raw.message/GetMessage.Message.messageId.<get-messageId>|<get-messageId>(){}[0]
        final val messageType // cn.rtast.rob.event.raw.message/GetMessage.Message.messageType|{}messageType[0]
            final fun <get-messageType>(): cn.rtast.rob.enums/InboundMessageType // cn.rtast.rob.event.raw.message/GetMessage.Message.messageType.<get-messageType>|<get-messageType>(){}[0]
        final val sender // cn.rtast.rob.event.raw.message/GetMessage.Message.sender|{}sender[0]
            final fun <get-sender>(): cn.rtast.rob.event.raw/GroupSender // cn.rtast.rob.event.raw.message/GetMessage.Message.sender.<get-sender>|<get-sender>(){}[0]
        final val time // cn.rtast.rob.event.raw.message/GetMessage.Message.time|{}time[0]
            final fun <get-time>(): kotlin/Long // cn.rtast.rob.event.raw.message/GetMessage.Message.time.<get-time>|<get-time>(){}[0]

        final var action // cn.rtast.rob.event.raw.message/GetMessage.Message.action|{}action[0]
            final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.message/GetMessage.Message.action.<get-action>|<get-action>(){}[0]
            final fun <set-action>(cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.message/GetMessage.Message.action.<set-action>|<set-action>(cn.rtast.rob.onebot.OneBotAction){}[0]

        final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.message/GetMessage.Message.component1|component1(){}[0]
        final fun component2(): cn.rtast.rob.enums/InboundMessageType // cn.rtast.rob.event.raw.message/GetMessage.Message.component2|component2(){}[0]
        final fun component3(): kotlin.collections/List<cn.rtast.rob.event.raw.message/ArrayMessage> // cn.rtast.rob.event.raw.message/GetMessage.Message.component3|component3(){}[0]
        final fun component4(): kotlin/Long // cn.rtast.rob.event.raw.message/GetMessage.Message.component4|component4(){}[0]
        final fun component5(): cn.rtast.rob.event.raw/GroupSender // cn.rtast.rob.event.raw.message/GetMessage.Message.component5|component5(){}[0]
        final fun component6(): kotlin/String? // cn.rtast.rob.event.raw.message/GetMessage.Message.component6|component6(){}[0]
        final fun copy(kotlin/Long = ..., cn.rtast.rob.enums/InboundMessageType = ..., kotlin.collections/List<cn.rtast.rob.event.raw.message/ArrayMessage> = ..., kotlin/Long = ..., cn.rtast.rob.event.raw/GroupSender = ..., kotlin/String? = ...): cn.rtast.rob.event.raw.message/GetMessage.Message // cn.rtast.rob.event.raw.message/GetMessage.Message.copy|copy(kotlin.Long;cn.rtast.rob.enums.InboundMessageType;kotlin.collections.List<cn.rtast.rob.event.raw.message.ArrayMessage>;kotlin.Long;cn.rtast.rob.event.raw.GroupSender;kotlin.String?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/GetMessage.Message.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/GetMessage.Message.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/GetMessage.Message.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.message/GetMessage.Message> { // cn.rtast.rob.event.raw.message/GetMessage.Message.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.message/GetMessage.Message.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.message/GetMessage.Message.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.message/GetMessage.Message.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.message/GetMessage.Message // cn.rtast.rob.event.raw.message/GetMessage.Message.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.message/GetMessage.Message) // cn.rtast.rob.event.raw.message/GetMessage.Message.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.message.GetMessage.Message){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.message/GetMessage.Message.Companion|null[0]
            final val $childSerializers // cn.rtast.rob.event.raw.message/GetMessage.Message.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.message/GetMessage.Message> // cn.rtast.rob.event.raw.message/GetMessage.Message.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.message/GetMessage> { // cn.rtast.rob.event.raw.message/GetMessage.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.message/GetMessage.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.message/GetMessage.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.message/GetMessage.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.message/GetMessage // cn.rtast.rob.event.raw.message/GetMessage.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.message/GetMessage) // cn.rtast.rob.event.raw.message/GetMessage.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.message.GetMessage){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.message/GetMessage.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.message/GetMessage> // cn.rtast.rob.event.raw.message/GetMessage.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.message/GroupMessage : cn.rtast.rob.actionable/GroupMessageActionable, cn.rtast.rob.entity/IGroupMessage, cn.rtast.rob.event.raw.message/BaseMessage { // cn.rtast.rob.event.raw.message/GroupMessage|null[0]
    constructor <init>(kotlin/Long, cn.rtast.rob.event.raw/GroupSender, kotlin.uuid/Uuid? = ...) // cn.rtast.rob.event.raw.message/GroupMessage.<init>|<init>(kotlin.Long;cn.rtast.rob.event.raw.GroupSender;kotlin.uuid.Uuid?){}[0]

    final val groupId // cn.rtast.rob.event.raw.message/GroupMessage.groupId|{}groupId[0]
        final fun <get-groupId>(): kotlin/Long // cn.rtast.rob.event.raw.message/GroupMessage.groupId.<get-groupId>|<get-groupId>(){}[0]

    final var action // cn.rtast.rob.event.raw.message/GroupMessage.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.message/GroupMessage.action.<get-action>|<get-action>(){}[0]
        final fun <set-action>(cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.message/GroupMessage.action.<set-action>|<set-action>(cn.rtast.rob.onebot.OneBotAction){}[0]
    final var sender // cn.rtast.rob.event.raw.message/GroupMessage.sender|{}sender[0]
        final fun <get-sender>(): cn.rtast.rob.event.raw/GroupSender // cn.rtast.rob.event.raw.message/GroupMessage.sender.<get-sender>|<get-sender>(){}[0]
        final fun <set-sender>(cn.rtast.rob.event.raw/GroupSender) // cn.rtast.rob.event.raw.message/GroupMessage.sender.<set-sender>|<set-sender>(cn.rtast.rob.event.raw.GroupSender){}[0]
    final var sessionId // cn.rtast.rob.event.raw.message/GroupMessage.sessionId|{}sessionId[0]
        final fun <get-sessionId>(): kotlin.uuid/Uuid? // cn.rtast.rob.event.raw.message/GroupMessage.sessionId.<get-sessionId>|<get-sessionId>(){}[0]
        final fun <set-sessionId>(kotlin.uuid/Uuid?) // cn.rtast.rob.event.raw.message/GroupMessage.sessionId.<set-sessionId>|<set-sessionId>(kotlin.uuid.Uuid?){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.message/GroupMessage.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw/GroupSender // cn.rtast.rob.event.raw.message/GroupMessage.component2|component2(){}[0]
    final fun component3(): kotlin.uuid/Uuid? // cn.rtast.rob.event.raw.message/GroupMessage.component3|component3(){}[0]
    final fun copy(kotlin/Long = ..., cn.rtast.rob.event.raw/GroupSender = ..., kotlin.uuid/Uuid? = ...): cn.rtast.rob.event.raw.message/GroupMessage // cn.rtast.rob.event.raw.message/GroupMessage.copy|copy(kotlin.Long;cn.rtast.rob.event.raw.GroupSender;kotlin.uuid.Uuid?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/GroupMessage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/GroupMessage.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/GroupMessage.toString|toString(){}[0]
    final suspend fun deleteEssence() // cn.rtast.rob.event.raw.message/GroupMessage.deleteEssence|deleteEssence(){}[0]
    final suspend fun markAsRead() // cn.rtast.rob.event.raw.message/GroupMessage.markAsRead|markAsRead(){}[0]
    final suspend fun reaction(kotlin/String) // cn.rtast.rob.event.raw.message/GroupMessage.reaction|reaction(kotlin.String){}[0]
    final suspend fun reply(cn.rtast.rob.onebot/MessageChain): kotlin/Long? // cn.rtast.rob.event.raw.message/GroupMessage.reply|reply(cn.rtast.rob.onebot.MessageChain){}[0]
    final suspend fun reply(cn.rtast.rob.onebot/NodeMessageChain): cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId? // cn.rtast.rob.event.raw.message/GroupMessage.reply|reply(cn.rtast.rob.onebot.NodeMessageChain){}[0]
    final suspend fun reply(cn.rtast.rob.segment/Segment): kotlin/Long? // cn.rtast.rob.event.raw.message/GroupMessage.reply|reply(cn.rtast.rob.segment.Segment){}[0]
    final suspend fun reply(kotlin.collections/List<cn.rtast.rob.segment/Segment>): kotlin/Long? // cn.rtast.rob.event.raw.message/GroupMessage.reply|reply(kotlin.collections.List<cn.rtast.rob.segment.Segment>){}[0]
    final suspend fun reply(kotlin/String): kotlin/Long? // cn.rtast.rob.event.raw.message/GroupMessage.reply|reply(kotlin.String){}[0]
    final suspend fun replyAsync(cn.rtast.rob.onebot/MessageChain) // cn.rtast.rob.event.raw.message/GroupMessage.replyAsync|replyAsync(cn.rtast.rob.onebot.MessageChain){}[0]
    final suspend fun replyAsync(cn.rtast.rob.onebot/NodeMessageChain) // cn.rtast.rob.event.raw.message/GroupMessage.replyAsync|replyAsync(cn.rtast.rob.onebot.NodeMessageChain){}[0]
    final suspend fun replyAsync(cn.rtast.rob.segment/Segment) // cn.rtast.rob.event.raw.message/GroupMessage.replyAsync|replyAsync(cn.rtast.rob.segment.Segment){}[0]
    final suspend fun replyAsync(kotlin.collections/List<cn.rtast.rob.segment/Segment>) // cn.rtast.rob.event.raw.message/GroupMessage.replyAsync|replyAsync(kotlin.collections.List<cn.rtast.rob.segment.Segment>){}[0]
    final suspend fun replyAsync(kotlin/String) // cn.rtast.rob.event.raw.message/GroupMessage.replyAsync|replyAsync(kotlin.String){}[0]
    final suspend fun revoke(kotlin.time/Duration) // cn.rtast.rob.event.raw.message/GroupMessage.revoke|revoke(kotlin.time.Duration){}[0]
    final suspend fun revoke(kotlin/Int) // cn.rtast.rob.event.raw.message/GroupMessage.revoke|revoke(kotlin.Int){}[0]
    final suspend fun revokeId(kotlin.time/Duration, kotlin/Long) // cn.rtast.rob.event.raw.message/GroupMessage.revokeId|revokeId(kotlin.time.Duration;kotlin.Long){}[0]
    final suspend fun revokeId(kotlin/Int, kotlin/Long) // cn.rtast.rob.event.raw.message/GroupMessage.revokeId|revokeId(kotlin.Int;kotlin.Long){}[0]
    final suspend fun sendMessage(cn.rtast.rob.onebot/MessageChain): kotlin/Long? // cn.rtast.rob.event.raw.message/GroupMessage.sendMessage|sendMessage(cn.rtast.rob.onebot.MessageChain){}[0]
    final suspend fun sendMessage(cn.rtast.rob.segment/Segment): kotlin/Long? // cn.rtast.rob.event.raw.message/GroupMessage.sendMessage|sendMessage(cn.rtast.rob.segment.Segment){}[0]
    final suspend fun sendMessage(kotlin.collections/List<cn.rtast.rob.segment/Segment>): kotlin/Long? // cn.rtast.rob.event.raw.message/GroupMessage.sendMessage|sendMessage(kotlin.collections.List<cn.rtast.rob.segment.Segment>){}[0]
    final suspend fun sendMessage(kotlin/String): kotlin/Long? // cn.rtast.rob.event.raw.message/GroupMessage.sendMessage|sendMessage(kotlin.String){}[0]
    final suspend fun sendMessageAsync(cn.rtast.rob.onebot/MessageChain) // cn.rtast.rob.event.raw.message/GroupMessage.sendMessageAsync|sendMessageAsync(cn.rtast.rob.onebot.MessageChain){}[0]
    final suspend fun sendMessageAsync(cn.rtast.rob.segment/Segment) // cn.rtast.rob.event.raw.message/GroupMessage.sendMessageAsync|sendMessageAsync(cn.rtast.rob.segment.Segment){}[0]
    final suspend fun sendMessageAsync(kotlin.collections/List<cn.rtast.rob.segment/Segment>) // cn.rtast.rob.event.raw.message/GroupMessage.sendMessageAsync|sendMessageAsync(kotlin.collections.List<cn.rtast.rob.segment.Segment>){}[0]
    final suspend fun sendMessageAsync(kotlin/String) // cn.rtast.rob.event.raw.message/GroupMessage.sendMessageAsync|sendMessageAsync(kotlin.String){}[0]
    final suspend fun setEssence() // cn.rtast.rob.event.raw.message/GroupMessage.setEssence|setEssence(){}[0]
    final suspend fun unsetReaction(kotlin/String) // cn.rtast.rob.event.raw.message/GroupMessage.unsetReaction|unsetReaction(kotlin.String){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.message/GroupMessage> { // cn.rtast.rob.event.raw.message/GroupMessage.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.message/GroupMessage.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.message/GroupMessage.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.message/GroupMessage.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.message/GroupMessage // cn.rtast.rob.event.raw.message/GroupMessage.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.message/GroupMessage) // cn.rtast.rob.event.raw.message/GroupMessage.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.message.GroupMessage){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.message/GroupMessage.Companion|null[0]
        final val $childSerializers // cn.rtast.rob.event.raw.message/GroupMessage.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.message/GroupMessage> // cn.rtast.rob.event.raw.message/GroupMessage.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.message/GroupMessageHistory { // cn.rtast.rob.event.raw.message/GroupMessageHistory|null[0]
    constructor <init>(cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory) // cn.rtast.rob.event.raw.message/GroupMessageHistory.<init>|<init>(cn.rtast.rob.event.raw.message.GroupMessageHistory.MessageHistory){}[0]

    final val data // cn.rtast.rob.event.raw.message/GroupMessageHistory.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory // cn.rtast.rob.event.raw.message/GroupMessageHistory.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory // cn.rtast.rob.event.raw.message/GroupMessageHistory.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory = ...): cn.rtast.rob.event.raw.message/GroupMessageHistory // cn.rtast.rob.event.raw.message/GroupMessageHistory.copy|copy(cn.rtast.rob.event.raw.message.GroupMessageHistory.MessageHistory){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/GroupMessageHistory.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/GroupMessageHistory.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/GroupMessageHistory.toString|toString(){}[0]

    final class MessageHistory { // cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory|null[0]
        constructor <init>(kotlin.collections/List<cn.rtast.rob.event.raw.message/GroupMessage>) // cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory.<init>|<init>(kotlin.collections.List<cn.rtast.rob.event.raw.message.GroupMessage>){}[0]

        final var messages // cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory.messages|{}messages[0]
            final fun <get-messages>(): kotlin.collections/List<cn.rtast.rob.event.raw.message/GroupMessage> // cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory.messages.<get-messages>|<get-messages>(){}[0]
            final fun <set-messages>(kotlin.collections/List<cn.rtast.rob.event.raw.message/GroupMessage>) // cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory.messages.<set-messages>|<set-messages>(kotlin.collections.List<cn.rtast.rob.event.raw.message.GroupMessage>){}[0]

        final fun component1(): kotlin.collections/List<cn.rtast.rob.event.raw.message/GroupMessage> // cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory.component1|component1(){}[0]
        final fun copy(kotlin.collections/List<cn.rtast.rob.event.raw.message/GroupMessage> = ...): cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory // cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory.copy|copy(kotlin.collections.List<cn.rtast.rob.event.raw.message.GroupMessage>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory> { // cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory // cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory) // cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.message.GroupMessageHistory.MessageHistory){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory.Companion|null[0]
            final val $childSerializers // cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory> // cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.message/GroupMessageHistory> { // cn.rtast.rob.event.raw.message/GroupMessageHistory.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.message/GroupMessageHistory.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.message/GroupMessageHistory.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.message/GroupMessageHistory.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.message/GroupMessageHistory // cn.rtast.rob.event.raw.message/GroupMessageHistory.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.message/GroupMessageHistory) // cn.rtast.rob.event.raw.message/GroupMessageHistory.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.message.GroupMessageHistory){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.message/GroupMessageHistory.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.message/GroupMessageHistory> // cn.rtast.rob.event.raw.message/GroupMessageHistory.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.message/MessageStyle { // cn.rtast.rob.event.raw.message/MessageStyle|null[0]
    constructor <init>(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Boolean, kotlin/Int) // cn.rtast.rob.event.raw.message/MessageStyle.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Int){}[0]

    final val bubbleDIYTextId // cn.rtast.rob.event.raw.message/MessageStyle.bubbleDIYTextId|{}bubbleDIYTextId[0]
        final fun <get-bubbleDIYTextId>(): kotlin/Int // cn.rtast.rob.event.raw.message/MessageStyle.bubbleDIYTextId.<get-bubbleDIYTextId>|<get-bubbleDIYTextId>(){}[0]
    final val bubbleId // cn.rtast.rob.event.raw.message/MessageStyle.bubbleId|{}bubbleId[0]
        final fun <get-bubbleId>(): kotlin/Int // cn.rtast.rob.event.raw.message/MessageStyle.bubbleId.<get-bubbleId>|<get-bubbleId>(){}[0]
    final val fontEffectId // cn.rtast.rob.event.raw.message/MessageStyle.fontEffectId|{}fontEffectId[0]
        final fun <get-fontEffectId>(): kotlin/Int // cn.rtast.rob.event.raw.message/MessageStyle.fontEffectId.<get-fontEffectId>|<get-fontEffectId>(){}[0]
    final val fontId // cn.rtast.rob.event.raw.message/MessageStyle.fontId|{}fontId[0]
        final fun <get-fontId>(): kotlin/Int // cn.rtast.rob.event.raw.message/MessageStyle.fontId.<get-fontId>|<get-fontId>(){}[0]
    final val isCsFontEffectEnabled // cn.rtast.rob.event.raw.message/MessageStyle.isCsFontEffectEnabled|{}isCsFontEffectEnabled[0]
        final fun <get-isCsFontEffectEnabled>(): kotlin/Boolean // cn.rtast.rob.event.raw.message/MessageStyle.isCsFontEffectEnabled.<get-isCsFontEffectEnabled>|<get-isCsFontEffectEnabled>(){}[0]
    final val pendantId // cn.rtast.rob.event.raw.message/MessageStyle.pendantId|{}pendantId[0]
        final fun <get-pendantId>(): kotlin/Int // cn.rtast.rob.event.raw.message/MessageStyle.pendantId.<get-pendantId>|<get-pendantId>(){}[0]

    final fun component1(): kotlin/Int // cn.rtast.rob.event.raw.message/MessageStyle.component1|component1(){}[0]
    final fun component2(): kotlin/Int // cn.rtast.rob.event.raw.message/MessageStyle.component2|component2(){}[0]
    final fun component3(): kotlin/Int // cn.rtast.rob.event.raw.message/MessageStyle.component3|component3(){}[0]
    final fun component4(): kotlin/Int // cn.rtast.rob.event.raw.message/MessageStyle.component4|component4(){}[0]
    final fun component5(): kotlin/Boolean // cn.rtast.rob.event.raw.message/MessageStyle.component5|component5(){}[0]
    final fun component6(): kotlin/Int // cn.rtast.rob.event.raw.message/MessageStyle.component6|component6(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Int = ..., kotlin/Boolean = ..., kotlin/Int = ...): cn.rtast.rob.event.raw.message/MessageStyle // cn.rtast.rob.event.raw.message/MessageStyle.copy|copy(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/MessageStyle.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/MessageStyle.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/MessageStyle.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.message/MessageStyle> { // cn.rtast.rob.event.raw.message/MessageStyle.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.message/MessageStyle.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.message/MessageStyle.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.message/MessageStyle.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.message/MessageStyle // cn.rtast.rob.event.raw.message/MessageStyle.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.message/MessageStyle) // cn.rtast.rob.event.raw.message/MessageStyle.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.message.MessageStyle){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.message/MessageStyle.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.message/MessageStyle> // cn.rtast.rob.event.raw.message/MessageStyle.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.message/PrivateMessage : cn.rtast.rob.actionable/MessageActionable, cn.rtast.rob.entity/IPrivateMessage, cn.rtast.rob.event.raw.message/BaseMessage { // cn.rtast.rob.event.raw.message/PrivateMessage|null[0]
    constructor <init>(cn.rtast.rob.event.raw/PrivateSender, kotlin.uuid/Uuid? = ...) // cn.rtast.rob.event.raw.message/PrivateMessage.<init>|<init>(cn.rtast.rob.event.raw.PrivateSender;kotlin.uuid.Uuid?){}[0]

    final val sender // cn.rtast.rob.event.raw.message/PrivateMessage.sender|{}sender[0]
        final fun <get-sender>(): cn.rtast.rob.event.raw/PrivateSender // cn.rtast.rob.event.raw.message/PrivateMessage.sender.<get-sender>|<get-sender>(){}[0]

    final var action // cn.rtast.rob.event.raw.message/PrivateMessage.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.message/PrivateMessage.action.<get-action>|<get-action>(){}[0]
        final fun <set-action>(cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.message/PrivateMessage.action.<set-action>|<set-action>(cn.rtast.rob.onebot.OneBotAction){}[0]
    final var sessionId // cn.rtast.rob.event.raw.message/PrivateMessage.sessionId|{}sessionId[0]
        final fun <get-sessionId>(): kotlin.uuid/Uuid? // cn.rtast.rob.event.raw.message/PrivateMessage.sessionId.<get-sessionId>|<get-sessionId>(){}[0]
        final fun <set-sessionId>(kotlin.uuid/Uuid?) // cn.rtast.rob.event.raw.message/PrivateMessage.sessionId.<set-sessionId>|<set-sessionId>(kotlin.uuid.Uuid?){}[0]

    final fun component1(): cn.rtast.rob.event.raw/PrivateSender // cn.rtast.rob.event.raw.message/PrivateMessage.component1|component1(){}[0]
    final fun component2(): kotlin.uuid/Uuid? // cn.rtast.rob.event.raw.message/PrivateMessage.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.event.raw/PrivateSender = ..., kotlin.uuid/Uuid? = ...): cn.rtast.rob.event.raw.message/PrivateMessage // cn.rtast.rob.event.raw.message/PrivateMessage.copy|copy(cn.rtast.rob.event.raw.PrivateSender;kotlin.uuid.Uuid?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/PrivateMessage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/PrivateMessage.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/PrivateMessage.toString|toString(){}[0]
    final suspend fun markAsRead() // cn.rtast.rob.event.raw.message/PrivateMessage.markAsRead|markAsRead(){}[0]
    final suspend fun reply(cn.rtast.rob.onebot/MessageChain): kotlin/Long? // cn.rtast.rob.event.raw.message/PrivateMessage.reply|reply(cn.rtast.rob.onebot.MessageChain){}[0]
    final suspend fun reply(cn.rtast.rob.onebot/NodeMessageChain): cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId? // cn.rtast.rob.event.raw.message/PrivateMessage.reply|reply(cn.rtast.rob.onebot.NodeMessageChain){}[0]
    final suspend fun reply(cn.rtast.rob.segment/Segment): kotlin/Long? // cn.rtast.rob.event.raw.message/PrivateMessage.reply|reply(cn.rtast.rob.segment.Segment){}[0]
    final suspend fun reply(kotlin.collections/List<cn.rtast.rob.segment/Segment>): kotlin/Long? // cn.rtast.rob.event.raw.message/PrivateMessage.reply|reply(kotlin.collections.List<cn.rtast.rob.segment.Segment>){}[0]
    final suspend fun reply(kotlin/String): kotlin/Long? // cn.rtast.rob.event.raw.message/PrivateMessage.reply|reply(kotlin.String){}[0]
    final suspend fun replyAsync(cn.rtast.rob.onebot/MessageChain) // cn.rtast.rob.event.raw.message/PrivateMessage.replyAsync|replyAsync(cn.rtast.rob.onebot.MessageChain){}[0]
    final suspend fun replyAsync(cn.rtast.rob.onebot/NodeMessageChain) // cn.rtast.rob.event.raw.message/PrivateMessage.replyAsync|replyAsync(cn.rtast.rob.onebot.NodeMessageChain){}[0]
    final suspend fun replyAsync(cn.rtast.rob.segment/Segment) // cn.rtast.rob.event.raw.message/PrivateMessage.replyAsync|replyAsync(cn.rtast.rob.segment.Segment){}[0]
    final suspend fun replyAsync(kotlin.collections/List<cn.rtast.rob.segment/Segment>) // cn.rtast.rob.event.raw.message/PrivateMessage.replyAsync|replyAsync(kotlin.collections.List<cn.rtast.rob.segment.Segment>){}[0]
    final suspend fun replyAsync(kotlin/String) // cn.rtast.rob.event.raw.message/PrivateMessage.replyAsync|replyAsync(kotlin.String){}[0]
    final suspend fun revoke(kotlin.time/Duration) // cn.rtast.rob.event.raw.message/PrivateMessage.revoke|revoke(kotlin.time.Duration){}[0]
    final suspend fun revoke(kotlin/Int) // cn.rtast.rob.event.raw.message/PrivateMessage.revoke|revoke(kotlin.Int){}[0]
    final suspend fun revokeId(kotlin.time/Duration, kotlin/Long) // cn.rtast.rob.event.raw.message/PrivateMessage.revokeId|revokeId(kotlin.time.Duration;kotlin.Long){}[0]
    final suspend fun revokeId(kotlin/Int, kotlin/Long) // cn.rtast.rob.event.raw.message/PrivateMessage.revokeId|revokeId(kotlin.Int;kotlin.Long){}[0]
    final suspend fun sendMessage(cn.rtast.rob.onebot/MessageChain): kotlin/Long? // cn.rtast.rob.event.raw.message/PrivateMessage.sendMessage|sendMessage(cn.rtast.rob.onebot.MessageChain){}[0]
    final suspend fun sendMessage(cn.rtast.rob.segment/Segment): kotlin/Long? // cn.rtast.rob.event.raw.message/PrivateMessage.sendMessage|sendMessage(cn.rtast.rob.segment.Segment){}[0]
    final suspend fun sendMessage(kotlin.collections/List<cn.rtast.rob.segment/Segment>): kotlin/Long? // cn.rtast.rob.event.raw.message/PrivateMessage.sendMessage|sendMessage(kotlin.collections.List<cn.rtast.rob.segment.Segment>){}[0]
    final suspend fun sendMessage(kotlin/String): kotlin/Long? // cn.rtast.rob.event.raw.message/PrivateMessage.sendMessage|sendMessage(kotlin.String){}[0]
    final suspend fun sendMessageAsync(cn.rtast.rob.onebot/MessageChain) // cn.rtast.rob.event.raw.message/PrivateMessage.sendMessageAsync|sendMessageAsync(cn.rtast.rob.onebot.MessageChain){}[0]
    final suspend fun sendMessageAsync(cn.rtast.rob.segment/Segment) // cn.rtast.rob.event.raw.message/PrivateMessage.sendMessageAsync|sendMessageAsync(cn.rtast.rob.segment.Segment){}[0]
    final suspend fun sendMessageAsync(kotlin.collections/List<cn.rtast.rob.segment/Segment>) // cn.rtast.rob.event.raw.message/PrivateMessage.sendMessageAsync|sendMessageAsync(kotlin.collections.List<cn.rtast.rob.segment.Segment>){}[0]
    final suspend fun sendMessageAsync(kotlin/String) // cn.rtast.rob.event.raw.message/PrivateMessage.sendMessageAsync|sendMessageAsync(kotlin.String){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.message/PrivateMessage> { // cn.rtast.rob.event.raw.message/PrivateMessage.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.message/PrivateMessage.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.message/PrivateMessage.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.message/PrivateMessage.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.message/PrivateMessage // cn.rtast.rob.event.raw.message/PrivateMessage.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.message/PrivateMessage) // cn.rtast.rob.event.raw.message/PrivateMessage.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.message.PrivateMessage){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.message/PrivateMessage.Companion|null[0]
        final val $childSerializers // cn.rtast.rob.event.raw.message/PrivateMessage.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.message/PrivateMessage> // cn.rtast.rob.event.raw.message/PrivateMessage.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.message/PrivateMessageHistory { // cn.rtast.rob.event.raw.message/PrivateMessageHistory|null[0]
    constructor <init>(cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory) // cn.rtast.rob.event.raw.message/PrivateMessageHistory.<init>|<init>(cn.rtast.rob.event.raw.message.PrivateMessageHistory.MessageHistory){}[0]

    final val data // cn.rtast.rob.event.raw.message/PrivateMessageHistory.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory // cn.rtast.rob.event.raw.message/PrivateMessageHistory.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory // cn.rtast.rob.event.raw.message/PrivateMessageHistory.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory = ...): cn.rtast.rob.event.raw.message/PrivateMessageHistory // cn.rtast.rob.event.raw.message/PrivateMessageHistory.copy|copy(cn.rtast.rob.event.raw.message.PrivateMessageHistory.MessageHistory){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/PrivateMessageHistory.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/PrivateMessageHistory.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/PrivateMessageHistory.toString|toString(){}[0]

    final class MessageHistory { // cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory|null[0]
        constructor <init>(kotlin.collections/List<cn.rtast.rob.event.raw.message/PrivateMessage>) // cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory.<init>|<init>(kotlin.collections.List<cn.rtast.rob.event.raw.message.PrivateMessage>){}[0]

        final val messages // cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory.messages|{}messages[0]
            final fun <get-messages>(): kotlin.collections/List<cn.rtast.rob.event.raw.message/PrivateMessage> // cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory.messages.<get-messages>|<get-messages>(){}[0]

        final fun component1(): kotlin.collections/List<cn.rtast.rob.event.raw.message/PrivateMessage> // cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory.component1|component1(){}[0]
        final fun copy(kotlin.collections/List<cn.rtast.rob.event.raw.message/PrivateMessage> = ...): cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory // cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory.copy|copy(kotlin.collections.List<cn.rtast.rob.event.raw.message.PrivateMessage>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory> { // cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory // cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory) // cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.message.PrivateMessageHistory.MessageHistory){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory.Companion|null[0]
            final val $childSerializers // cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory> // cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.message/PrivateMessageHistory> { // cn.rtast.rob.event.raw.message/PrivateMessageHistory.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.message/PrivateMessageHistory.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.message/PrivateMessageHistory.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.message/PrivateMessageHistory.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.message/PrivateMessageHistory // cn.rtast.rob.event.raw.message/PrivateMessageHistory.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.message/PrivateMessageHistory) // cn.rtast.rob.event.raw.message/PrivateMessageHistory.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.message.PrivateMessageHistory){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.message/PrivateMessageHistory.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.message/PrivateMessageHistory> // cn.rtast.rob.event.raw.message/PrivateMessageHistory.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.message/RawGroupRevokeMessage { // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage|null[0]
    constructor <init>(kotlin/Long, kotlin/Long, kotlin/Long, kotlin/Long) // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.<init>|<init>(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long){}[0]

    final val groupId // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.groupId|{}groupId[0]
        final fun <get-groupId>(): kotlin/Long // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.groupId.<get-groupId>|<get-groupId>(){}[0]
    final val messageId // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.messageId|{}messageId[0]
        final fun <get-messageId>(): kotlin/Long // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.messageId.<get-messageId>|<get-messageId>(){}[0]
    final val operatorId // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.operatorId|{}operatorId[0]
        final fun <get-operatorId>(): kotlin/Long // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.operatorId.<get-operatorId>|<get-operatorId>(){}[0]
    final val userId // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.userId|{}userId[0]
        final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.userId.<get-userId>|<get-userId>(){}[0]

    final var action // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.action.<get-action>|<get-action>(){}[0]
        final fun <set-action>(cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.action.<set-action>|<set-action>(cn.rtast.rob.onebot.OneBotAction){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.component1|component1(){}[0]
    final fun component2(): kotlin/Long // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.component2|component2(){}[0]
    final fun component3(): kotlin/Long // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.component3|component3(){}[0]
    final fun component4(): kotlin/Long // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.component4|component4(){}[0]
    final fun copy(kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ...): cn.rtast.rob.event.raw.message/RawGroupRevokeMessage // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.copy|copy(kotlin.Long;kotlin.Long;kotlin.Long;kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.message/RawGroupRevokeMessage> { // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.message/RawGroupRevokeMessage // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.message/RawGroupRevokeMessage) // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.message.RawGroupRevokeMessage){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.message/RawGroupRevokeMessage> // cn.rtast.rob.event.raw.message/RawGroupRevokeMessage.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage { // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage|null[0]
    constructor <init>(kotlin/Long, kotlin/Long, kotlin/Long) // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage.<init>|<init>(kotlin.Long;kotlin.Long;kotlin.Long){}[0]

    final val messageId // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage.messageId|{}messageId[0]
        final fun <get-messageId>(): kotlin/Long // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage.messageId.<get-messageId>|<get-messageId>(){}[0]
    final val operatorId // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage.operatorId|{}operatorId[0]
        final fun <get-operatorId>(): kotlin/Long // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage.operatorId.<get-operatorId>|<get-operatorId>(){}[0]
    final val userId // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage.userId|{}userId[0]
        final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage.userId.<get-userId>|<get-userId>(){}[0]

    final var action // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage.action.<get-action>|<get-action>(){}[0]
        final fun <set-action>(cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage.action.<set-action>|<set-action>(cn.rtast.rob.onebot.OneBotAction){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage.component1|component1(){}[0]
    final fun component2(): kotlin/Long // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage.component2|component2(){}[0]
    final fun component3(): kotlin/Long // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage.component3|component3(){}[0]
    final fun copy(kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ...): cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage.copy|copy(kotlin.Long;kotlin.Long;kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage> { // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage) // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.message.RawPrivateRevokeMessage){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage> // cn.rtast.rob.event.raw.message/RawPrivateRevokeMessage.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.onebot/CSRFToken { // cn.rtast.rob.event.raw.onebot/CSRFToken|null[0]
    constructor <init>(cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken) // cn.rtast.rob.event.raw.onebot/CSRFToken.<init>|<init>(cn.rtast.rob.event.raw.onebot.CSRFToken.CSRFToken){}[0]

    final val data // cn.rtast.rob.event.raw.onebot/CSRFToken.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken // cn.rtast.rob.event.raw.onebot/CSRFToken.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken // cn.rtast.rob.event.raw.onebot/CSRFToken.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken = ...): cn.rtast.rob.event.raw.onebot/CSRFToken // cn.rtast.rob.event.raw.onebot/CSRFToken.copy|copy(cn.rtast.rob.event.raw.onebot.CSRFToken.CSRFToken){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.onebot/CSRFToken.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.onebot/CSRFToken.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.onebot/CSRFToken.toString|toString(){}[0]

    final class CSRFToken { // cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken|null[0]
        constructor <init>(kotlin/String) // cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken.<init>|<init>(kotlin.String){}[0]

        final val token // cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken.token|{}token[0]
            final fun <get-token>(): kotlin/String // cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken.token.<get-token>|<get-token>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken.component1|component1(){}[0]
        final fun copy(kotlin/String = ...): cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken // cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken.copy|copy(kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken> { // cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken // cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken) // cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.onebot.CSRFToken.CSRFToken){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken> // cn.rtast.rob.event.raw.onebot/CSRFToken.CSRFToken.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.onebot/CSRFToken> { // cn.rtast.rob.event.raw.onebot/CSRFToken.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.onebot/CSRFToken.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.onebot/CSRFToken.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.onebot/CSRFToken.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.onebot/CSRFToken // cn.rtast.rob.event.raw.onebot/CSRFToken.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.onebot/CSRFToken) // cn.rtast.rob.event.raw.onebot/CSRFToken.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.onebot.CSRFToken){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.onebot/CSRFToken.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.onebot/CSRFToken> // cn.rtast.rob.event.raw.onebot/CSRFToken.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.onebot/GetCookies { // cn.rtast.rob.event.raw.onebot/GetCookies|null[0]
    constructor <init>(cn.rtast.rob.event.raw.onebot/GetCookies.Cookie) // cn.rtast.rob.event.raw.onebot/GetCookies.<init>|<init>(cn.rtast.rob.event.raw.onebot.GetCookies.Cookie){}[0]

    final val data // cn.rtast.rob.event.raw.onebot/GetCookies.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.onebot/GetCookies.Cookie // cn.rtast.rob.event.raw.onebot/GetCookies.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.onebot/GetCookies.Cookie // cn.rtast.rob.event.raw.onebot/GetCookies.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.onebot/GetCookies.Cookie = ...): cn.rtast.rob.event.raw.onebot/GetCookies // cn.rtast.rob.event.raw.onebot/GetCookies.copy|copy(cn.rtast.rob.event.raw.onebot.GetCookies.Cookie){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.onebot/GetCookies.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.onebot/GetCookies.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.onebot/GetCookies.toString|toString(){}[0]

    final class Cookie { // cn.rtast.rob.event.raw.onebot/GetCookies.Cookie|null[0]
        constructor <init>(kotlin/String) // cn.rtast.rob.event.raw.onebot/GetCookies.Cookie.<init>|<init>(kotlin.String){}[0]

        final val cookies // cn.rtast.rob.event.raw.onebot/GetCookies.Cookie.cookies|{}cookies[0]
            final fun <get-cookies>(): kotlin/String // cn.rtast.rob.event.raw.onebot/GetCookies.Cookie.cookies.<get-cookies>|<get-cookies>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.event.raw.onebot/GetCookies.Cookie.component1|component1(){}[0]
        final fun copy(kotlin/String = ...): cn.rtast.rob.event.raw.onebot/GetCookies.Cookie // cn.rtast.rob.event.raw.onebot/GetCookies.Cookie.copy|copy(kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.onebot/GetCookies.Cookie.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.onebot/GetCookies.Cookie.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.onebot/GetCookies.Cookie.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.onebot/GetCookies.Cookie> { // cn.rtast.rob.event.raw.onebot/GetCookies.Cookie.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.onebot/GetCookies.Cookie.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.onebot/GetCookies.Cookie.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.onebot/GetCookies.Cookie.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.onebot/GetCookies.Cookie // cn.rtast.rob.event.raw.onebot/GetCookies.Cookie.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.onebot/GetCookies.Cookie) // cn.rtast.rob.event.raw.onebot/GetCookies.Cookie.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.onebot.GetCookies.Cookie){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.onebot/GetCookies.Cookie.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.onebot/GetCookies.Cookie> // cn.rtast.rob.event.raw.onebot/GetCookies.Cookie.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.onebot/GetCookies> { // cn.rtast.rob.event.raw.onebot/GetCookies.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.onebot/GetCookies.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.onebot/GetCookies.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.onebot/GetCookies.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.onebot/GetCookies // cn.rtast.rob.event.raw.onebot/GetCookies.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.onebot/GetCookies) // cn.rtast.rob.event.raw.onebot/GetCookies.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.onebot.GetCookies){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.onebot/GetCookies.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.onebot/GetCookies> // cn.rtast.rob.event.raw.onebot/GetCookies.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.onebot/GetRKey { // cn.rtast.rob.event.raw.onebot/GetRKey|null[0]
    constructor <init>(cn.rtast.rob.event.raw.onebot/GetRKey.RKeys) // cn.rtast.rob.event.raw.onebot/GetRKey.<init>|<init>(cn.rtast.rob.event.raw.onebot.GetRKey.RKeys){}[0]

    final val data // cn.rtast.rob.event.raw.onebot/GetRKey.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.onebot/GetRKey.RKeys // cn.rtast.rob.event.raw.onebot/GetRKey.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.onebot/GetRKey.RKeys // cn.rtast.rob.event.raw.onebot/GetRKey.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.onebot/GetRKey.RKeys = ...): cn.rtast.rob.event.raw.onebot/GetRKey // cn.rtast.rob.event.raw.onebot/GetRKey.copy|copy(cn.rtast.rob.event.raw.onebot.GetRKey.RKeys){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.onebot/GetRKey.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.onebot/GetRKey.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.onebot/GetRKey.toString|toString(){}[0]

    final class RKey { // cn.rtast.rob.event.raw.onebot/GetRKey.RKey|null[0]
        constructor <init>(cn.rtast.rob.enums/RKeyType, kotlin/String, kotlin/Long, kotlin/Long) // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.<init>|<init>(cn.rtast.rob.enums.RKeyType;kotlin.String;kotlin.Long;kotlin.Long){}[0]

        final val createAt // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.createAt|{}createAt[0]
            final fun <get-createAt>(): kotlin/Long // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.createAt.<get-createAt>|<get-createAt>(){}[0]
        final val rKey // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.rKey|{}rKey[0]
            final fun <get-rKey>(): kotlin/String // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.rKey.<get-rKey>|<get-rKey>(){}[0]
        final val ttl // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.ttl|{}ttl[0]
            final fun <get-ttl>(): kotlin/Long // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.ttl.<get-ttl>|<get-ttl>(){}[0]
        final val type // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.type|{}type[0]
            final fun <get-type>(): cn.rtast.rob.enums/RKeyType // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.type.<get-type>|<get-type>(){}[0]

        final fun component1(): cn.rtast.rob.enums/RKeyType // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.component2|component2(){}[0]
        final fun component3(): kotlin/Long // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.component3|component3(){}[0]
        final fun component4(): kotlin/Long // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.component4|component4(){}[0]
        final fun copy(cn.rtast.rob.enums/RKeyType = ..., kotlin/String = ..., kotlin/Long = ..., kotlin/Long = ...): cn.rtast.rob.event.raw.onebot/GetRKey.RKey // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.copy|copy(cn.rtast.rob.enums.RKeyType;kotlin.String;kotlin.Long;kotlin.Long){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.onebot/GetRKey.RKey> { // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.onebot/GetRKey.RKey // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.onebot/GetRKey.RKey) // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.onebot.GetRKey.RKey){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.Companion|null[0]
            final val $childSerializers // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.onebot/GetRKey.RKey> // cn.rtast.rob.event.raw.onebot/GetRKey.RKey.Companion.serializer|serializer(){}[0]
        }
    }

    final class RKeys { // cn.rtast.rob.event.raw.onebot/GetRKey.RKeys|null[0]
        constructor <init>(kotlin.collections/List<cn.rtast.rob.event.raw.onebot/GetRKey.RKey>) // cn.rtast.rob.event.raw.onebot/GetRKey.RKeys.<init>|<init>(kotlin.collections.List<cn.rtast.rob.event.raw.onebot.GetRKey.RKey>){}[0]

        final val rKeys // cn.rtast.rob.event.raw.onebot/GetRKey.RKeys.rKeys|{}rKeys[0]
            final fun <get-rKeys>(): kotlin.collections/List<cn.rtast.rob.event.raw.onebot/GetRKey.RKey> // cn.rtast.rob.event.raw.onebot/GetRKey.RKeys.rKeys.<get-rKeys>|<get-rKeys>(){}[0]

        final fun component1(): kotlin.collections/List<cn.rtast.rob.event.raw.onebot/GetRKey.RKey> // cn.rtast.rob.event.raw.onebot/GetRKey.RKeys.component1|component1(){}[0]
        final fun copy(kotlin.collections/List<cn.rtast.rob.event.raw.onebot/GetRKey.RKey> = ...): cn.rtast.rob.event.raw.onebot/GetRKey.RKeys // cn.rtast.rob.event.raw.onebot/GetRKey.RKeys.copy|copy(kotlin.collections.List<cn.rtast.rob.event.raw.onebot.GetRKey.RKey>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.onebot/GetRKey.RKeys.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.onebot/GetRKey.RKeys.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.onebot/GetRKey.RKeys.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.onebot/GetRKey.RKeys> { // cn.rtast.rob.event.raw.onebot/GetRKey.RKeys.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.onebot/GetRKey.RKeys.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.onebot/GetRKey.RKeys.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.onebot/GetRKey.RKeys.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.onebot/GetRKey.RKeys // cn.rtast.rob.event.raw.onebot/GetRKey.RKeys.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.onebot/GetRKey.RKeys) // cn.rtast.rob.event.raw.onebot/GetRKey.RKeys.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.onebot.GetRKey.RKeys){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.onebot/GetRKey.RKeys.Companion|null[0]
            final val $childSerializers // cn.rtast.rob.event.raw.onebot/GetRKey.RKeys.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.onebot/GetRKey.RKeys> // cn.rtast.rob.event.raw.onebot/GetRKey.RKeys.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.onebot/GetRKey> { // cn.rtast.rob.event.raw.onebot/GetRKey.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.onebot/GetRKey.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.onebot/GetRKey.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.onebot/GetRKey.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.onebot/GetRKey // cn.rtast.rob.event.raw.onebot/GetRKey.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.onebot/GetRKey) // cn.rtast.rob.event.raw.onebot/GetRKey.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.onebot.GetRKey){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.onebot/GetRKey.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.onebot/GetRKey> // cn.rtast.rob.event.raw.onebot/GetRKey.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.onebot/OneBotStatus { // cn.rtast.rob.event.raw.onebot/OneBotStatus|null[0]
    constructor <init>(cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status) // cn.rtast.rob.event.raw.onebot/OneBotStatus.<init>|<init>(cn.rtast.rob.event.raw.onebot.RawHeartBeatEvent.Status){}[0]

    final val data // cn.rtast.rob.event.raw.onebot/OneBotStatus.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status // cn.rtast.rob.event.raw.onebot/OneBotStatus.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status // cn.rtast.rob.event.raw.onebot/OneBotStatus.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status = ...): cn.rtast.rob.event.raw.onebot/OneBotStatus // cn.rtast.rob.event.raw.onebot/OneBotStatus.copy|copy(cn.rtast.rob.event.raw.onebot.RawHeartBeatEvent.Status){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.onebot/OneBotStatus.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.onebot/OneBotStatus.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.onebot/OneBotStatus.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.onebot/OneBotStatus> { // cn.rtast.rob.event.raw.onebot/OneBotStatus.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.onebot/OneBotStatus.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.onebot/OneBotStatus.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.onebot/OneBotStatus.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.onebot/OneBotStatus // cn.rtast.rob.event.raw.onebot/OneBotStatus.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.onebot/OneBotStatus) // cn.rtast.rob.event.raw.onebot/OneBotStatus.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.onebot.OneBotStatus){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.onebot/OneBotStatus.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.onebot/OneBotStatus> // cn.rtast.rob.event.raw.onebot/OneBotStatus.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.onebot/OneBotVersionInfo { // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo|null[0]
    constructor <init>(cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo) // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.<init>|<init>(cn.rtast.rob.event.raw.onebot.OneBotVersionInfo.VersionInfo){}[0]

    final val data // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.data|{}data[0]
        final fun <get-data>(): cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.data.<get-data>|<get-data>(){}[0]

    final fun component1(): cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo = ...): cn.rtast.rob.event.raw.onebot/OneBotVersionInfo // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.copy|copy(cn.rtast.rob.event.raw.onebot.OneBotVersionInfo.VersionInfo){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.toString|toString(){}[0]

    final class VersionInfo { // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo|null[0]
        constructor <init>(kotlin/String, kotlin/String, kotlin/String, kotlin/String) // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo.<init>|<init>(kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]

        final val appName // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo.appName|{}appName[0]
            final fun <get-appName>(): kotlin/String // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo.appName.<get-appName>|<get-appName>(){}[0]
        final val appVersion // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo.appVersion|{}appVersion[0]
            final fun <get-appVersion>(): kotlin/String // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo.appVersion.<get-appVersion>|<get-appVersion>(){}[0]
        final val ntProtocol // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo.ntProtocol|{}ntProtocol[0]
            final fun <get-ntProtocol>(): kotlin/String // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo.ntProtocol.<get-ntProtocol>|<get-ntProtocol>(){}[0]
        final val protocolVersion // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo.protocolVersion|{}protocolVersion[0]
            final fun <get-protocolVersion>(): kotlin/String // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo.protocolVersion.<get-protocolVersion>|<get-protocolVersion>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo.component2|component2(){}[0]
        final fun component3(): kotlin/String // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo.component3|component3(){}[0]
        final fun component4(): kotlin/String // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo.component4|component4(){}[0]
        final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ...): cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo.copy|copy(kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo> { // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo) // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.onebot.OneBotVersionInfo.VersionInfo){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo> // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.onebot/OneBotVersionInfo> { // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.onebot/OneBotVersionInfo // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.onebot/OneBotVersionInfo) // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.onebot.OneBotVersionInfo){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.onebot/OneBotVersionInfo> // cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.onebot/RawBotOfflineEvent { // cn.rtast.rob.event.raw.onebot/RawBotOfflineEvent|null[0]
    constructor <init>(kotlin/String, kotlin/String, cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.onebot/RawBotOfflineEvent.<init>|<init>(kotlin.String;kotlin.String;cn.rtast.rob.onebot.OneBotAction){}[0]

    final val message // cn.rtast.rob.event.raw.onebot/RawBotOfflineEvent.message|{}message[0]
        final fun <get-message>(): kotlin/String // cn.rtast.rob.event.raw.onebot/RawBotOfflineEvent.message.<get-message>|<get-message>(){}[0]
    final val tag // cn.rtast.rob.event.raw.onebot/RawBotOfflineEvent.tag|{}tag[0]
        final fun <get-tag>(): kotlin/String // cn.rtast.rob.event.raw.onebot/RawBotOfflineEvent.tag.<get-tag>|<get-tag>(){}[0]

    final var action // cn.rtast.rob.event.raw.onebot/RawBotOfflineEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.onebot/RawBotOfflineEvent.action.<get-action>|<get-action>(){}[0]
        final fun <set-action>(cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.onebot/RawBotOfflineEvent.action.<set-action>|<set-action>(cn.rtast.rob.onebot.OneBotAction){}[0]

    final fun component1(): kotlin/String // cn.rtast.rob.event.raw.onebot/RawBotOfflineEvent.component1|component1(){}[0]
    final fun component2(): kotlin/String // cn.rtast.rob.event.raw.onebot/RawBotOfflineEvent.component2|component2(){}[0]
    final fun component3(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.onebot/RawBotOfflineEvent.component3|component3(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., cn.rtast.rob.onebot/OneBotAction = ...): cn.rtast.rob.event.raw.onebot/RawBotOfflineEvent // cn.rtast.rob.event.raw.onebot/RawBotOfflineEvent.copy|copy(kotlin.String;kotlin.String;cn.rtast.rob.onebot.OneBotAction){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.onebot/RawBotOfflineEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.onebot/RawBotOfflineEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.onebot/RawBotOfflineEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.raw.onebot/RawBotOnlineEvent { // cn.rtast.rob.event.raw.onebot/RawBotOnlineEvent|null[0]
    constructor <init>(kotlin/String, cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.onebot/RawBotOnlineEvent.<init>|<init>(kotlin.String;cn.rtast.rob.onebot.OneBotAction){}[0]

    final val reason // cn.rtast.rob.event.raw.onebot/RawBotOnlineEvent.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String // cn.rtast.rob.event.raw.onebot/RawBotOnlineEvent.reason.<get-reason>|<get-reason>(){}[0]

    final var action // cn.rtast.rob.event.raw.onebot/RawBotOnlineEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.onebot/RawBotOnlineEvent.action.<get-action>|<get-action>(){}[0]
        final fun <set-action>(cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.onebot/RawBotOnlineEvent.action.<set-action>|<set-action>(cn.rtast.rob.onebot.OneBotAction){}[0]

    final fun component1(): kotlin/String // cn.rtast.rob.event.raw.onebot/RawBotOnlineEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.onebot/RawBotOnlineEvent.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., cn.rtast.rob.onebot/OneBotAction = ...): cn.rtast.rob.event.raw.onebot/RawBotOnlineEvent // cn.rtast.rob.event.raw.onebot/RawBotOnlineEvent.copy|copy(kotlin.String;cn.rtast.rob.onebot.OneBotAction){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.onebot/RawBotOnlineEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.onebot/RawBotOnlineEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.onebot/RawBotOnlineEvent.toString|toString(){}[0]
}

final class cn.rtast.rob.event.raw.onebot/RawConnectEvent { // cn.rtast.rob.event.raw.onebot/RawConnectEvent|null[0]
    constructor <init>(kotlin/Long, kotlin/Long) // cn.rtast.rob.event.raw.onebot/RawConnectEvent.<init>|<init>(kotlin.Long;kotlin.Long){}[0]

    final val time // cn.rtast.rob.event.raw.onebot/RawConnectEvent.time|{}time[0]
        final fun <get-time>(): kotlin/Long // cn.rtast.rob.event.raw.onebot/RawConnectEvent.time.<get-time>|<get-time>(){}[0]

    final var action // cn.rtast.rob.event.raw.onebot/RawConnectEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.onebot/RawConnectEvent.action.<get-action>|<get-action>(){}[0]
        final fun <set-action>(cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.onebot/RawConnectEvent.action.<set-action>|<set-action>(cn.rtast.rob.onebot.OneBotAction){}[0]
    final var selfId // cn.rtast.rob.event.raw.onebot/RawConnectEvent.selfId|{}selfId[0]
        final fun <get-selfId>(): kotlin/Long // cn.rtast.rob.event.raw.onebot/RawConnectEvent.selfId.<get-selfId>|<get-selfId>(){}[0]
        final fun <set-selfId>(kotlin/Long) // cn.rtast.rob.event.raw.onebot/RawConnectEvent.selfId.<set-selfId>|<set-selfId>(kotlin.Long){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.onebot/RawConnectEvent.component1|component1(){}[0]
    final fun component2(): kotlin/Long // cn.rtast.rob.event.raw.onebot/RawConnectEvent.component2|component2(){}[0]
    final fun copy(kotlin/Long = ..., kotlin/Long = ...): cn.rtast.rob.event.raw.onebot/RawConnectEvent // cn.rtast.rob.event.raw.onebot/RawConnectEvent.copy|copy(kotlin.Long;kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.onebot/RawConnectEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.onebot/RawConnectEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.onebot/RawConnectEvent.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.onebot/RawConnectEvent> { // cn.rtast.rob.event.raw.onebot/RawConnectEvent.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.onebot/RawConnectEvent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.onebot/RawConnectEvent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.onebot/RawConnectEvent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.onebot/RawConnectEvent // cn.rtast.rob.event.raw.onebot/RawConnectEvent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.onebot/RawConnectEvent) // cn.rtast.rob.event.raw.onebot/RawConnectEvent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.onebot.RawConnectEvent){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.onebot/RawConnectEvent.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.onebot/RawConnectEvent> // cn.rtast.rob.event.raw.onebot/RawConnectEvent.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent { // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent|null[0]
    constructor <init>(kotlin/Int, cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status, kotlin/Long, kotlin/Long, kotlin/String) // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.<init>|<init>(kotlin.Int;cn.rtast.rob.event.raw.onebot.RawHeartBeatEvent.Status;kotlin.Long;kotlin.Long;kotlin.String){}[0]

    final val interval // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.interval|{}interval[0]
        final fun <get-interval>(): kotlin/Int // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.interval.<get-interval>|<get-interval>(){}[0]
    final val postType // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.postType|{}postType[0]
        final fun <get-postType>(): kotlin/String // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.postType.<get-postType>|<get-postType>(){}[0]
    final val selfId // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.selfId|{}selfId[0]
        final fun <get-selfId>(): kotlin/Long // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.selfId.<get-selfId>|<get-selfId>(){}[0]
    final val status // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.status|{}status[0]
        final fun <get-status>(): cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.status.<get-status>|<get-status>(){}[0]
    final val time // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.time|{}time[0]
        final fun <get-time>(): kotlin/Long // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.time.<get-time>|<get-time>(){}[0]

    final var action // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.action.<get-action>|<get-action>(){}[0]
        final fun <set-action>(cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.action.<set-action>|<set-action>(cn.rtast.rob.onebot.OneBotAction){}[0]

    final fun component1(): kotlin/Int // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.component1|component1(){}[0]
    final fun component2(): cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.component2|component2(){}[0]
    final fun component3(): kotlin/Long // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.component3|component3(){}[0]
    final fun component4(): kotlin/Long // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.component4|component4(){}[0]
    final fun component5(): kotlin/String // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.component5|component5(){}[0]
    final fun copy(kotlin/Int = ..., cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/String = ...): cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.copy|copy(kotlin.Int;cn.rtast.rob.event.raw.onebot.RawHeartBeatEvent.Status;kotlin.Long;kotlin.Long;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.toString|toString(){}[0]

    final class Status { // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status|null[0]
        constructor <init>(kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean, kotlin/Boolean) // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.<init>|<init>(kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]

        final val appEnabled // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.appEnabled|{}appEnabled[0]
            final fun <get-appEnabled>(): kotlin/Boolean // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.appEnabled.<get-appEnabled>|<get-appEnabled>(){}[0]
        final val appGood // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.appGood|{}appGood[0]
            final fun <get-appGood>(): kotlin/Boolean // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.appGood.<get-appGood>|<get-appGood>(){}[0]
        final val appInitialized // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.appInitialized|{}appInitialized[0]
            final fun <get-appInitialized>(): kotlin/Boolean // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.appInitialized.<get-appInitialized>|<get-appInitialized>(){}[0]
        final val good // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.good|{}good[0]
            final fun <get-good>(): kotlin/Boolean // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.good.<get-good>|<get-good>(){}[0]
        final val online // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.online|{}online[0]
            final fun <get-online>(): kotlin/Boolean // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.online.<get-online>|<get-online>(){}[0]

        final fun component1(): kotlin/Boolean // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.component1|component1(){}[0]
        final fun component2(): kotlin/Boolean // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.component2|component2(){}[0]
        final fun component3(): kotlin/Boolean // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.component3|component3(){}[0]
        final fun component4(): kotlin/Boolean // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.component4|component4(){}[0]
        final fun component5(): kotlin/Boolean // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.component5|component5(){}[0]
        final fun copy(kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ..., kotlin/Boolean = ...): cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.copy|copy(kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean;kotlin.Boolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status> { // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.$serializer|null[0]
            final val descriptor // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status) // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.onebot.RawHeartBeatEvent.Status){}[0]
        }

        final object Companion { // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status> // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent> { // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent) // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.onebot.RawHeartBeatEvent){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent> // cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.request/AddFriendRequestEvent : cn.rtast.rob.actionable/RequestEventActionable { // cn.rtast.rob.event.raw.request/AddFriendRequestEvent|null[0]
    constructor <init>(kotlin/Long, kotlin/String, kotlin/String, kotlin/Long) // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.<init>|<init>(kotlin.Long;kotlin.String;kotlin.String;kotlin.Long){}[0]

    final val comment // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.comment|{}comment[0]
        final fun <get-comment>(): kotlin/String // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.comment.<get-comment>|<get-comment>(){}[0]
    final val flag // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.flag|{}flag[0]
        final fun <get-flag>(): kotlin/String // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.flag.<get-flag>|<get-flag>(){}[0]
    final val time // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.time|{}time[0]
        final fun <get-time>(): kotlin/Long // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.time.<get-time>|<get-time>(){}[0]
    final val userId // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.userId|{}userId[0]
        final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.userId.<get-userId>|<get-userId>(){}[0]

    final var action // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.action.<get-action>|<get-action>(){}[0]
        final fun <set-action>(cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.action.<set-action>|<set-action>(cn.rtast.rob.onebot.OneBotAction){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.component1|component1(){}[0]
    final fun component2(): kotlin/String // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.component2|component2(){}[0]
    final fun component3(): kotlin/String // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.component3|component3(){}[0]
    final fun component4(): kotlin/Long // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.component4|component4(){}[0]
    final fun copy(kotlin/Long = ..., kotlin/String = ..., kotlin/String = ..., kotlin/Long = ...): cn.rtast.rob.event.raw.request/AddFriendRequestEvent // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.copy|copy(kotlin.Long;kotlin.String;kotlin.String;kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.toString|toString(){}[0]
    final suspend fun approve() // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.approve|approve(){}[0]
    final suspend fun reject(kotlin/String?) // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.reject|reject(kotlin.String?){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.request/AddFriendRequestEvent> { // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.request/AddFriendRequestEvent // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.request/AddFriendRequestEvent) // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.request.AddFriendRequestEvent){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.request/AddFriendRequestEvent> // cn.rtast.rob.event.raw.request/AddFriendRequestEvent.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw.request/JoinGroupRequestEvent : cn.rtast.rob.actionable/RequestEventActionable { // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent|null[0]
    constructor <init>(kotlin/Long, kotlin/Long, kotlin/Long?, kotlin/String, kotlin/String, kotlin/Long) // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.<init>|<init>(kotlin.Long;kotlin.Long;kotlin.Long?;kotlin.String;kotlin.String;kotlin.Long){}[0]

    final val comment // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.comment|{}comment[0]
        final fun <get-comment>(): kotlin/String // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.comment.<get-comment>|<get-comment>(){}[0]
    final val flag // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.flag|{}flag[0]
        final fun <get-flag>(): kotlin/String // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.flag.<get-flag>|<get-flag>(){}[0]
    final val groupId // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.groupId|{}groupId[0]
        final fun <get-groupId>(): kotlin/Long // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.groupId.<get-groupId>|<get-groupId>(){}[0]
    final val invitorId // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.invitorId|{}invitorId[0]
        final fun <get-invitorId>(): kotlin/Long? // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.invitorId.<get-invitorId>|<get-invitorId>(){}[0]
    final val time // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.time|{}time[0]
        final fun <get-time>(): kotlin/Long // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.time.<get-time>|<get-time>(){}[0]
    final val userId // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.userId|{}userId[0]
        final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.userId.<get-userId>|<get-userId>(){}[0]

    final var action // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.action.<get-action>|<get-action>(){}[0]
        final fun <set-action>(cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.action.<set-action>|<set-action>(cn.rtast.rob.onebot.OneBotAction){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.component1|component1(){}[0]
    final fun component2(): kotlin/Long // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.component2|component2(){}[0]
    final fun component3(): kotlin/Long? // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.component3|component3(){}[0]
    final fun component4(): kotlin/String // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.component4|component4(){}[0]
    final fun component5(): kotlin/String // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.component5|component5(){}[0]
    final fun component6(): kotlin/Long // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.component6|component6(){}[0]
    final fun copy(kotlin/Long = ..., kotlin/Long = ..., kotlin/Long? = ..., kotlin/String = ..., kotlin/String = ..., kotlin/Long = ...): cn.rtast.rob.event.raw.request/JoinGroupRequestEvent // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.copy|copy(kotlin.Long;kotlin.Long;kotlin.Long?;kotlin.String;kotlin.String;kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.toString|toString(){}[0]
    final suspend fun approve() // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.approve|approve(){}[0]
    final suspend fun reject(kotlin/String?) // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.reject|reject(kotlin.String?){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw.request/JoinGroupRequestEvent> { // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw.request/JoinGroupRequestEvent // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw.request/JoinGroupRequestEvent) // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.request.JoinGroupRequestEvent){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.request/JoinGroupRequestEvent> // cn.rtast.rob.event.raw.request/JoinGroupRequestEvent.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw/GroupSender : cn.rtast.rob.actionable/GroupUserActionable, cn.rtast.rob.entity/IGroupSender { // cn.rtast.rob.event.raw/GroupSender|null[0]
    constructor <init>(kotlin/Long, kotlin/String, cn.rtast.rob.enums/UserSex?, cn.rtast.rob.enums/UserRole, kotlin/String?, kotlin/String?, kotlin/Int = ..., kotlin/String?, kotlin/Long = ...) // cn.rtast.rob.event.raw/GroupSender.<init>|<init>(kotlin.Long;kotlin.String;cn.rtast.rob.enums.UserSex?;cn.rtast.rob.enums.UserRole;kotlin.String?;kotlin.String?;kotlin.Int;kotlin.String?;kotlin.Long){}[0]

    final val age // cn.rtast.rob.event.raw/GroupSender.age|{}age[0]
        final fun <get-age>(): kotlin/Int // cn.rtast.rob.event.raw/GroupSender.age.<get-age>|<get-age>(){}[0]
    final val card // cn.rtast.rob.event.raw/GroupSender.card|{}card[0]
        final fun <get-card>(): kotlin/String? // cn.rtast.rob.event.raw/GroupSender.card.<get-card>|<get-card>(){}[0]
    final val groupId // cn.rtast.rob.event.raw/GroupSender.groupId|{}groupId[0]
        final fun <get-groupId>(): kotlin/Long // cn.rtast.rob.event.raw/GroupSender.groupId.<get-groupId>|<get-groupId>(){}[0]
    final val isAdmin // cn.rtast.rob.event.raw/GroupSender.isAdmin|{}isAdmin[0]
        final fun <get-isAdmin>(): kotlin/Boolean // cn.rtast.rob.event.raw/GroupSender.isAdmin.<get-isAdmin>|<get-isAdmin>(){}[0]
    final val isOwner // cn.rtast.rob.event.raw/GroupSender.isOwner|{}isOwner[0]
        final fun <get-isOwner>(): kotlin/Boolean // cn.rtast.rob.event.raw/GroupSender.isOwner.<get-isOwner>|<get-isOwner>(){}[0]
    final val level // cn.rtast.rob.event.raw/GroupSender.level|{}level[0]
        final fun <get-level>(): kotlin/String? // cn.rtast.rob.event.raw/GroupSender.level.<get-level>|<get-level>(){}[0]
    final val name // cn.rtast.rob.event.raw/GroupSender.name|{}name[0]
        final fun <get-name>(): kotlin/String // cn.rtast.rob.event.raw/GroupSender.name.<get-name>|<get-name>(){}[0]
    final val nickname // cn.rtast.rob.event.raw/GroupSender.nickname|{}nickname[0]
        final fun <get-nickname>(): kotlin/String // cn.rtast.rob.event.raw/GroupSender.nickname.<get-nickname>|<get-nickname>(){}[0]
    final val role // cn.rtast.rob.event.raw/GroupSender.role|{}role[0]
        final fun <get-role>(): cn.rtast.rob.enums/UserRole // cn.rtast.rob.event.raw/GroupSender.role.<get-role>|<get-role>(){}[0]
    final val sex // cn.rtast.rob.event.raw/GroupSender.sex|{}sex[0]
        final fun <get-sex>(): cn.rtast.rob.enums/UserSex? // cn.rtast.rob.event.raw/GroupSender.sex.<get-sex>|<get-sex>(){}[0]
    final val title // cn.rtast.rob.event.raw/GroupSender.title|{}title[0]
        final fun <get-title>(): kotlin/String? // cn.rtast.rob.event.raw/GroupSender.title.<get-title>|<get-title>(){}[0]
    final val userId // cn.rtast.rob.event.raw/GroupSender.userId|{}userId[0]
        final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw/GroupSender.userId.<get-userId>|<get-userId>(){}[0]

    final var action // cn.rtast.rob.event.raw/GroupSender.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw/GroupSender.action.<get-action>|<get-action>(){}[0]
        final fun <set-action>(cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw/GroupSender.action.<set-action>|<set-action>(cn.rtast.rob.onebot.OneBotAction){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.event.raw/GroupSender.component1|component1(){}[0]
    final fun component2(): kotlin/String // cn.rtast.rob.event.raw/GroupSender.component2|component2(){}[0]
    final fun component3(): cn.rtast.rob.enums/UserSex? // cn.rtast.rob.event.raw/GroupSender.component3|component3(){}[0]
    final fun component4(): cn.rtast.rob.enums/UserRole // cn.rtast.rob.event.raw/GroupSender.component4|component4(){}[0]
    final fun component5(): kotlin/String? // cn.rtast.rob.event.raw/GroupSender.component5|component5(){}[0]
    final fun component6(): kotlin/String? // cn.rtast.rob.event.raw/GroupSender.component6|component6(){}[0]
    final fun component7(): kotlin/Int // cn.rtast.rob.event.raw/GroupSender.component7|component7(){}[0]
    final fun component8(): kotlin/String? // cn.rtast.rob.event.raw/GroupSender.component8|component8(){}[0]
    final fun component9(): kotlin/Long // cn.rtast.rob.event.raw/GroupSender.component9|component9(){}[0]
    final fun copy(kotlin/Long = ..., kotlin/String = ..., cn.rtast.rob.enums/UserSex? = ..., cn.rtast.rob.enums/UserRole = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/Int = ..., kotlin/String? = ..., kotlin/Long = ...): cn.rtast.rob.event.raw/GroupSender // cn.rtast.rob.event.raw/GroupSender.copy|copy(kotlin.Long;kotlin.String;cn.rtast.rob.enums.UserSex?;cn.rtast.rob.enums.UserRole;kotlin.String?;kotlin.String?;kotlin.Int;kotlin.String?;kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw/GroupSender.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw/GroupSender.hashCode|hashCode(){}[0]
    final fun invoke(): kotlin/Long // cn.rtast.rob.event.raw/GroupSender.invoke|invoke(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw/GroupSender.toString|toString(){}[0]
    final suspend fun ban(kotlin/Int) // cn.rtast.rob.event.raw/GroupSender.ban|ban(kotlin.Int){}[0]
    final suspend fun deleteFriend() // cn.rtast.rob.event.raw/GroupSender.deleteFriend|deleteFriend(){}[0]
    final suspend fun deleteFriend(kotlin/Boolean) // cn.rtast.rob.event.raw/GroupSender.deleteFriend|deleteFriend(kotlin.Boolean){}[0]
    final suspend fun getMemberInfo(): cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo // cn.rtast.rob.event.raw/GroupSender.getMemberInfo|getMemberInfo(){}[0]
    final suspend fun getStrangerInfo(): cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo // cn.rtast.rob.event.raw/GroupSender.getStrangerInfo|getStrangerInfo(){}[0]
    final suspend fun isFriend(): kotlin/Boolean // cn.rtast.rob.event.raw/GroupSender.isFriend|isFriend(){}[0]
    final suspend fun kick(kotlin/Boolean) // cn.rtast.rob.event.raw/GroupSender.kick|kick(kotlin.Boolean){}[0]
    final suspend fun poke() // cn.rtast.rob.event.raw/GroupSender.poke|poke(){}[0]
    final suspend fun privatePoke() // cn.rtast.rob.event.raw/GroupSender.privatePoke|privatePoke(){}[0]
    final suspend fun sendLike(kotlin/Int) // cn.rtast.rob.event.raw/GroupSender.sendLike|sendLike(kotlin.Int){}[0]
    final suspend fun sendMessage(cn.rtast.rob.onebot/MessageChain): kotlin/Long? // cn.rtast.rob.event.raw/GroupSender.sendMessage|sendMessage(cn.rtast.rob.onebot.MessageChain){}[0]
    final suspend fun sendMessage(cn.rtast.rob.segment/Segment): kotlin/Long? // cn.rtast.rob.event.raw/GroupSender.sendMessage|sendMessage(cn.rtast.rob.segment.Segment){}[0]
    final suspend fun sendMessage(kotlin.collections/List<cn.rtast.rob.segment/Segment>): kotlin/Long? // cn.rtast.rob.event.raw/GroupSender.sendMessage|sendMessage(kotlin.collections.List<cn.rtast.rob.segment.Segment>){}[0]
    final suspend fun sendMessage(kotlin/String): kotlin/Long? // cn.rtast.rob.event.raw/GroupSender.sendMessage|sendMessage(kotlin.String){}[0]
    final suspend fun sendMessageAsync(cn.rtast.rob.onebot/MessageChain) // cn.rtast.rob.event.raw/GroupSender.sendMessageAsync|sendMessageAsync(cn.rtast.rob.onebot.MessageChain){}[0]
    final suspend fun sendMessageAsync(cn.rtast.rob.segment/Segment) // cn.rtast.rob.event.raw/GroupSender.sendMessageAsync|sendMessageAsync(cn.rtast.rob.segment.Segment){}[0]
    final suspend fun sendMessageAsync(kotlin.collections/List<cn.rtast.rob.segment/Segment>) // cn.rtast.rob.event.raw/GroupSender.sendMessageAsync|sendMessageAsync(kotlin.collections.List<cn.rtast.rob.segment.Segment>){}[0]
    final suspend fun sendMessageAsync(kotlin/String) // cn.rtast.rob.event.raw/GroupSender.sendMessageAsync|sendMessageAsync(kotlin.String){}[0]
    final suspend fun setGroupAdmin(kotlin/Boolean) // cn.rtast.rob.event.raw/GroupSender.setGroupAdmin|setGroupAdmin(kotlin.Boolean){}[0]
    final suspend fun setGroupCard(kotlin/String?) // cn.rtast.rob.event.raw/GroupSender.setGroupCard|setGroupCard(kotlin.String?){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw/GroupSender> { // cn.rtast.rob.event.raw/GroupSender.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw/GroupSender.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw/GroupSender.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw/GroupSender.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw/GroupSender // cn.rtast.rob.event.raw/GroupSender.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw/GroupSender) // cn.rtast.rob.event.raw/GroupSender.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.GroupSender){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw/GroupSender.Companion|null[0]
        final val $childSerializers // cn.rtast.rob.event.raw/GroupSender.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw/GroupSender> // cn.rtast.rob.event.raw/GroupSender.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.event.raw/PrivateSender : cn.rtast.rob.actionable/UserActionable, cn.rtast.rob.entity/IPrivateSender { // cn.rtast.rob.event.raw/PrivateSender|null[0]
    constructor <init>(kotlin/Long, kotlin/String, cn.rtast.rob.enums/UserSex, kotlin/Int = ...) // cn.rtast.rob.event.raw/PrivateSender.<init>|<init>(kotlin.Long;kotlin.String;cn.rtast.rob.enums.UserSex;kotlin.Int){}[0]

    final val age // cn.rtast.rob.event.raw/PrivateSender.age|{}age[0]
        final fun <get-age>(): kotlin/Int // cn.rtast.rob.event.raw/PrivateSender.age.<get-age>|<get-age>(){}[0]
    final val nickname // cn.rtast.rob.event.raw/PrivateSender.nickname|{}nickname[0]
        final fun <get-nickname>(): kotlin/String // cn.rtast.rob.event.raw/PrivateSender.nickname.<get-nickname>|<get-nickname>(){}[0]
    final val sex // cn.rtast.rob.event.raw/PrivateSender.sex|{}sex[0]
        final fun <get-sex>(): cn.rtast.rob.enums/UserSex // cn.rtast.rob.event.raw/PrivateSender.sex.<get-sex>|<get-sex>(){}[0]
    final val userId // cn.rtast.rob.event.raw/PrivateSender.userId|{}userId[0]
        final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw/PrivateSender.userId.<get-userId>|<get-userId>(){}[0]

    final var action // cn.rtast.rob.event.raw/PrivateSender.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob.event.raw/PrivateSender.action.<get-action>|<get-action>(){}[0]
        final fun <set-action>(cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw/PrivateSender.action.<set-action>|<set-action>(cn.rtast.rob.onebot.OneBotAction){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.event.raw/PrivateSender.component1|component1(){}[0]
    final fun component2(): kotlin/String // cn.rtast.rob.event.raw/PrivateSender.component2|component2(){}[0]
    final fun component3(): cn.rtast.rob.enums/UserSex // cn.rtast.rob.event.raw/PrivateSender.component3|component3(){}[0]
    final fun component4(): kotlin/Int // cn.rtast.rob.event.raw/PrivateSender.component4|component4(){}[0]
    final fun copy(kotlin/Long = ..., kotlin/String = ..., cn.rtast.rob.enums/UserSex = ..., kotlin/Int = ...): cn.rtast.rob.event.raw/PrivateSender // cn.rtast.rob.event.raw/PrivateSender.copy|copy(kotlin.Long;kotlin.String;cn.rtast.rob.enums.UserSex;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw/PrivateSender.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw/PrivateSender.hashCode|hashCode(){}[0]
    final fun invoke(): kotlin/Long // cn.rtast.rob.event.raw/PrivateSender.invoke|invoke(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.event.raw/PrivateSender.toString|toString(){}[0]
    final suspend fun deleteFriend() // cn.rtast.rob.event.raw/PrivateSender.deleteFriend|deleteFriend(){}[0]
    final suspend fun deleteFriend(kotlin/Boolean) // cn.rtast.rob.event.raw/PrivateSender.deleteFriend|deleteFriend(kotlin.Boolean){}[0]
    final suspend fun getStrangerInfo(): cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo // cn.rtast.rob.event.raw/PrivateSender.getStrangerInfo|getStrangerInfo(){}[0]
    final suspend fun isFriend(): kotlin/Boolean // cn.rtast.rob.event.raw/PrivateSender.isFriend|isFriend(){}[0]
    final suspend fun poke() // cn.rtast.rob.event.raw/PrivateSender.poke|poke(){}[0]
    final suspend fun sendLike(kotlin/Int) // cn.rtast.rob.event.raw/PrivateSender.sendLike|sendLike(kotlin.Int){}[0]
    final suspend fun sendMessage(cn.rtast.rob.onebot/MessageChain): kotlin/Long? // cn.rtast.rob.event.raw/PrivateSender.sendMessage|sendMessage(cn.rtast.rob.onebot.MessageChain){}[0]
    final suspend fun sendMessage(cn.rtast.rob.segment/Segment): kotlin/Long? // cn.rtast.rob.event.raw/PrivateSender.sendMessage|sendMessage(cn.rtast.rob.segment.Segment){}[0]
    final suspend fun sendMessage(kotlin.collections/List<cn.rtast.rob.segment/Segment>): kotlin/Long? // cn.rtast.rob.event.raw/PrivateSender.sendMessage|sendMessage(kotlin.collections.List<cn.rtast.rob.segment.Segment>){}[0]
    final suspend fun sendMessage(kotlin/String): kotlin/Long? // cn.rtast.rob.event.raw/PrivateSender.sendMessage|sendMessage(kotlin.String){}[0]
    final suspend fun sendMessageAsync(cn.rtast.rob.onebot/MessageChain) // cn.rtast.rob.event.raw/PrivateSender.sendMessageAsync|sendMessageAsync(cn.rtast.rob.onebot.MessageChain){}[0]
    final suspend fun sendMessageAsync(cn.rtast.rob.segment/Segment) // cn.rtast.rob.event.raw/PrivateSender.sendMessageAsync|sendMessageAsync(cn.rtast.rob.segment.Segment){}[0]
    final suspend fun sendMessageAsync(kotlin.collections/List<cn.rtast.rob.segment/Segment>) // cn.rtast.rob.event.raw/PrivateSender.sendMessageAsync|sendMessageAsync(kotlin.collections.List<cn.rtast.rob.segment.Segment>){}[0]
    final suspend fun sendMessageAsync(kotlin/String) // cn.rtast.rob.event.raw/PrivateSender.sendMessageAsync|sendMessageAsync(kotlin.String){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.event.raw/PrivateSender> { // cn.rtast.rob.event.raw/PrivateSender.$serializer|null[0]
        final val descriptor // cn.rtast.rob.event.raw/PrivateSender.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.event.raw/PrivateSender.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.event.raw/PrivateSender.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.event.raw/PrivateSender // cn.rtast.rob.event.raw/PrivateSender.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.event.raw/PrivateSender) // cn.rtast.rob.event.raw/PrivateSender.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.event.raw.PrivateSender){}[0]
    }

    final object Companion { // cn.rtast.rob.event.raw/PrivateSender.Companion|null[0]
        final val $childSerializers // cn.rtast.rob.event.raw/PrivateSender.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw/PrivateSender> // cn.rtast.rob.event.raw/PrivateSender.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.exceptions/IllegalDelayException : kotlin/Exception { // cn.rtast.rob.exceptions/IllegalDelayException|null[0]
    constructor <init>(kotlin/String) // cn.rtast.rob.exceptions/IllegalDelayException.<init>|<init>(kotlin.String){}[0]

    final val message // cn.rtast.rob.exceptions/IllegalDelayException.message|{}message[0]
        final fun <get-message>(): kotlin/String // cn.rtast.rob.exceptions/IllegalDelayException.message.<get-message>|<get-message>(){}[0]
}

final class cn.rtast.rob.exceptions/IllegalDurationException : kotlin/Exception { // cn.rtast.rob.exceptions/IllegalDurationException|null[0]
    constructor <init>(kotlin/String) // cn.rtast.rob.exceptions/IllegalDurationException.<init>|<init>(kotlin.String){}[0]

    final val message // cn.rtast.rob.exceptions/IllegalDurationException.message|{}message[0]
        final fun <get-message>(): kotlin/String // cn.rtast.rob.exceptions/IllegalDurationException.message.<get-message>|<get-message>(){}[0]
}

final class cn.rtast.rob.exceptions/IllegalLikeTimesException : kotlin/Exception { // cn.rtast.rob.exceptions/IllegalLikeTimesException|null[0]
    constructor <init>(kotlin/String) // cn.rtast.rob.exceptions/IllegalLikeTimesException.<init>|<init>(kotlin.String){}[0]

    final val message // cn.rtast.rob.exceptions/IllegalLikeTimesException.message|{}message[0]
        final fun <get-message>(): kotlin/String // cn.rtast.rob.exceptions/IllegalLikeTimesException.message.<get-message>|<get-message>(){}[0]
}

final class cn.rtast.rob.onebot/MessageChain : cn.rtast.rob.entity/IMessageChain { // cn.rtast.rob.onebot/MessageChain|null[0]
    final val isEmpty // cn.rtast.rob.onebot/MessageChain.isEmpty|{}isEmpty[0]
        final fun <get-isEmpty>(): kotlin/Boolean // cn.rtast.rob.onebot/MessageChain.isEmpty.<get-isEmpty>|<get-isEmpty>(){}[0]
    final val size // cn.rtast.rob.onebot/MessageChain.size|{}size[0]
        final fun <get-size>(): kotlin/Int // cn.rtast.rob.onebot/MessageChain.size.<get-size>|<get-size>(){}[0]

    final fun (cn.rtast.rob.onebot/MessageChain).plus(cn.rtast.rob.onebot/MessageChain): cn.rtast.rob.onebot/MessageChain // cn.rtast.rob.onebot/MessageChain.plus|plus@cn.rtast.rob.onebot.MessageChain(cn.rtast.rob.onebot.MessageChain){}[0]
    final fun (cn.rtast.rob.onebot/MessageChain.Builder).plus(cn.rtast.rob.onebot/MessageChain.Builder): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.plus|plus@cn.rtast.rob.onebot.MessageChain.Builder(cn.rtast.rob.onebot.MessageChain.Builder){}[0]
    final fun asNode(kotlin/Long): cn.rtast.rob.onebot/NodeMessageChain // cn.rtast.rob.onebot/MessageChain.asNode|asNode(kotlin.Long){}[0]
    final fun plus(cn.rtast.rob.segment/Segment): cn.rtast.rob.onebot/MessageChain // cn.rtast.rob.onebot/MessageChain.plus|plus(cn.rtast.rob.segment.Segment){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.onebot/MessageChain.toString|toString(){}[0]

    final class Builder { // cn.rtast.rob.onebot/MessageChain.Builder|null[0]
        constructor <init>() // cn.rtast.rob.onebot/MessageChain.Builder.<init>|<init>(){}[0]

        final fun (cn.rtast.rob.segment/Segment).unaryPlus() // cn.rtast.rob.onebot/MessageChain.Builder.unaryPlus|unaryPlus@cn.rtast.rob.segment.Segment(){}[0]
        final fun add(cn.rtast.rob.segment/Segment): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.add|add(cn.rtast.rob.segment.Segment){}[0]
        final fun addAt(kotlin/Long): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addAt|addAt(kotlin.Long){}[0]
        final fun addAtAll(): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addAtAll|addAtAll(){}[0]
        final fun addContactFriend(kotlin/Long): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addContactFriend|addContactFriend(kotlin.Long){}[0]
        final fun addContactGroup(kotlin/Long): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addContactGroup|addContactGroup(kotlin.Long){}[0]
        final fun addCustomMusicShare(kotlin/String, kotlin/String, kotlin/String, kotlin/String? = ..., kotlin/String? = ...): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addCustomMusicShare|addCustomMusicShare(kotlin.String;kotlin.String;kotlin.String;kotlin.String?;kotlin.String?){}[0]
        final fun addDice(): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addDice|addDice(){}[0]
        final fun addFace(cn.rtast.rob.enums/QQFace): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addFace|addFace(cn.rtast.rob.enums.QQFace){}[0]
        final fun addFace(kotlin/Int): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addFace|addFace(kotlin.Int){}[0]
        final fun addImage(cn.rtast.rob.entity/Resource): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addImage|addImage(cn.rtast.rob.entity.Resource){}[0]
        final fun addImage(kotlin/String, kotlin/Boolean = ...): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addImage|addImage(kotlin.String;kotlin.Boolean){}[0]
        final fun addJSON(kotlin/String): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addJSON|addJSON(kotlin.String){}[0]
        final fun addLocation(kotlin/Double, kotlin/Double, kotlin/String? = ..., kotlin/String? = ...): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addLocation|addLocation(kotlin.Double;kotlin.Double;kotlin.String?;kotlin.String?){}[0]
        final fun addMarkdown(kotlin/String): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addMarkdown|addMarkdown(kotlin.String){}[0]
        final fun addMention(kotlin/Long): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addMention|addMention(kotlin.Long){}[0]
        final fun addMentionAll(): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addMentionAll|addMentionAll(){}[0]
        final fun addMessageChain(cn.rtast.rob.onebot/MessageChain.Builder): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addMessageChain|addMessageChain(cn.rtast.rob.onebot.MessageChain.Builder){}[0]
        final fun addMusicShare(cn.rtast.rob.enums/MusicShareType, kotlin/String): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addMusicShare|addMusicShare(cn.rtast.rob.enums.MusicShareType;kotlin.String){}[0]
        final fun addNewLine(kotlin/Int = ...): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addNewLine|addNewLine(kotlin.Int){}[0]
        final fun addPoke(cn.rtast.rob.enums/PokeMessage): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addPoke|addPoke(cn.rtast.rob.enums.PokeMessage){}[0]
        final fun addRPS(): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addRPS|addRPS(){}[0]
        final fun addRecord(kotlin/String): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addRecord|addRecord(kotlin.String){}[0]
        final fun addReply(kotlin/Long): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addReply|addReply(kotlin.Long){}[0]
        final fun addSegment(cn.rtast.rob.segment/Segment): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addSegment|addSegment(cn.rtast.rob.segment.Segment){}[0]
        final fun addShake(): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addShake|addShake(){}[0]
        final fun addShare(kotlin/String, kotlin/String, kotlin/String? = ..., kotlin/String? = ...): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addShare|addShare(kotlin.String;kotlin.String;kotlin.String?;kotlin.String?){}[0]
        final fun addSpaces(kotlin/Int = ...): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addSpaces|addSpaces(kotlin.Int){}[0]
        final fun addText(kotlin/Any): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addText|addText(kotlin.Any){}[0]
        final fun addTextLine(kotlin/Any): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addTextLine|addTextLine(kotlin.Any){}[0]
        final fun addVideo(kotlin/String): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addVideo|addVideo(kotlin.String){}[0]
        final fun addXML(kotlin/String): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.addXML|addXML(kotlin.String){}[0]
        final fun build(): cn.rtast.rob.onebot/MessageChain // cn.rtast.rob.onebot/MessageChain.Builder.build|build(){}[0]
        final fun invoke(cn.rtast.rob.segment/Segment): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/MessageChain.Builder.invoke|invoke(cn.rtast.rob.segment.Segment){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.onebot/MessageChain.Builder.toString|toString(){}[0]
    }
}

final class cn.rtast.rob.onebot/NodeMessageChain : cn.rtast.rob.entity/IMessageChain { // cn.rtast.rob.onebot/NodeMessageChain|null[0]
    final val isEmpty // cn.rtast.rob.onebot/NodeMessageChain.isEmpty|{}isEmpty[0]
        final fun <get-isEmpty>(): kotlin/Boolean // cn.rtast.rob.onebot/NodeMessageChain.isEmpty.<get-isEmpty>|<get-isEmpty>(){}[0]
    final val size // cn.rtast.rob.onebot/NodeMessageChain.size|{}size[0]
        final fun <get-size>(): kotlin/Int // cn.rtast.rob.onebot/NodeMessageChain.size.<get-size>|<get-size>(){}[0]

    final fun toString(): kotlin/String // cn.rtast.rob.onebot/NodeMessageChain.toString|toString(){}[0]

    final class Builder { // cn.rtast.rob.onebot/NodeMessageChain.Builder|null[0]
        constructor <init>() // cn.rtast.rob.onebot/NodeMessageChain.Builder.<init>|<init>(){}[0]

        final fun addMessageChain(cn.rtast.rob.onebot/MessageChain, kotlin/Long, kotlin/String = ...): cn.rtast.rob.onebot/NodeMessageChain.Builder // cn.rtast.rob.onebot/NodeMessageChain.Builder.addMessageChain|addMessageChain(cn.rtast.rob.onebot.MessageChain;kotlin.Long;kotlin.String){}[0]
        final fun build(): cn.rtast.rob.onebot/NodeMessageChain // cn.rtast.rob.onebot/NodeMessageChain.Builder.build|build(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.onebot/NodeMessageChain.Builder.toString|toString(){}[0]
    }
}

final class cn.rtast.rob.onebot/OneBotAction : cn.rtast.rob/SendAction { // cn.rtast.rob.onebot/OneBotAction|null[0]
    final fun toString(): kotlin/String // cn.rtast.rob.onebot/OneBotAction.toString|toString(){}[0]
    final suspend fun arkShareGroup(kotlin/Long): kotlin/String // cn.rtast.rob.onebot/OneBotAction.arkShareGroup|arkShareGroup(kotlin.Long){}[0]
    final suspend fun arkSharePeerFriend(kotlin/Long): cn.rtast.rob.event.raw.friend/ArkSharePeerFriendResponse.ArkSharePeerFriend // cn.rtast.rob.onebot/OneBotAction.arkSharePeerFriend|arkSharePeerFriend(kotlin.Long){}[0]
    final suspend fun arkSharePeerGroup(kotlin/Long): cn.rtast.rob.event.raw.friend/ArkSharePeerResponse.ArkSharePeer // cn.rtast.rob.onebot/OneBotAction.arkSharePeerGroup|arkSharePeerGroup(kotlin.Long){}[0]
    final suspend fun broadcastMessage(cn.rtast.rob.onebot/MessageChain) // cn.rtast.rob.onebot/OneBotAction.broadcastMessage|broadcastMessage(cn.rtast.rob.onebot.MessageChain){}[0]
    final suspend fun broadcastMessage(kotlin/String) // cn.rtast.rob.onebot/OneBotAction.broadcastMessage|broadcastMessage(kotlin.String){}[0]
    final suspend fun broadcastMessageListening(cn.rtast.rob.onebot/MessageChain) // cn.rtast.rob.onebot/OneBotAction.broadcastMessageListening|broadcastMessageListening(cn.rtast.rob.onebot.MessageChain){}[0]
    final suspend fun broadcastMessageListening(cn.rtast.rob.segment/Segment) // cn.rtast.rob.onebot/OneBotAction.broadcastMessageListening|broadcastMessageListening(cn.rtast.rob.segment.Segment){}[0]
    final suspend fun broadcastMessageListening(kotlin.collections/List<cn.rtast.rob.segment/Segment>) // cn.rtast.rob.onebot/OneBotAction.broadcastMessageListening|broadcastMessageListening(kotlin.collections.List<cn.rtast.rob.segment.Segment>){}[0]
    final suspend fun broadcastMessageListening(kotlin/String) // cn.rtast.rob.onebot/OneBotAction.broadcastMessageListening|broadcastMessageListening(kotlin.String){}[0]
    final suspend fun callApi(kotlin/String, kotlin.collections/Map<kotlin/String, kotlin/String>): kotlin/String // cn.rtast.rob.onebot/OneBotAction.callApi|callApi(kotlin.String;kotlin.collections.Map<kotlin.String,kotlin.String>){}[0]
    final suspend fun callApiAsync(kotlin/String, kotlin.collections/Map<kotlin/String, kotlin/String>) // cn.rtast.rob.onebot/OneBotAction.callApiAsync|callApiAsync(kotlin.String;kotlin.collections.Map<kotlin.String,kotlin.String>){}[0]
    final suspend fun canSendImage(): kotlin/Boolean // cn.rtast.rob.onebot/OneBotAction.canSendImage|canSendImage(){}[0]
    final suspend fun canSendRecord(): kotlin/Boolean // cn.rtast.rob.onebot/OneBotAction.canSendRecord|canSendRecord(){}[0]
    final suspend fun cleanCache() // cn.rtast.rob.onebot/OneBotAction.cleanCache|cleanCache(){}[0]
    final suspend fun createCollection(kotlin/String, kotlin/String) // cn.rtast.rob.onebot/OneBotAction.createCollection|createCollection(kotlin.String;kotlin.String){}[0]
    final suspend fun createGroupFileFolder(kotlin/Long, kotlin/String, kotlin/String = ...) // cn.rtast.rob.onebot/OneBotAction.createGroupFileFolder|createGroupFileFolder(kotlin.Long;kotlin.String;kotlin.String){}[0]
    final suspend fun deleteEssenceMessage(kotlin/Long) // cn.rtast.rob.onebot/OneBotAction.deleteEssenceMessage|deleteEssenceMessage(kotlin.Long){}[0]
    final suspend fun deleteFriend(kotlin/Long, kotlin/Boolean = ...) // cn.rtast.rob.onebot/OneBotAction.deleteFriend|deleteFriend(kotlin.Long;kotlin.Boolean){}[0]
    final suspend fun deleteGroupFileFolder(kotlin/Long, kotlin/String) // cn.rtast.rob.onebot/OneBotAction.deleteGroupFileFolder|deleteGroupFileFolder(kotlin.Long;kotlin.String){}[0]
    final suspend fun deleteGroupNotice(kotlin/Long, kotlin/String) // cn.rtast.rob.onebot/OneBotAction.deleteGroupNotice|deleteGroupNotice(kotlin.Long;kotlin.String){}[0]
    final suspend fun fetchCustomFace(): kotlin.collections/List<kotlin/String> // cn.rtast.rob.onebot/OneBotAction.fetchCustomFace|fetchCustomFace(){}[0]
    final suspend fun fetchMFaceKey(kotlin.collections/List<kotlin/String>): kotlin.collections/List<kotlin/String> // cn.rtast.rob.onebot/OneBotAction.fetchMFaceKey|fetchMFaceKey(kotlin.collections.List<kotlin.String>){}[0]
    final suspend fun forwardFriendSingleMessage(kotlin/Long, kotlin/Long) // cn.rtast.rob.onebot/OneBotAction.forwardFriendSingleMessage|forwardFriendSingleMessage(kotlin.Long;kotlin.Long){}[0]
    final suspend fun forwardGroupSingleMessage(kotlin/Long, kotlin/Long) // cn.rtast.rob.onebot/OneBotAction.forwardGroupSingleMessage|forwardGroupSingleMessage(kotlin.Long;kotlin.Long){}[0]
    final suspend fun getAIRecord(kotlin/Long, cn.rtast.rob.enums/AIRecordCharacter, kotlin/String, kotlin/UInt = ...): kotlin/String? // cn.rtast.rob.onebot/OneBotAction.getAIRecord|getAIRecord(kotlin.Long;cn.rtast.rob.enums.AIRecordCharacter;kotlin.String;kotlin.UInt){}[0]
    final suspend fun getAIRecord(kotlin/Long, kotlin/String, kotlin/String, kotlin/UInt = ...): kotlin/String? // cn.rtast.rob.onebot/OneBotAction.getAIRecord|getAIRecord(kotlin.Long;kotlin.String;kotlin.String;kotlin.UInt){}[0]
    final suspend fun getAIRecordCharacters(kotlin/Long, kotlin/UInt = ...): cn.rtast.rob.api.get/AIRecordCharacters // cn.rtast.rob.onebot/OneBotAction.getAIRecordCharacters|getAIRecordCharacters(kotlin.Long;kotlin.UInt){}[0]
    final suspend fun getAllGroupNotices(kotlin/Long): kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice> // cn.rtast.rob.onebot/OneBotAction.getAllGroupNotices|getAllGroupNotices(kotlin.Long){}[0]
    final suspend fun getCSRFToken(): kotlin/String // cn.rtast.rob.onebot/OneBotAction.getCSRFToken|getCSRFToken(){}[0]
    final suspend fun getCookies(kotlin/String): kotlin/String // cn.rtast.rob.onebot/OneBotAction.getCookies|getCookies(kotlin.String){}[0]
    final suspend fun getEssenceMessageList(kotlin/Long): kotlin.collections/List<cn.rtast.rob.event.raw.message/EssenceMessageList.EssenceMessage> // cn.rtast.rob.onebot/OneBotAction.getEssenceMessageList|getEssenceMessageList(kotlin.Long){}[0]
    final suspend fun getFile(kotlin/String): cn.rtast.rob.event.raw.file/GetFileResponse.GetFileResponseInfo // cn.rtast.rob.onebot/OneBotAction.getFile|getFile(kotlin.String){}[0]
    final suspend fun getForwardMessage(kotlin/String): cn.rtast.rob.event.raw.message/ForwardMessage.ForwardMessage // cn.rtast.rob.onebot/OneBotAction.getForwardMessage|getForwardMessage(kotlin.String){}[0]
    final suspend fun getFriendList(): kotlin.collections/List<cn.rtast.rob.event.raw.friend/FriendList.Friend> // cn.rtast.rob.onebot/OneBotAction.getFriendList|getFriendList(){}[0]
    final suspend fun getFriendsWithCategory(): kotlin.collections/List<cn.rtast.rob.event.raw.friend/GetFriendWithCategory.FriendCategory> // cn.rtast.rob.onebot/OneBotAction.getFriendsWithCategory|getFriendsWithCategory(){}[0]
    final suspend fun getGroupAtAllRemain(kotlin/Long): cn.rtast.rob.event.raw.group/GroupAtAllRemain.AtAllRemain // cn.rtast.rob.onebot/OneBotAction.getGroupAtAllRemain|getGroupAtAllRemain(kotlin.Long){}[0]
    final suspend fun getGroupFileSystemInfo(kotlin/Long): cn.rtast.rob.event.raw.file/GroupFileSystemInfo.FileSystemInfo // cn.rtast.rob.onebot/OneBotAction.getGroupFileSystemInfo|getGroupFileSystemInfo(kotlin.Long){}[0]
    final suspend fun getGroupFileUrl(kotlin/Long, kotlin/String, kotlin/Int): cn.rtast.rob.event.raw.file/GetGroupFileUrl.FileURL // cn.rtast.rob.onebot/OneBotAction.getGroupFileUrl|getGroupFileUrl(kotlin.Long;kotlin.String;kotlin.Int){}[0]
    final suspend fun getGroupFilesByFolder(kotlin/Long, kotlin/String): cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles // cn.rtast.rob.onebot/OneBotAction.getGroupFilesByFolder|getGroupFilesByFolder(kotlin.Long;kotlin.String){}[0]
    final suspend fun getGroupHonorInfo(kotlin/Long, cn.rtast.rob.enums/HonorType): cn.rtast.rob.event.raw.group/HonorInfo.HonorInfo // cn.rtast.rob.onebot/OneBotAction.getGroupHonorInfo|getGroupHonorInfo(kotlin.Long;cn.rtast.rob.enums.HonorType){}[0]
    final suspend fun getGroupIgnoreAddRequest(): kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupIgnoreAddRequest.Request> // cn.rtast.rob.onebot/OneBotAction.getGroupIgnoreAddRequest|getGroupIgnoreAddRequest(){}[0]
    final suspend fun getGroupInfo(kotlin/Long, kotlin/Boolean = ...): cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo // cn.rtast.rob.onebot/OneBotAction.getGroupInfo|getGroupInfo(kotlin.Long;kotlin.Boolean){}[0]
    final suspend fun getGroupList(): kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupInfo.GroupInfo> // cn.rtast.rob.onebot/OneBotAction.getGroupList|getGroupList(){}[0]
    final suspend fun getGroupMemberInfo(kotlin/Long, kotlin/Long, kotlin/Boolean = ...): cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo // cn.rtast.rob.onebot/OneBotAction.getGroupMemberInfo|getGroupMemberInfo(kotlin.Long;kotlin.Long;kotlin.Boolean){}[0]
    final suspend fun getGroupMemberList(kotlin/Long): kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupMemberList.MemberInfo> // cn.rtast.rob.onebot/OneBotAction.getGroupMemberList|getGroupMemberList(kotlin.Long){}[0]
    final suspend fun getGroupMessageHistory(kotlin/Long, kotlin/Long, kotlin/Int = ...): cn.rtast.rob.event.raw.message/GroupMessageHistory.MessageHistory // cn.rtast.rob.onebot/OneBotAction.getGroupMessageHistory|getGroupMessageHistory(kotlin.Long;kotlin.Long;kotlin.Int){}[0]
    final suspend fun getGroupNoticeById(kotlin/Long, kotlin/String): cn.rtast.rob.event.raw.group/GroupNotice.GroupNotice? // cn.rtast.rob.onebot/OneBotAction.getGroupNoticeById|getGroupNoticeById(kotlin.Long;kotlin.String){}[0]
    final suspend fun getGroupRequests(): kotlin.collections/List<cn.rtast.rob.event.raw.group/GetGroupRequests.GroupRequests> // cn.rtast.rob.onebot/OneBotAction.getGroupRequests|getGroupRequests(){}[0]
    final suspend fun getGroupRootFiles(kotlin/Long): cn.rtast.rob.event.raw.file/GetGroupRootFiles.RootFiles // cn.rtast.rob.onebot/OneBotAction.getGroupRootFiles|getGroupRootFiles(kotlin.Long){}[0]
    final suspend fun getGroupShutList(kotlin/Long): kotlin.collections/List<cn.rtast.rob.event.raw.group/GroupShutListResponse.GroupShutListUser> // cn.rtast.rob.onebot/OneBotAction.getGroupShutList|getGroupShutList(kotlin.Long){}[0]
    final suspend fun getLoginInfo(): cn.rtast.rob.event.raw.info/LoginInfo.LoginInfo // cn.rtast.rob.onebot/OneBotAction.getLoginInfo|getLoginInfo(){}[0]
    final suspend fun getMessage(kotlin/Long): cn.rtast.rob.event.raw.message/GetMessage.Message // cn.rtast.rob.onebot/OneBotAction.getMessage|getMessage(kotlin.Long){}[0]
    final suspend fun getMiniAppArk(cn.rtast.rob.enums/MiniAppArkType, kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ...): kotlin/String // cn.rtast.rob.onebot/OneBotAction.getMiniAppArk|getMiniAppArk(cn.rtast.rob.enums.MiniAppArkType;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String?;kotlin.String?;kotlin.String?){}[0]
    final suspend fun getPrivateFileUrl(kotlin/Long, kotlin/String, kotlin/String = ...): kotlin/String // cn.rtast.rob.onebot/OneBotAction.getPrivateFileUrl|getPrivateFileUrl(kotlin.Long;kotlin.String;kotlin.String){}[0]
    final suspend fun getPrivateMessageHistory(kotlin/Long, kotlin/Long, kotlin/Int = ...): cn.rtast.rob.event.raw.message/PrivateMessageHistory.MessageHistory // cn.rtast.rob.onebot/OneBotAction.getPrivateMessageHistory|getPrivateMessageHistory(kotlin.Long;kotlin.Long;kotlin.Int){}[0]
    final suspend fun getProfileLike(): cn.rtast.rob.event.raw.info/GetProfileLike.ProfileLike // cn.rtast.rob.onebot/OneBotAction.getProfileLike|getProfileLike(){}[0]
    final suspend fun getRKey(): cn.rtast.rob.event.raw.onebot/GetRKey // cn.rtast.rob.onebot/OneBotAction.getRKey|getRKey(){}[0]
    final suspend fun getRobotUinRange(): kotlin.collections/List<cn.rtast.rob.event.raw.info/RobotUinRange.UinRange> // cn.rtast.rob.onebot/OneBotAction.getRobotUinRange|getRobotUinRange(){}[0]
    final suspend fun getStatus(): cn.rtast.rob.event.raw.onebot/RawHeartBeatEvent.Status // cn.rtast.rob.onebot/OneBotAction.getStatus|getStatus(){}[0]
    final suspend fun getStrangerInfo(kotlin/Long, kotlin/Boolean = ...): cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo // cn.rtast.rob.onebot/OneBotAction.getStrangerInfo|getStrangerInfo(kotlin.Long;kotlin.Boolean){}[0]
    final suspend fun getVersionInfo(): cn.rtast.rob.event.raw.onebot/OneBotVersionInfo.VersionInfo // cn.rtast.rob.onebot/OneBotAction.getVersionInfo|getVersionInfo(){}[0]
    final suspend fun joinFriendFaceChain(kotlin/Long, kotlin/Long, cn.rtast.rob.enums/QQFace): kotlin/String // cn.rtast.rob.onebot/OneBotAction.joinFriendFaceChain|joinFriendFaceChain(kotlin.Long;kotlin.Long;cn.rtast.rob.enums.QQFace){}[0]
    final suspend fun joinFriendFaceChain(kotlin/Long, kotlin/Long, kotlin/Int): kotlin/String // cn.rtast.rob.onebot/OneBotAction.joinFriendFaceChain|joinFriendFaceChain(kotlin.Long;kotlin.Long;kotlin.Int){}[0]
    final suspend fun kickGroupMember(kotlin/Long, kotlin/Long, kotlin/Boolean = ...) // cn.rtast.rob.onebot/OneBotAction.kickGroupMember|kickGroupMember(kotlin.Long;kotlin.Long;kotlin.Boolean){}[0]
    final suspend fun markAsRead(kotlin/Long) // cn.rtast.rob.onebot/OneBotAction.markAsRead|markAsRead(kotlin.Long){}[0]
    final suspend fun ocrImage(kotlin/String, kotlin/Boolean = ...): cn.rtast.rob.event.raw.info/OCRImage.ORCResult? // cn.rtast.rob.onebot/OneBotAction.ocrImage|ocrImage(kotlin.String;kotlin.Boolean){}[0]
    final suspend fun reaction(kotlin/Long, kotlin/Long, cn.rtast.rob.enums/QQFace, kotlin/Boolean = ...) // cn.rtast.rob.onebot/OneBotAction.reaction|reaction(kotlin.Long;kotlin.Long;cn.rtast.rob.enums.QQFace;kotlin.Boolean){}[0]
    final suspend fun reaction(kotlin/Long, kotlin/Long, kotlin/String, kotlin/Boolean = ...) // cn.rtast.rob.onebot/OneBotAction.reaction|reaction(kotlin.Long;kotlin.Long;kotlin.String;kotlin.Boolean){}[0]
    final suspend fun releaseGroupNotice(kotlin/Long, kotlin/String, kotlin/String = ...): kotlin/String // cn.rtast.rob.onebot/OneBotAction.releaseGroupNotice|releaseGroupNotice(kotlin.Long;kotlin.String;kotlin.String){}[0]
    final suspend fun releaseGroupNoticeAsync(kotlin/Long, kotlin/String, kotlin/String = ...) // cn.rtast.rob.onebot/OneBotAction.releaseGroupNoticeAsync|releaseGroupNoticeAsync(kotlin.Long;kotlin.String;kotlin.String){}[0]
    final suspend fun revokeMessage(kotlin/Long) // cn.rtast.rob.onebot/OneBotAction.revokeMessage|revokeMessage(kotlin.Long){}[0]
    final suspend fun send(kotlin/String) // cn.rtast.rob.onebot/OneBotAction.send|send(kotlin.String){}[0]
    final suspend fun sendFriendPoke(kotlin/Long) // cn.rtast.rob.onebot/OneBotAction.sendFriendPoke|sendFriendPoke(kotlin.Long){}[0]
    final suspend fun sendGroupAIRecord(kotlin/Long, cn.rtast.rob.enums/AIRecordCharacter, kotlin/String, kotlin/UInt = ...) // cn.rtast.rob.onebot/OneBotAction.sendGroupAIRecord|sendGroupAIRecord(kotlin.Long;cn.rtast.rob.enums.AIRecordCharacter;kotlin.String;kotlin.UInt){}[0]
    final suspend fun sendGroupAIRecord(kotlin/Long, kotlin/String, kotlin/String, kotlin/UInt = ...) // cn.rtast.rob.onebot/OneBotAction.sendGroupAIRecord|sendGroupAIRecord(kotlin.Long;kotlin.String;kotlin.String;kotlin.UInt){}[0]
    final suspend fun sendGroupForwardMsg(kotlin/Long, cn.rtast.rob.onebot/NodeMessageChain): cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId // cn.rtast.rob.onebot/OneBotAction.sendGroupForwardMsg|sendGroupForwardMsg(kotlin.Long;cn.rtast.rob.onebot.NodeMessageChain){}[0]
    final suspend fun sendGroupForwardMsgAsync(kotlin/Long, cn.rtast.rob.onebot/NodeMessageChain) // cn.rtast.rob.onebot/OneBotAction.sendGroupForwardMsgAsync|sendGroupForwardMsgAsync(kotlin.Long;cn.rtast.rob.onebot.NodeMessageChain){}[0]
    final suspend fun sendGroupMessage(kotlin/Long, cn.rtast.rob.onebot/MessageChain): kotlin/Long? // cn.rtast.rob.onebot/OneBotAction.sendGroupMessage|sendGroupMessage(kotlin.Long;cn.rtast.rob.onebot.MessageChain){}[0]
    final suspend fun sendGroupMessage(kotlin/Long, cn.rtast.rob.onebot/NodeMessageChain): cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId // cn.rtast.rob.onebot/OneBotAction.sendGroupMessage|sendGroupMessage(kotlin.Long;cn.rtast.rob.onebot.NodeMessageChain){}[0]
    final suspend fun sendGroupMessage(kotlin/Long, cn.rtast.rob.segment/Segment): kotlin/Long? // cn.rtast.rob.onebot/OneBotAction.sendGroupMessage|sendGroupMessage(kotlin.Long;cn.rtast.rob.segment.Segment){}[0]
    final suspend fun sendGroupMessage(kotlin/Long, kotlin.collections/List<cn.rtast.rob.event.raw.message/ArrayMessage>): kotlin/Long? // cn.rtast.rob.onebot/OneBotAction.sendGroupMessage|sendGroupMessage(kotlin.Long;kotlin.collections.List<cn.rtast.rob.event.raw.message.ArrayMessage>){}[0]
    final suspend fun sendGroupMessage(kotlin/Long, kotlin/String): kotlin/Long? // cn.rtast.rob.onebot/OneBotAction.sendGroupMessage|sendGroupMessage(kotlin.Long;kotlin.String){}[0]
    final suspend fun sendGroupMessageAsync(kotlin/Long, cn.rtast.rob.onebot/MessageChain) // cn.rtast.rob.onebot/OneBotAction.sendGroupMessageAsync|sendGroupMessageAsync(kotlin.Long;cn.rtast.rob.onebot.MessageChain){}[0]
    final suspend fun sendGroupMessageAsync(kotlin/Long, cn.rtast.rob.onebot/NodeMessageChain) // cn.rtast.rob.onebot/OneBotAction.sendGroupMessageAsync|sendGroupMessageAsync(kotlin.Long;cn.rtast.rob.onebot.NodeMessageChain){}[0]
    final suspend fun sendGroupMessageAsync(kotlin/Long, cn.rtast.rob.segment/Segment) // cn.rtast.rob.onebot/OneBotAction.sendGroupMessageAsync|sendGroupMessageAsync(kotlin.Long;cn.rtast.rob.segment.Segment){}[0]
    final suspend fun sendGroupMessageAsync(kotlin/Long, kotlin.collections/List<cn.rtast.rob.event.raw.message/ArrayMessage>) // cn.rtast.rob.onebot/OneBotAction.sendGroupMessageAsync|sendGroupMessageAsync(kotlin.Long;kotlin.collections.List<cn.rtast.rob.event.raw.message.ArrayMessage>){}[0]
    final suspend fun sendGroupMessageAsync(kotlin/Long, kotlin/String) // cn.rtast.rob.onebot/OneBotAction.sendGroupMessageAsync|sendGroupMessageAsync(kotlin.Long;kotlin.String){}[0]
    final suspend fun sendGroupPoke(kotlin/Long, kotlin/Long) // cn.rtast.rob.onebot/OneBotAction.sendGroupPoke|sendGroupPoke(kotlin.Long;kotlin.Long){}[0]
    final suspend fun sendLike(kotlin/Long, kotlin/Int = ...) // cn.rtast.rob.onebot/OneBotAction.sendLike|sendLike(kotlin.Long;kotlin.Int){}[0]
    final suspend fun sendPacket(kotlin/String, kotlin/String, kotlin/Boolean, kotlin/Byte = ...): cn.rtast.rob.event.raw.internal/SendPacketResponse.SendPacket // cn.rtast.rob.onebot/OneBotAction.sendPacket|sendPacket(kotlin.String;kotlin.String;kotlin.Boolean;kotlin.Byte){}[0]
    final suspend fun sendPacketAsync(kotlin/String, kotlin/String, kotlin/Boolean, kotlin/Byte = ...) // cn.rtast.rob.onebot/OneBotAction.sendPacketAsync|sendPacketAsync(kotlin.String;kotlin.String;kotlin.Boolean;kotlin.Byte){}[0]
    final suspend fun sendPrivateForwardMsg(kotlin/Long, cn.rtast.rob.onebot/NodeMessageChain): cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId // cn.rtast.rob.onebot/OneBotAction.sendPrivateForwardMsg|sendPrivateForwardMsg(kotlin.Long;cn.rtast.rob.onebot.NodeMessageChain){}[0]
    final suspend fun sendPrivateForwardMsgAsync(kotlin/Long, cn.rtast.rob.onebot/NodeMessageChain) // cn.rtast.rob.onebot/OneBotAction.sendPrivateForwardMsgAsync|sendPrivateForwardMsgAsync(kotlin.Long;cn.rtast.rob.onebot.NodeMessageChain){}[0]
    final suspend fun sendPrivateMessage(kotlin/Long, cn.rtast.rob.onebot/MessageChain): kotlin/Long? // cn.rtast.rob.onebot/OneBotAction.sendPrivateMessage|sendPrivateMessage(kotlin.Long;cn.rtast.rob.onebot.MessageChain){}[0]
    final suspend fun sendPrivateMessage(kotlin/Long, cn.rtast.rob.onebot/NodeMessageChain): cn.rtast.rob.event.raw.message/ForwardMessageId.ForwardMessageId // cn.rtast.rob.onebot/OneBotAction.sendPrivateMessage|sendPrivateMessage(kotlin.Long;cn.rtast.rob.onebot.NodeMessageChain){}[0]
    final suspend fun sendPrivateMessage(kotlin/Long, cn.rtast.rob.segment/Segment): kotlin/Long? // cn.rtast.rob.onebot/OneBotAction.sendPrivateMessage|sendPrivateMessage(kotlin.Long;cn.rtast.rob.segment.Segment){}[0]
    final suspend fun sendPrivateMessage(kotlin/Long, kotlin.collections/List<cn.rtast.rob.event.raw.message/ArrayMessage>): kotlin/Long? // cn.rtast.rob.onebot/OneBotAction.sendPrivateMessage|sendPrivateMessage(kotlin.Long;kotlin.collections.List<cn.rtast.rob.event.raw.message.ArrayMessage>){}[0]
    final suspend fun sendPrivateMessage(kotlin/Long, kotlin/String): kotlin/Long? // cn.rtast.rob.onebot/OneBotAction.sendPrivateMessage|sendPrivateMessage(kotlin.Long;kotlin.String){}[0]
    final suspend fun sendPrivateMessageAsync(kotlin/Long, cn.rtast.rob.onebot/MessageChain) // cn.rtast.rob.onebot/OneBotAction.sendPrivateMessageAsync|sendPrivateMessageAsync(kotlin.Long;cn.rtast.rob.onebot.MessageChain){}[0]
    final suspend fun sendPrivateMessageAsync(kotlin/Long, cn.rtast.rob.onebot/NodeMessageChain) // cn.rtast.rob.onebot/OneBotAction.sendPrivateMessageAsync|sendPrivateMessageAsync(kotlin.Long;cn.rtast.rob.onebot.NodeMessageChain){}[0]
    final suspend fun sendPrivateMessageAsync(kotlin/Long, cn.rtast.rob.segment/Segment) // cn.rtast.rob.onebot/OneBotAction.sendPrivateMessageAsync|sendPrivateMessageAsync(kotlin.Long;cn.rtast.rob.segment.Segment){}[0]
    final suspend fun sendPrivateMessageAsync(kotlin/Long, kotlin.collections/List<cn.rtast.rob.event.raw.message/ArrayMessage>) // cn.rtast.rob.onebot/OneBotAction.sendPrivateMessageAsync|sendPrivateMessageAsync(kotlin.Long;kotlin.collections.List<cn.rtast.rob.event.raw.message.ArrayMessage>){}[0]
    final suspend fun sendPrivateMessageAsync(kotlin/Long, kotlin/String) // cn.rtast.rob.onebot/OneBotAction.sendPrivateMessageAsync|sendPrivateMessageAsync(kotlin.Long;kotlin.String){}[0]
    final suspend fun setBotAvatar(kotlin/String, kotlin/Boolean = ...): kotlin/Boolean // cn.rtast.rob.onebot/OneBotAction.setBotAvatar|setBotAvatar(kotlin.String;kotlin.Boolean){}[0]
    final suspend fun setEssenceMessage(kotlin/Long) // cn.rtast.rob.onebot/OneBotAction.setEssenceMessage|setEssenceMessage(kotlin.Long){}[0]
    final suspend fun setFriendCategory(kotlin/Long, kotlin/String) // cn.rtast.rob.onebot/OneBotAction.setFriendCategory|setFriendCategory(kotlin.Long;kotlin.String){}[0]
    final suspend fun setFriendRemark(kotlin/Long, kotlin/String? = ...) // cn.rtast.rob.onebot/OneBotAction.setFriendRemark|setFriendRemark(kotlin.Long;kotlin.String?){}[0]
    final suspend fun setFriendRequest(kotlin/String, kotlin/Boolean = ..., kotlin/String = ...) // cn.rtast.rob.onebot/OneBotAction.setFriendRequest|setFriendRequest(kotlin.String;kotlin.Boolean;kotlin.String){}[0]
    final suspend fun setGroupAdmin(kotlin/Long, kotlin/Long, kotlin/Boolean = ...) // cn.rtast.rob.onebot/OneBotAction.setGroupAdmin|setGroupAdmin(kotlin.Long;kotlin.Long;kotlin.Boolean){}[0]
    final suspend fun setGroupAnonymous(kotlin/Long, kotlin/Boolean = ...) // cn.rtast.rob.onebot/OneBotAction.setGroupAnonymous|setGroupAnonymous(kotlin.Long;kotlin.Boolean){}[0]
    final suspend fun setGroupAvatar(kotlin/Long, kotlin/String): kotlin/Boolean // cn.rtast.rob.onebot/OneBotAction.setGroupAvatar|setGroupAvatar(kotlin.Long;kotlin.String){}[0]
    final suspend fun setGroupBan(kotlin/Long, kotlin/Long, kotlin/Int = ...) // cn.rtast.rob.onebot/OneBotAction.setGroupBan|setGroupBan(kotlin.Long;kotlin.Long;kotlin.Int){}[0]
    final suspend fun setGroupBotStatus(kotlin/Long, kotlin/Long, kotlin/Boolean) // cn.rtast.rob.onebot/OneBotAction.setGroupBotStatus|setGroupBotStatus(kotlin.Long;kotlin.Long;kotlin.Boolean){}[0]
    final suspend fun setGroupLeaveOrDismiss(kotlin/Long, kotlin/Boolean = ...) // cn.rtast.rob.onebot/OneBotAction.setGroupLeaveOrDismiss|setGroupLeaveOrDismiss(kotlin.Long;kotlin.Boolean){}[0]
    final suspend fun setGroupMemberCard(kotlin/Long, kotlin/Long, kotlin/String = ...) // cn.rtast.rob.onebot/OneBotAction.setGroupMemberCard|setGroupMemberCard(kotlin.Long;kotlin.Long;kotlin.String){}[0]
    final suspend fun setGroupMemberSpecialTitle(kotlin/Long, kotlin/Long, kotlin/String = ..., kotlin/Int = ...) // cn.rtast.rob.onebot/OneBotAction.setGroupMemberSpecialTitle|setGroupMemberSpecialTitle(kotlin.Long;kotlin.Long;kotlin.String;kotlin.Int){}[0]
    final suspend fun setGroupName(kotlin/Long, kotlin/String) // cn.rtast.rob.onebot/OneBotAction.setGroupName|setGroupName(kotlin.Long;kotlin.String){}[0]
    final suspend fun setGroupRemark(kotlin/Long, kotlin/String?) // cn.rtast.rob.onebot/OneBotAction.setGroupRemark|setGroupRemark(kotlin.Long;kotlin.String?){}[0]
    final suspend fun setGroupRequest(kotlin/String, kotlin/String, kotlin/Boolean = ..., kotlin/String = ...) // cn.rtast.rob.onebot/OneBotAction.setGroupRequest|setGroupRequest(kotlin.String;kotlin.String;kotlin.Boolean;kotlin.String){}[0]
    final suspend fun setGroupSign(kotlin/Long) // cn.rtast.rob.onebot/OneBotAction.setGroupSign|setGroupSign(kotlin.Long){}[0]
    final suspend fun setGroupWholeBan(kotlin/Long, kotlin/Boolean = ...) // cn.rtast.rob.onebot/OneBotAction.setGroupWholeBan|setGroupWholeBan(kotlin.Long;kotlin.Boolean){}[0]
    final suspend fun setLongNick(kotlin/String) // cn.rtast.rob.onebot/OneBotAction.setLongNick|setLongNick(kotlin.String){}[0]
    final suspend fun setMessageEmojiLike(kotlin/Long, cn.rtast.rob.enums/QQFace) // cn.rtast.rob.onebot/OneBotAction.setMessageEmojiLike|setMessageEmojiLike(kotlin.Long;cn.rtast.rob.enums.QQFace){}[0]
    final suspend fun setMessageEmojiLike(kotlin/Long, kotlin/Int) // cn.rtast.rob.onebot/OneBotAction.setMessageEmojiLike|setMessageEmojiLike(kotlin.Long;kotlin.Int){}[0]
    final suspend fun setOnlineStatus(cn.rtast.rob.enums/OnlineStatus) // cn.rtast.rob.onebot/OneBotAction.setOnlineStatus|setOnlineStatus(cn.rtast.rob.enums.OnlineStatus){}[0]
    final suspend fun setRestart() // cn.rtast.rob.onebot/OneBotAction.setRestart|setRestart(){}[0]
    final suspend fun translateEN2ZH(kotlin.collections/List<kotlin/String>): kotlin.collections/List<kotlin/String> // cn.rtast.rob.onebot/OneBotAction.translateEN2ZH|translateEN2ZH(kotlin.collections.List<kotlin.String>){}[0]
    final suspend fun uploadGroupFile(kotlin/Long, kotlin/String, kotlin/String, kotlin/String = ...): cn.rtast.rob.event.raw.file/UploadGroupFileResponse.UploadGroupFile // cn.rtast.rob.onebot/OneBotAction.uploadGroupFile|uploadGroupFile(kotlin.Long;kotlin.String;kotlin.String;kotlin.String){}[0]
    final suspend fun uploadGroupFileAsync(kotlin/Long, kotlin/String, kotlin/String, kotlin/String = ...) // cn.rtast.rob.onebot/OneBotAction.uploadGroupFileAsync|uploadGroupFileAsync(kotlin.Long;kotlin.String;kotlin.String;kotlin.String){}[0]
    final suspend fun uploadImage(kotlin/String, kotlin/Boolean = ...): kotlin/String // cn.rtast.rob.onebot/OneBotAction.uploadImage|uploadImage(kotlin.String;kotlin.Boolean){}[0]
    final suspend fun uploadPrivateFile(kotlin/Long, kotlin/String, kotlin/String): cn.rtast.rob.event.raw.file/UploadPrivateFileResponse.UploadPrivateFile // cn.rtast.rob.onebot/OneBotAction.uploadPrivateFile|uploadPrivateFile(kotlin.Long;kotlin.String;kotlin.String){}[0]
    final suspend fun uploadPrivateFileAsync(kotlin/Long, kotlin/String, kotlin/String) // cn.rtast.rob.onebot/OneBotAction.uploadPrivateFileAsync|uploadPrivateFileAsync(kotlin.Long;kotlin.String;kotlin.String){}[0]
}

final class cn.rtast.rob.segment/AT : cn.rtast.rob.segment/Segment { // cn.rtast.rob.segment/AT|null[0]
    constructor <init>(kotlin/Long) // cn.rtast.rob.segment/AT.<init>|<init>(kotlin.Long){}[0]

    final var qq // cn.rtast.rob.segment/AT.qq|{}qq[0]
        final fun <get-qq>(): kotlin/Long // cn.rtast.rob.segment/AT.qq.<get-qq>|<get-qq>(){}[0]
        final fun <set-qq>(kotlin/Long) // cn.rtast.rob.segment/AT.qq.<set-qq>|<set-qq>(kotlin.Long){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.segment/AT.component1|component1(){}[0]
    final fun copy(kotlin/Long = ...): cn.rtast.rob.segment/AT // cn.rtast.rob.segment/AT.copy|copy(kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/AT.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/AT.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/AT.toString|toString(){}[0]
}

final class cn.rtast.rob.segment/AtAll : cn.rtast.rob.segment/Segment { // cn.rtast.rob.segment/AtAll|null[0]
    constructor <init>() // cn.rtast.rob.segment/AtAll.<init>|<init>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/AtAll.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/AtAll.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/AtAll.toString|toString(){}[0]
}

final class cn.rtast.rob.segment/AtSegment : cn.rtast.rob.segment/MessageSegment { // cn.rtast.rob.segment/AtSegment|null[0]
    constructor <init>(kotlin/Long, kotlin/String) // cn.rtast.rob.segment/AtSegment.<init>|<init>(kotlin.Long;kotlin.String){}[0]

    final val name // cn.rtast.rob.segment/AtSegment.name|{}name[0]
        final fun <get-name>(): kotlin/String // cn.rtast.rob.segment/AtSegment.name.<get-name>|<get-name>(){}[0]
    final val qq // cn.rtast.rob.segment/AtSegment.qq|{}qq[0]
        final fun <get-qq>(): kotlin/Long // cn.rtast.rob.segment/AtSegment.qq.<get-qq>|<get-qq>(){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.segment/AtSegment.component1|component1(){}[0]
    final fun component2(): kotlin/String // cn.rtast.rob.segment/AtSegment.component2|component2(){}[0]
    final fun copy(kotlin/Long = ..., kotlin/String = ...): cn.rtast.rob.segment/AtSegment // cn.rtast.rob.segment/AtSegment.copy|copy(kotlin.Long;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/AtSegment.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/AtSegment.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/AtSegment.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.segment/AtSegment> { // cn.rtast.rob.segment/AtSegment.$serializer|null[0]
        final val descriptor // cn.rtast.rob.segment/AtSegment.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.segment/AtSegment.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.segment/AtSegment.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.segment/AtSegment // cn.rtast.rob.segment/AtSegment.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.segment/AtSegment) // cn.rtast.rob.segment/AtSegment.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.segment.AtSegment){}[0]
    }

    final object Companion { // cn.rtast.rob.segment/AtSegment.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.segment/AtSegment> // cn.rtast.rob.segment/AtSegment.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.segment/CustomMusicShare : cn.rtast.rob.segment/Segment { // cn.rtast.rob.segment/CustomMusicShare|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/String, kotlin/String? = ..., kotlin/String? = ...) // cn.rtast.rob.segment/CustomMusicShare.<init>|<init>(kotlin.String;kotlin.String;kotlin.String;kotlin.String?;kotlin.String?){}[0]

    final var audio // cn.rtast.rob.segment/CustomMusicShare.audio|{}audio[0]
        final fun <get-audio>(): kotlin/String // cn.rtast.rob.segment/CustomMusicShare.audio.<get-audio>|<get-audio>(){}[0]
        final fun <set-audio>(kotlin/String) // cn.rtast.rob.segment/CustomMusicShare.audio.<set-audio>|<set-audio>(kotlin.String){}[0]
    final var content // cn.rtast.rob.segment/CustomMusicShare.content|{}content[0]
        final fun <get-content>(): kotlin/String? // cn.rtast.rob.segment/CustomMusicShare.content.<get-content>|<get-content>(){}[0]
        final fun <set-content>(kotlin/String?) // cn.rtast.rob.segment/CustomMusicShare.content.<set-content>|<set-content>(kotlin.String?){}[0]
    final var image // cn.rtast.rob.segment/CustomMusicShare.image|{}image[0]
        final fun <get-image>(): kotlin/String? // cn.rtast.rob.segment/CustomMusicShare.image.<get-image>|<get-image>(){}[0]
        final fun <set-image>(kotlin/String?) // cn.rtast.rob.segment/CustomMusicShare.image.<set-image>|<set-image>(kotlin.String?){}[0]
    final var title // cn.rtast.rob.segment/CustomMusicShare.title|{}title[0]
        final fun <get-title>(): kotlin/String // cn.rtast.rob.segment/CustomMusicShare.title.<get-title>|<get-title>(){}[0]
        final fun <set-title>(kotlin/String) // cn.rtast.rob.segment/CustomMusicShare.title.<set-title>|<set-title>(kotlin.String){}[0]
    final var url // cn.rtast.rob.segment/CustomMusicShare.url|{}url[0]
        final fun <get-url>(): kotlin/String // cn.rtast.rob.segment/CustomMusicShare.url.<get-url>|<get-url>(){}[0]
        final fun <set-url>(kotlin/String) // cn.rtast.rob.segment/CustomMusicShare.url.<set-url>|<set-url>(kotlin.String){}[0]

    final fun component1(): kotlin/String // cn.rtast.rob.segment/CustomMusicShare.component1|component1(){}[0]
    final fun component2(): kotlin/String // cn.rtast.rob.segment/CustomMusicShare.component2|component2(){}[0]
    final fun component3(): kotlin/String // cn.rtast.rob.segment/CustomMusicShare.component3|component3(){}[0]
    final fun component4(): kotlin/String? // cn.rtast.rob.segment/CustomMusicShare.component4|component4(){}[0]
    final fun component5(): kotlin/String? // cn.rtast.rob.segment/CustomMusicShare.component5|component5(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String? = ..., kotlin/String? = ...): cn.rtast.rob.segment/CustomMusicShare // cn.rtast.rob.segment/CustomMusicShare.copy|copy(kotlin.String;kotlin.String;kotlin.String;kotlin.String?;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/CustomMusicShare.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/CustomMusicShare.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/CustomMusicShare.toString|toString(){}[0]
}

final class cn.rtast.rob.segment/Dice : cn.rtast.rob.segment/Segment { // cn.rtast.rob.segment/Dice|null[0]
    constructor <init>() // cn.rtast.rob.segment/Dice.<init>|<init>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/Dice.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/Dice.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/Dice.toString|toString(){}[0]
}

final class cn.rtast.rob.segment/DiceSegment : cn.rtast.rob.segment/MessageSegment { // cn.rtast.rob.segment/DiceSegment|null[0]
    constructor <init>() // cn.rtast.rob.segment/DiceSegment.<init>|<init>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/DiceSegment.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/DiceSegment.hashCode|hashCode(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.segment/DiceSegment> { // cn.rtast.rob.segment/DiceSegment.$serializer|null[0]
        final val descriptor // cn.rtast.rob.segment/DiceSegment.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.segment/DiceSegment.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.segment/DiceSegment.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.segment/DiceSegment // cn.rtast.rob.segment/DiceSegment.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.segment/DiceSegment) // cn.rtast.rob.segment/DiceSegment.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.segment.DiceSegment){}[0]
    }

    final object Companion { // cn.rtast.rob.segment/DiceSegment.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.segment/DiceSegment> // cn.rtast.rob.segment/DiceSegment.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.segment/Face : cn.rtast.rob.segment/Segment { // cn.rtast.rob.segment/Face|null[0]
    constructor <init>(kotlin/Int) // cn.rtast.rob.segment/Face.<init>|<init>(kotlin.Int){}[0]

    final var id // cn.rtast.rob.segment/Face.id|{}id[0]
        final fun <get-id>(): kotlin/Int // cn.rtast.rob.segment/Face.id.<get-id>|<get-id>(){}[0]
        final fun <set-id>(kotlin/Int) // cn.rtast.rob.segment/Face.id.<set-id>|<set-id>(kotlin.Int){}[0]

    final fun component1(): kotlin/Int // cn.rtast.rob.segment/Face.component1|component1(){}[0]
    final fun copy(kotlin/Int = ...): cn.rtast.rob.segment/Face // cn.rtast.rob.segment/Face.copy|copy(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/Face.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/Face.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/Face.toString|toString(){}[0]
}

final class cn.rtast.rob.segment/FaceSegment : cn.rtast.rob.segment/MessageSegment { // cn.rtast.rob.segment/FaceSegment|null[0]
    constructor <init>(kotlin/Int, kotlin/Boolean) // cn.rtast.rob.segment/FaceSegment.<init>|<init>(kotlin.Int;kotlin.Boolean){}[0]

    final val id // cn.rtast.rob.segment/FaceSegment.id|{}id[0]
        final fun <get-id>(): kotlin/Int // cn.rtast.rob.segment/FaceSegment.id.<get-id>|<get-id>(){}[0]
    final val large // cn.rtast.rob.segment/FaceSegment.large|{}large[0]
        final fun <get-large>(): kotlin/Boolean // cn.rtast.rob.segment/FaceSegment.large.<get-large>|<get-large>(){}[0]

    final fun component1(): kotlin/Int // cn.rtast.rob.segment/FaceSegment.component1|component1(){}[0]
    final fun component2(): kotlin/Boolean // cn.rtast.rob.segment/FaceSegment.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/Boolean = ...): cn.rtast.rob.segment/FaceSegment // cn.rtast.rob.segment/FaceSegment.copy|copy(kotlin.Int;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/FaceSegment.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/FaceSegment.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/FaceSegment.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.segment/FaceSegment> { // cn.rtast.rob.segment/FaceSegment.$serializer|null[0]
        final val descriptor // cn.rtast.rob.segment/FaceSegment.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.segment/FaceSegment.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.segment/FaceSegment.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.segment/FaceSegment // cn.rtast.rob.segment/FaceSegment.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.segment/FaceSegment) // cn.rtast.rob.segment/FaceSegment.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.segment.FaceSegment){}[0]
    }

    final object Companion { // cn.rtast.rob.segment/FaceSegment.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.segment/FaceSegment> // cn.rtast.rob.segment/FaceSegment.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.segment/FileSegment : cn.rtast.rob.segment/MessageSegment { // cn.rtast.rob.segment/FileSegment|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/String, kotlin/String) // cn.rtast.rob.segment/FileSegment.<init>|<init>(kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]

    final val fileHash // cn.rtast.rob.segment/FileSegment.fileHash|{}fileHash[0]
        final fun <get-fileHash>(): kotlin/String // cn.rtast.rob.segment/FileSegment.fileHash.<get-fileHash>|<get-fileHash>(){}[0]
    final val fileId // cn.rtast.rob.segment/FileSegment.fileId|{}fileId[0]
        final fun <get-fileId>(): kotlin/String // cn.rtast.rob.segment/FileSegment.fileId.<get-fileId>|<get-fileId>(){}[0]
    final val filename // cn.rtast.rob.segment/FileSegment.filename|{}filename[0]
        final fun <get-filename>(): kotlin/String // cn.rtast.rob.segment/FileSegment.filename.<get-filename>|<get-filename>(){}[0]
    final val url // cn.rtast.rob.segment/FileSegment.url|{}url[0]
        final fun <get-url>(): kotlin/String // cn.rtast.rob.segment/FileSegment.url.<get-url>|<get-url>(){}[0]

    final fun component1(): kotlin/String // cn.rtast.rob.segment/FileSegment.component1|component1(){}[0]
    final fun component2(): kotlin/String // cn.rtast.rob.segment/FileSegment.component2|component2(){}[0]
    final fun component3(): kotlin/String // cn.rtast.rob.segment/FileSegment.component3|component3(){}[0]
    final fun component4(): kotlin/String // cn.rtast.rob.segment/FileSegment.component4|component4(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ...): cn.rtast.rob.segment/FileSegment // cn.rtast.rob.segment/FileSegment.copy|copy(kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/FileSegment.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/FileSegment.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/FileSegment.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.segment/FileSegment> { // cn.rtast.rob.segment/FileSegment.$serializer|null[0]
        final val descriptor // cn.rtast.rob.segment/FileSegment.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.segment/FileSegment.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.segment/FileSegment.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.segment/FileSegment // cn.rtast.rob.segment/FileSegment.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.segment/FileSegment) // cn.rtast.rob.segment/FileSegment.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.segment.FileSegment){}[0]
    }

    final object Companion { // cn.rtast.rob.segment/FileSegment.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.segment/FileSegment> // cn.rtast.rob.segment/FileSegment.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.segment/ForwardSegment : cn.rtast.rob.segment/MessageSegment { // cn.rtast.rob.segment/ForwardSegment|null[0]
    constructor <init>(kotlin/String) // cn.rtast.rob.segment/ForwardSegment.<init>|<init>(kotlin.String){}[0]

    final val id // cn.rtast.rob.segment/ForwardSegment.id|{}id[0]
        final fun <get-id>(): kotlin/String // cn.rtast.rob.segment/ForwardSegment.id.<get-id>|<get-id>(){}[0]

    final fun component1(): kotlin/String // cn.rtast.rob.segment/ForwardSegment.component1|component1(){}[0]
    final fun copy(kotlin/String = ...): cn.rtast.rob.segment/ForwardSegment // cn.rtast.rob.segment/ForwardSegment.copy|copy(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/ForwardSegment.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/ForwardSegment.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/ForwardSegment.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.segment/ForwardSegment> { // cn.rtast.rob.segment/ForwardSegment.$serializer|null[0]
        final val descriptor // cn.rtast.rob.segment/ForwardSegment.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.segment/ForwardSegment.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.segment/ForwardSegment.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.segment/ForwardSegment // cn.rtast.rob.segment/ForwardSegment.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.segment/ForwardSegment) // cn.rtast.rob.segment/ForwardSegment.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.segment.ForwardSegment){}[0]
    }

    final object Companion { // cn.rtast.rob.segment/ForwardSegment.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.segment/ForwardSegment> // cn.rtast.rob.segment/ForwardSegment.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.segment/FriendContact : cn.rtast.rob.segment/Segment { // cn.rtast.rob.segment/FriendContact|null[0]
    constructor <init>(kotlin/Long) // cn.rtast.rob.segment/FriendContact.<init>|<init>(kotlin.Long){}[0]

    final var id // cn.rtast.rob.segment/FriendContact.id|{}id[0]
        final fun <get-id>(): kotlin/Long // cn.rtast.rob.segment/FriendContact.id.<get-id>|<get-id>(){}[0]
        final fun <set-id>(kotlin/Long) // cn.rtast.rob.segment/FriendContact.id.<set-id>|<set-id>(kotlin.Long){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.segment/FriendContact.component1|component1(){}[0]
    final fun copy(kotlin/Long = ...): cn.rtast.rob.segment/FriendContact // cn.rtast.rob.segment/FriendContact.copy|copy(kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/FriendContact.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/FriendContact.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/FriendContact.toString|toString(){}[0]
}

final class cn.rtast.rob.segment/GroupContact : cn.rtast.rob.segment/Segment { // cn.rtast.rob.segment/GroupContact|null[0]
    constructor <init>(kotlin/Long) // cn.rtast.rob.segment/GroupContact.<init>|<init>(kotlin.Long){}[0]

    final var id // cn.rtast.rob.segment/GroupContact.id|{}id[0]
        final fun <get-id>(): kotlin/Long // cn.rtast.rob.segment/GroupContact.id.<get-id>|<get-id>(){}[0]
        final fun <set-id>(kotlin/Long) // cn.rtast.rob.segment/GroupContact.id.<set-id>|<set-id>(kotlin.Long){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.segment/GroupContact.component1|component1(){}[0]
    final fun copy(kotlin/Long = ...): cn.rtast.rob.segment/GroupContact // cn.rtast.rob.segment/GroupContact.copy|copy(kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/GroupContact.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/GroupContact.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/GroupContact.toString|toString(){}[0]
}

final class cn.rtast.rob.segment/Image : cn.rtast.rob.segment/Segment { // cn.rtast.rob.segment/Image|null[0]
    constructor <init>(cn.rtast.rob.entity/Resource, kotlin/Boolean = ...) // cn.rtast.rob.segment/Image.<init>|<init>(cn.rtast.rob.entity.Resource;kotlin.Boolean){}[0]

    final var base64 // cn.rtast.rob.segment/Image.base64|{}base64[0]
        final fun <get-base64>(): kotlin/Boolean // cn.rtast.rob.segment/Image.base64.<get-base64>|<get-base64>(){}[0]
        final fun <set-base64>(kotlin/Boolean) // cn.rtast.rob.segment/Image.base64.<set-base64>|<set-base64>(kotlin.Boolean){}[0]
    final var resource // cn.rtast.rob.segment/Image.resource|{}resource[0]
        final fun <get-resource>(): cn.rtast.rob.entity/Resource // cn.rtast.rob.segment/Image.resource.<get-resource>|<get-resource>(){}[0]
        final fun <set-resource>(cn.rtast.rob.entity/Resource) // cn.rtast.rob.segment/Image.resource.<set-resource>|<set-resource>(cn.rtast.rob.entity.Resource){}[0]

    final fun component1(): cn.rtast.rob.entity/Resource // cn.rtast.rob.segment/Image.component1|component1(){}[0]
    final fun component2(): kotlin/Boolean // cn.rtast.rob.segment/Image.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.entity/Resource = ..., kotlin/Boolean = ...): cn.rtast.rob.segment/Image // cn.rtast.rob.segment/Image.copy|copy(cn.rtast.rob.entity.Resource;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/Image.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/Image.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/Image.toString|toString(){}[0]
}

final class cn.rtast.rob.segment/ImageSegment : cn.rtast.rob.segment/MessageSegment { // cn.rtast.rob.segment/ImageSegment|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String) // cn.rtast.rob.segment/ImageSegment.<init>|<init>(kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]

    final val file // cn.rtast.rob.segment/ImageSegment.file|{}file[0]
        final fun <get-file>(): kotlin/String // cn.rtast.rob.segment/ImageSegment.file.<get-file>|<get-file>(){}[0]
    final val filename // cn.rtast.rob.segment/ImageSegment.filename|{}filename[0]
        final fun <get-filename>(): kotlin/String // cn.rtast.rob.segment/ImageSegment.filename.<get-filename>|<get-filename>(){}[0]
    final val subType // cn.rtast.rob.segment/ImageSegment.subType|{}subType[0]
        final fun <get-subType>(): kotlin/String // cn.rtast.rob.segment/ImageSegment.subType.<get-subType>|<get-subType>(){}[0]
    final val summary // cn.rtast.rob.segment/ImageSegment.summary|{}summary[0]
        final fun <get-summary>(): kotlin/String // cn.rtast.rob.segment/ImageSegment.summary.<get-summary>|<get-summary>(){}[0]
    final val url // cn.rtast.rob.segment/ImageSegment.url|{}url[0]
        final fun <get-url>(): kotlin/String // cn.rtast.rob.segment/ImageSegment.url.<get-url>|<get-url>(){}[0]

    final fun component1(): kotlin/String // cn.rtast.rob.segment/ImageSegment.component1|component1(){}[0]
    final fun component2(): kotlin/String // cn.rtast.rob.segment/ImageSegment.component2|component2(){}[0]
    final fun component3(): kotlin/String // cn.rtast.rob.segment/ImageSegment.component3|component3(){}[0]
    final fun component4(): kotlin/String // cn.rtast.rob.segment/ImageSegment.component4|component4(){}[0]
    final fun component5(): kotlin/String // cn.rtast.rob.segment/ImageSegment.component5|component5(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ...): cn.rtast.rob.segment/ImageSegment // cn.rtast.rob.segment/ImageSegment.copy|copy(kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/ImageSegment.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/ImageSegment.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/ImageSegment.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.segment/ImageSegment> { // cn.rtast.rob.segment/ImageSegment.$serializer|null[0]
        final val descriptor // cn.rtast.rob.segment/ImageSegment.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.segment/ImageSegment.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.segment/ImageSegment.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.segment/ImageSegment // cn.rtast.rob.segment/ImageSegment.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.segment/ImageSegment) // cn.rtast.rob.segment/ImageSegment.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.segment.ImageSegment){}[0]
    }

    final object Companion { // cn.rtast.rob.segment/ImageSegment.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.segment/ImageSegment> // cn.rtast.rob.segment/ImageSegment.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.segment/JSON : cn.rtast.rob.segment/Segment { // cn.rtast.rob.segment/JSON|null[0]
    constructor <init>(kotlin/String) // cn.rtast.rob.segment/JSON.<init>|<init>(kotlin.String){}[0]

    final var json // cn.rtast.rob.segment/JSON.json|{}json[0]
        final fun <get-json>(): kotlin/String // cn.rtast.rob.segment/JSON.json.<get-json>|<get-json>(){}[0]
        final fun <set-json>(kotlin/String) // cn.rtast.rob.segment/JSON.json.<set-json>|<set-json>(kotlin.String){}[0]

    final fun component1(): kotlin/String // cn.rtast.rob.segment/JSON.component1|component1(){}[0]
    final fun copy(kotlin/String = ...): cn.rtast.rob.segment/JSON // cn.rtast.rob.segment/JSON.copy|copy(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/JSON.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/JSON.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/JSON.toString|toString(){}[0]
}

final class cn.rtast.rob.segment/JsonSegment : cn.rtast.rob.segment/MessageSegment { // cn.rtast.rob.segment/JsonSegment|null[0]
    constructor <init>(kotlin/String) // cn.rtast.rob.segment/JsonSegment.<init>|<init>(kotlin.String){}[0]

    final val data // cn.rtast.rob.segment/JsonSegment.data|{}data[0]
        final fun <get-data>(): kotlin/String // cn.rtast.rob.segment/JsonSegment.data.<get-data>|<get-data>(){}[0]

    final fun component1(): kotlin/String // cn.rtast.rob.segment/JsonSegment.component1|component1(){}[0]
    final fun copy(kotlin/String = ...): cn.rtast.rob.segment/JsonSegment // cn.rtast.rob.segment/JsonSegment.copy|copy(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/JsonSegment.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/JsonSegment.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/JsonSegment.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.segment/JsonSegment> { // cn.rtast.rob.segment/JsonSegment.$serializer|null[0]
        final val descriptor // cn.rtast.rob.segment/JsonSegment.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.segment/JsonSegment.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.segment/JsonSegment.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.segment/JsonSegment // cn.rtast.rob.segment/JsonSegment.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.segment/JsonSegment) // cn.rtast.rob.segment/JsonSegment.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.segment.JsonSegment){}[0]
    }

    final object Companion { // cn.rtast.rob.segment/JsonSegment.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.segment/JsonSegment> // cn.rtast.rob.segment/JsonSegment.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.segment/Location : cn.rtast.rob.segment/Segment { // cn.rtast.rob.segment/Location|null[0]
    constructor <init>(kotlin/Double, kotlin/Double, kotlin/String? = ..., kotlin/String? = ...) // cn.rtast.rob.segment/Location.<init>|<init>(kotlin.Double;kotlin.Double;kotlin.String?;kotlin.String?){}[0]

    final var content // cn.rtast.rob.segment/Location.content|{}content[0]
        final fun <get-content>(): kotlin/String? // cn.rtast.rob.segment/Location.content.<get-content>|<get-content>(){}[0]
        final fun <set-content>(kotlin/String?) // cn.rtast.rob.segment/Location.content.<set-content>|<set-content>(kotlin.String?){}[0]
    final var lat // cn.rtast.rob.segment/Location.lat|{}lat[0]
        final fun <get-lat>(): kotlin/Double // cn.rtast.rob.segment/Location.lat.<get-lat>|<get-lat>(){}[0]
        final fun <set-lat>(kotlin/Double) // cn.rtast.rob.segment/Location.lat.<set-lat>|<set-lat>(kotlin.Double){}[0]
    final var lon // cn.rtast.rob.segment/Location.lon|{}lon[0]
        final fun <get-lon>(): kotlin/Double // cn.rtast.rob.segment/Location.lon.<get-lon>|<get-lon>(){}[0]
        final fun <set-lon>(kotlin/Double) // cn.rtast.rob.segment/Location.lon.<set-lon>|<set-lon>(kotlin.Double){}[0]
    final var title // cn.rtast.rob.segment/Location.title|{}title[0]
        final fun <get-title>(): kotlin/String? // cn.rtast.rob.segment/Location.title.<get-title>|<get-title>(){}[0]
        final fun <set-title>(kotlin/String?) // cn.rtast.rob.segment/Location.title.<set-title>|<set-title>(kotlin.String?){}[0]

    final fun component1(): kotlin/Double // cn.rtast.rob.segment/Location.component1|component1(){}[0]
    final fun component2(): kotlin/Double // cn.rtast.rob.segment/Location.component2|component2(){}[0]
    final fun component3(): kotlin/String? // cn.rtast.rob.segment/Location.component3|component3(){}[0]
    final fun component4(): kotlin/String? // cn.rtast.rob.segment/Location.component4|component4(){}[0]
    final fun copy(kotlin/Double = ..., kotlin/Double = ..., kotlin/String? = ..., kotlin/String? = ...): cn.rtast.rob.segment/Location // cn.rtast.rob.segment/Location.copy|copy(kotlin.Double;kotlin.Double;kotlin.String?;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/Location.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/Location.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/Location.toString|toString(){}[0]
}

final class cn.rtast.rob.segment/LocationSegment : cn.rtast.rob.segment/MessageSegment { // cn.rtast.rob.segment/LocationSegment|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/String, kotlin/String) // cn.rtast.rob.segment/LocationSegment.<init>|<init>(kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]

    final val content // cn.rtast.rob.segment/LocationSegment.content|{}content[0]
        final fun <get-content>(): kotlin/String // cn.rtast.rob.segment/LocationSegment.content.<get-content>|<get-content>(){}[0]
    final val lat // cn.rtast.rob.segment/LocationSegment.lat|{}lat[0]
        final fun <get-lat>(): kotlin/String // cn.rtast.rob.segment/LocationSegment.lat.<get-lat>|<get-lat>(){}[0]
    final val lon // cn.rtast.rob.segment/LocationSegment.lon|{}lon[0]
        final fun <get-lon>(): kotlin/String // cn.rtast.rob.segment/LocationSegment.lon.<get-lon>|<get-lon>(){}[0]
    final val title // cn.rtast.rob.segment/LocationSegment.title|{}title[0]
        final fun <get-title>(): kotlin/String // cn.rtast.rob.segment/LocationSegment.title.<get-title>|<get-title>(){}[0]

    final fun component1(): kotlin/String // cn.rtast.rob.segment/LocationSegment.component1|component1(){}[0]
    final fun component2(): kotlin/String // cn.rtast.rob.segment/LocationSegment.component2|component2(){}[0]
    final fun component3(): kotlin/String // cn.rtast.rob.segment/LocationSegment.component3|component3(){}[0]
    final fun component4(): kotlin/String // cn.rtast.rob.segment/LocationSegment.component4|component4(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ...): cn.rtast.rob.segment/LocationSegment // cn.rtast.rob.segment/LocationSegment.copy|copy(kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/LocationSegment.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/LocationSegment.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/LocationSegment.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.segment/LocationSegment> { // cn.rtast.rob.segment/LocationSegment.$serializer|null[0]
        final val descriptor // cn.rtast.rob.segment/LocationSegment.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.segment/LocationSegment.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.segment/LocationSegment.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.segment/LocationSegment // cn.rtast.rob.segment/LocationSegment.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.segment/LocationSegment) // cn.rtast.rob.segment/LocationSegment.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.segment.LocationSegment){}[0]
    }

    final object Companion { // cn.rtast.rob.segment/LocationSegment.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.segment/LocationSegment> // cn.rtast.rob.segment/LocationSegment.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.segment/MFaceSegment : cn.rtast.rob.segment/MessageSegment { // cn.rtast.rob.segment/MFaceSegment|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String) // cn.rtast.rob.segment/MFaceSegment.<init>|<init>(kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]

    final val emojiId // cn.rtast.rob.segment/MFaceSegment.emojiId|{}emojiId[0]
        final fun <get-emojiId>(): kotlin/String // cn.rtast.rob.segment/MFaceSegment.emojiId.<get-emojiId>|<get-emojiId>(){}[0]
    final val emojiPackageId // cn.rtast.rob.segment/MFaceSegment.emojiPackageId|{}emojiPackageId[0]
        final fun <get-emojiPackageId>(): kotlin/String // cn.rtast.rob.segment/MFaceSegment.emojiPackageId.<get-emojiPackageId>|<get-emojiPackageId>(){}[0]
    final val key // cn.rtast.rob.segment/MFaceSegment.key|{}key[0]
        final fun <get-key>(): kotlin/String // cn.rtast.rob.segment/MFaceSegment.key.<get-key>|<get-key>(){}[0]
    final val summary // cn.rtast.rob.segment/MFaceSegment.summary|{}summary[0]
        final fun <get-summary>(): kotlin/String // cn.rtast.rob.segment/MFaceSegment.summary.<get-summary>|<get-summary>(){}[0]
    final val url // cn.rtast.rob.segment/MFaceSegment.url|{}url[0]
        final fun <get-url>(): kotlin/String // cn.rtast.rob.segment/MFaceSegment.url.<get-url>|<get-url>(){}[0]

    final fun component1(): kotlin/String // cn.rtast.rob.segment/MFaceSegment.component1|component1(){}[0]
    final fun component2(): kotlin/String // cn.rtast.rob.segment/MFaceSegment.component2|component2(){}[0]
    final fun component3(): kotlin/String // cn.rtast.rob.segment/MFaceSegment.component3|component3(){}[0]
    final fun component4(): kotlin/String // cn.rtast.rob.segment/MFaceSegment.component4|component4(){}[0]
    final fun component5(): kotlin/String // cn.rtast.rob.segment/MFaceSegment.component5|component5(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ...): cn.rtast.rob.segment/MFaceSegment // cn.rtast.rob.segment/MFaceSegment.copy|copy(kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/MFaceSegment.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/MFaceSegment.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/MFaceSegment.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.segment/MFaceSegment> { // cn.rtast.rob.segment/MFaceSegment.$serializer|null[0]
        final val descriptor // cn.rtast.rob.segment/MFaceSegment.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.segment/MFaceSegment.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.segment/MFaceSegment.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.segment/MFaceSegment // cn.rtast.rob.segment/MFaceSegment.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.segment/MFaceSegment) // cn.rtast.rob.segment/MFaceSegment.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.segment.MFaceSegment){}[0]
    }

    final object Companion { // cn.rtast.rob.segment/MFaceSegment.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.segment/MFaceSegment> // cn.rtast.rob.segment/MFaceSegment.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.segment/MarkdownSegment : cn.rtast.rob.segment/MessageSegment { // cn.rtast.rob.segment/MarkdownSegment|null[0]
    constructor <init>(kotlin/String) // cn.rtast.rob.segment/MarkdownSegment.<init>|<init>(kotlin.String){}[0]

    final val content // cn.rtast.rob.segment/MarkdownSegment.content|{}content[0]
        final fun <get-content>(): kotlin/String // cn.rtast.rob.segment/MarkdownSegment.content.<get-content>|<get-content>(){}[0]

    final fun component1(): kotlin/String // cn.rtast.rob.segment/MarkdownSegment.component1|component1(){}[0]
    final fun copy(kotlin/String = ...): cn.rtast.rob.segment/MarkdownSegment // cn.rtast.rob.segment/MarkdownSegment.copy|copy(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/MarkdownSegment.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/MarkdownSegment.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/MarkdownSegment.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.segment/MarkdownSegment> { // cn.rtast.rob.segment/MarkdownSegment.$serializer|null[0]
        final val descriptor // cn.rtast.rob.segment/MarkdownSegment.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.segment/MarkdownSegment.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.segment/MarkdownSegment.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.segment/MarkdownSegment // cn.rtast.rob.segment/MarkdownSegment.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.segment/MarkdownSegment) // cn.rtast.rob.segment/MarkdownSegment.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.segment.MarkdownSegment){}[0]
    }

    final object Companion { // cn.rtast.rob.segment/MarkdownSegment.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.segment/MarkdownSegment> // cn.rtast.rob.segment/MarkdownSegment.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.segment/MusicSegment : cn.rtast.rob.segment/MessageSegment { // cn.rtast.rob.segment/MusicSegment|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String) // cn.rtast.rob.segment/MusicSegment.<init>|<init>(kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]

    final val audio // cn.rtast.rob.segment/MusicSegment.audio|{}audio[0]
        final fun <get-audio>(): kotlin/String // cn.rtast.rob.segment/MusicSegment.audio.<get-audio>|<get-audio>(){}[0]
    final val content // cn.rtast.rob.segment/MusicSegment.content|{}content[0]
        final fun <get-content>(): kotlin/String // cn.rtast.rob.segment/MusicSegment.content.<get-content>|<get-content>(){}[0]
    final val id // cn.rtast.rob.segment/MusicSegment.id|{}id[0]
        final fun <get-id>(): kotlin/String // cn.rtast.rob.segment/MusicSegment.id.<get-id>|<get-id>(){}[0]
    final val image // cn.rtast.rob.segment/MusicSegment.image|{}image[0]
        final fun <get-image>(): kotlin/String // cn.rtast.rob.segment/MusicSegment.image.<get-image>|<get-image>(){}[0]
    final val title // cn.rtast.rob.segment/MusicSegment.title|{}title[0]
        final fun <get-title>(): kotlin/String // cn.rtast.rob.segment/MusicSegment.title.<get-title>|<get-title>(){}[0]
    final val type // cn.rtast.rob.segment/MusicSegment.type|{}type[0]
        final fun <get-type>(): kotlin/String // cn.rtast.rob.segment/MusicSegment.type.<get-type>|<get-type>(){}[0]
    final val url // cn.rtast.rob.segment/MusicSegment.url|{}url[0]
        final fun <get-url>(): kotlin/String // cn.rtast.rob.segment/MusicSegment.url.<get-url>|<get-url>(){}[0]

    final fun component1(): kotlin/String // cn.rtast.rob.segment/MusicSegment.component1|component1(){}[0]
    final fun component2(): kotlin/String // cn.rtast.rob.segment/MusicSegment.component2|component2(){}[0]
    final fun component3(): kotlin/String // cn.rtast.rob.segment/MusicSegment.component3|component3(){}[0]
    final fun component4(): kotlin/String // cn.rtast.rob.segment/MusicSegment.component4|component4(){}[0]
    final fun component5(): kotlin/String // cn.rtast.rob.segment/MusicSegment.component5|component5(){}[0]
    final fun component6(): kotlin/String // cn.rtast.rob.segment/MusicSegment.component6|component6(){}[0]
    final fun component7(): kotlin/String // cn.rtast.rob.segment/MusicSegment.component7|component7(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ...): cn.rtast.rob.segment/MusicSegment // cn.rtast.rob.segment/MusicSegment.copy|copy(kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/MusicSegment.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/MusicSegment.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/MusicSegment.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.segment/MusicSegment> { // cn.rtast.rob.segment/MusicSegment.$serializer|null[0]
        final val descriptor // cn.rtast.rob.segment/MusicSegment.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.segment/MusicSegment.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.segment/MusicSegment.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.segment/MusicSegment // cn.rtast.rob.segment/MusicSegment.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.segment/MusicSegment) // cn.rtast.rob.segment/MusicSegment.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.segment.MusicSegment){}[0]
    }

    final object Companion { // cn.rtast.rob.segment/MusicSegment.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.segment/MusicSegment> // cn.rtast.rob.segment/MusicSegment.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.segment/MusicShare : cn.rtast.rob.segment/Segment { // cn.rtast.rob.segment/MusicShare|null[0]
    constructor <init>(cn.rtast.rob.enums/MusicShareType, kotlin/String) // cn.rtast.rob.segment/MusicShare.<init>|<init>(cn.rtast.rob.enums.MusicShareType;kotlin.String){}[0]

    final var id // cn.rtast.rob.segment/MusicShare.id|{}id[0]
        final fun <get-id>(): kotlin/String // cn.rtast.rob.segment/MusicShare.id.<get-id>|<get-id>(){}[0]
        final fun <set-id>(kotlin/String) // cn.rtast.rob.segment/MusicShare.id.<set-id>|<set-id>(kotlin.String){}[0]
    final var type // cn.rtast.rob.segment/MusicShare.type|{}type[0]
        final fun <get-type>(): cn.rtast.rob.enums/MusicShareType // cn.rtast.rob.segment/MusicShare.type.<get-type>|<get-type>(){}[0]
        final fun <set-type>(cn.rtast.rob.enums/MusicShareType) // cn.rtast.rob.segment/MusicShare.type.<set-type>|<set-type>(cn.rtast.rob.enums.MusicShareType){}[0]

    final fun component1(): cn.rtast.rob.enums/MusicShareType // cn.rtast.rob.segment/MusicShare.component1|component1(){}[0]
    final fun component2(): kotlin/String // cn.rtast.rob.segment/MusicShare.component2|component2(){}[0]
    final fun copy(cn.rtast.rob.enums/MusicShareType = ..., kotlin/String = ...): cn.rtast.rob.segment/MusicShare // cn.rtast.rob.segment/MusicShare.copy|copy(cn.rtast.rob.enums.MusicShareType;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/MusicShare.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/MusicShare.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/MusicShare.toString|toString(){}[0]
}

final class cn.rtast.rob.segment/NewLine : cn.rtast.rob.segment/Segment { // cn.rtast.rob.segment/NewLine|null[0]
    constructor <init>(kotlin/Int = ...) // cn.rtast.rob.segment/NewLine.<init>|<init>(kotlin.Int){}[0]

    final var times // cn.rtast.rob.segment/NewLine.times|{}times[0]
        final fun <get-times>(): kotlin/Int // cn.rtast.rob.segment/NewLine.times.<get-times>|<get-times>(){}[0]
        final fun <set-times>(kotlin/Int) // cn.rtast.rob.segment/NewLine.times.<set-times>|<set-times>(kotlin.Int){}[0]

    final fun component1(): kotlin/Int // cn.rtast.rob.segment/NewLine.component1|component1(){}[0]
    final fun copy(kotlin/Int = ...): cn.rtast.rob.segment/NewLine // cn.rtast.rob.segment/NewLine.copy|copy(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/NewLine.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/NewLine.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/NewLine.toString|toString(){}[0]
}

final class cn.rtast.rob.segment/Poke : cn.rtast.rob.segment/Segment { // cn.rtast.rob.segment/Poke|null[0]
    constructor <init>(cn.rtast.rob.enums/PokeMessage) // cn.rtast.rob.segment/Poke.<init>|<init>(cn.rtast.rob.enums.PokeMessage){}[0]

    final var poke // cn.rtast.rob.segment/Poke.poke|{}poke[0]
        final fun <get-poke>(): cn.rtast.rob.enums/PokeMessage // cn.rtast.rob.segment/Poke.poke.<get-poke>|<get-poke>(){}[0]
        final fun <set-poke>(cn.rtast.rob.enums/PokeMessage) // cn.rtast.rob.segment/Poke.poke.<set-poke>|<set-poke>(cn.rtast.rob.enums.PokeMessage){}[0]

    final fun component1(): cn.rtast.rob.enums/PokeMessage // cn.rtast.rob.segment/Poke.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.enums/PokeMessage = ...): cn.rtast.rob.segment/Poke // cn.rtast.rob.segment/Poke.copy|copy(cn.rtast.rob.enums.PokeMessage){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/Poke.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/Poke.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/Poke.toString|toString(){}[0]
}

final class cn.rtast.rob.segment/QFace : cn.rtast.rob.segment/Segment { // cn.rtast.rob.segment/QFace|null[0]
    constructor <init>(cn.rtast.rob.enums/QQFace) // cn.rtast.rob.segment/QFace.<init>|<init>(cn.rtast.rob.enums.QQFace){}[0]

    final var id // cn.rtast.rob.segment/QFace.id|{}id[0]
        final fun <get-id>(): cn.rtast.rob.enums/QQFace // cn.rtast.rob.segment/QFace.id.<get-id>|<get-id>(){}[0]
        final fun <set-id>(cn.rtast.rob.enums/QQFace) // cn.rtast.rob.segment/QFace.id.<set-id>|<set-id>(cn.rtast.rob.enums.QQFace){}[0]

    final fun component1(): cn.rtast.rob.enums/QQFace // cn.rtast.rob.segment/QFace.component1|component1(){}[0]
    final fun copy(cn.rtast.rob.enums/QQFace = ...): cn.rtast.rob.segment/QFace // cn.rtast.rob.segment/QFace.copy|copy(cn.rtast.rob.enums.QQFace){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/QFace.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/QFace.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/QFace.toString|toString(){}[0]
}

final class cn.rtast.rob.segment/Record : cn.rtast.rob.segment/Segment { // cn.rtast.rob.segment/Record|null[0]
    constructor <init>(kotlin/String) // cn.rtast.rob.segment/Record.<init>|<init>(kotlin.String){}[0]

    final var file // cn.rtast.rob.segment/Record.file|{}file[0]
        final fun <get-file>(): kotlin/String // cn.rtast.rob.segment/Record.file.<get-file>|<get-file>(){}[0]
        final fun <set-file>(kotlin/String) // cn.rtast.rob.segment/Record.file.<set-file>|<set-file>(kotlin.String){}[0]

    final fun component1(): kotlin/String // cn.rtast.rob.segment/Record.component1|component1(){}[0]
    final fun copy(kotlin/String = ...): cn.rtast.rob.segment/Record // cn.rtast.rob.segment/Record.copy|copy(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/Record.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/Record.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/Record.toString|toString(){}[0]
}

final class cn.rtast.rob.segment/RecordSegment : cn.rtast.rob.segment/MessageSegment { // cn.rtast.rob.segment/RecordSegment|null[0]
    constructor <init>(kotlin/String, kotlin/String) // cn.rtast.rob.segment/RecordSegment.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final val file // cn.rtast.rob.segment/RecordSegment.file|{}file[0]
        final fun <get-file>(): kotlin/String // cn.rtast.rob.segment/RecordSegment.file.<get-file>|<get-file>(){}[0]
    final val url // cn.rtast.rob.segment/RecordSegment.url|{}url[0]
        final fun <get-url>(): kotlin/String // cn.rtast.rob.segment/RecordSegment.url.<get-url>|<get-url>(){}[0]

    final fun component1(): kotlin/String // cn.rtast.rob.segment/RecordSegment.component1|component1(){}[0]
    final fun component2(): kotlin/String // cn.rtast.rob.segment/RecordSegment.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ...): cn.rtast.rob.segment/RecordSegment // cn.rtast.rob.segment/RecordSegment.copy|copy(kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/RecordSegment.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/RecordSegment.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/RecordSegment.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.segment/RecordSegment> { // cn.rtast.rob.segment/RecordSegment.$serializer|null[0]
        final val descriptor // cn.rtast.rob.segment/RecordSegment.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.segment/RecordSegment.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.segment/RecordSegment.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.segment/RecordSegment // cn.rtast.rob.segment/RecordSegment.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.segment/RecordSegment) // cn.rtast.rob.segment/RecordSegment.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.segment.RecordSegment){}[0]
    }

    final object Companion { // cn.rtast.rob.segment/RecordSegment.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.segment/RecordSegment> // cn.rtast.rob.segment/RecordSegment.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.segment/Reply : cn.rtast.rob.segment/Segment { // cn.rtast.rob.segment/Reply|null[0]
    constructor <init>(kotlin/Long) // cn.rtast.rob.segment/Reply.<init>|<init>(kotlin.Long){}[0]

    final var id // cn.rtast.rob.segment/Reply.id|{}id[0]
        final fun <get-id>(): kotlin/Long // cn.rtast.rob.segment/Reply.id.<get-id>|<get-id>(){}[0]
        final fun <set-id>(kotlin/Long) // cn.rtast.rob.segment/Reply.id.<set-id>|<set-id>(kotlin.Long){}[0]

    final fun component1(): kotlin/Long // cn.rtast.rob.segment/Reply.component1|component1(){}[0]
    final fun copy(kotlin/Long = ...): cn.rtast.rob.segment/Reply // cn.rtast.rob.segment/Reply.copy|copy(kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/Reply.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/Reply.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/Reply.toString|toString(){}[0]
}

final class cn.rtast.rob.segment/ReplySegment : cn.rtast.rob.segment/MessageSegment { // cn.rtast.rob.segment/ReplySegment|null[0]
    constructor <init>(kotlin/String) // cn.rtast.rob.segment/ReplySegment.<init>|<init>(kotlin.String){}[0]

    final val id // cn.rtast.rob.segment/ReplySegment.id|{}id[0]
        final fun <get-id>(): kotlin/String // cn.rtast.rob.segment/ReplySegment.id.<get-id>|<get-id>(){}[0]

    final fun component1(): kotlin/String // cn.rtast.rob.segment/ReplySegment.component1|component1(){}[0]
    final fun copy(kotlin/String = ...): cn.rtast.rob.segment/ReplySegment // cn.rtast.rob.segment/ReplySegment.copy|copy(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/ReplySegment.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/ReplySegment.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/ReplySegment.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.segment/ReplySegment> { // cn.rtast.rob.segment/ReplySegment.$serializer|null[0]
        final val descriptor // cn.rtast.rob.segment/ReplySegment.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.segment/ReplySegment.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.segment/ReplySegment.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.segment/ReplySegment // cn.rtast.rob.segment/ReplySegment.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.segment/ReplySegment) // cn.rtast.rob.segment/ReplySegment.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.segment.ReplySegment){}[0]
    }

    final object Companion { // cn.rtast.rob.segment/ReplySegment.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.segment/ReplySegment> // cn.rtast.rob.segment/ReplySegment.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.segment/Rps : cn.rtast.rob.segment/Segment { // cn.rtast.rob.segment/Rps|null[0]
    constructor <init>() // cn.rtast.rob.segment/Rps.<init>|<init>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/Rps.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/Rps.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/Rps.toString|toString(){}[0]
}

final class cn.rtast.rob.segment/RpsSegment : cn.rtast.rob.segment/MessageSegment { // cn.rtast.rob.segment/RpsSegment|null[0]
    constructor <init>() // cn.rtast.rob.segment/RpsSegment.<init>|<init>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/RpsSegment.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/RpsSegment.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/RpsSegment.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.segment/RpsSegment> { // cn.rtast.rob.segment/RpsSegment.$serializer|null[0]
        final val descriptor // cn.rtast.rob.segment/RpsSegment.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.segment/RpsSegment.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.segment/RpsSegment.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.segment/RpsSegment // cn.rtast.rob.segment/RpsSegment.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.segment/RpsSegment) // cn.rtast.rob.segment/RpsSegment.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.segment.RpsSegment){}[0]
    }

    final object Companion { // cn.rtast.rob.segment/RpsSegment.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.segment/RpsSegment> // cn.rtast.rob.segment/RpsSegment.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.segment/Shake : cn.rtast.rob.segment/Segment { // cn.rtast.rob.segment/Shake|null[0]
    constructor <init>() // cn.rtast.rob.segment/Shake.<init>|<init>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/Shake.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/Shake.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/Shake.toString|toString(){}[0]
}

final class cn.rtast.rob.segment/Share : cn.rtast.rob.segment/Segment { // cn.rtast.rob.segment/Share|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/String? = ..., kotlin/String? = ...) // cn.rtast.rob.segment/Share.<init>|<init>(kotlin.String;kotlin.String;kotlin.String?;kotlin.String?){}[0]

    final var content // cn.rtast.rob.segment/Share.content|{}content[0]
        final fun <get-content>(): kotlin/String? // cn.rtast.rob.segment/Share.content.<get-content>|<get-content>(){}[0]
        final fun <set-content>(kotlin/String?) // cn.rtast.rob.segment/Share.content.<set-content>|<set-content>(kotlin.String?){}[0]
    final var image // cn.rtast.rob.segment/Share.image|{}image[0]
        final fun <get-image>(): kotlin/String? // cn.rtast.rob.segment/Share.image.<get-image>|<get-image>(){}[0]
        final fun <set-image>(kotlin/String?) // cn.rtast.rob.segment/Share.image.<set-image>|<set-image>(kotlin.String?){}[0]
    final var title // cn.rtast.rob.segment/Share.title|{}title[0]
        final fun <get-title>(): kotlin/String // cn.rtast.rob.segment/Share.title.<get-title>|<get-title>(){}[0]
        final fun <set-title>(kotlin/String) // cn.rtast.rob.segment/Share.title.<set-title>|<set-title>(kotlin.String){}[0]
    final var url // cn.rtast.rob.segment/Share.url|{}url[0]
        final fun <get-url>(): kotlin/String // cn.rtast.rob.segment/Share.url.<get-url>|<get-url>(){}[0]
        final fun <set-url>(kotlin/String) // cn.rtast.rob.segment/Share.url.<set-url>|<set-url>(kotlin.String){}[0]

    final fun component1(): kotlin/String // cn.rtast.rob.segment/Share.component1|component1(){}[0]
    final fun component2(): kotlin/String // cn.rtast.rob.segment/Share.component2|component2(){}[0]
    final fun component3(): kotlin/String? // cn.rtast.rob.segment/Share.component3|component3(){}[0]
    final fun component4(): kotlin/String? // cn.rtast.rob.segment/Share.component4|component4(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/String? = ..., kotlin/String? = ...): cn.rtast.rob.segment/Share // cn.rtast.rob.segment/Share.copy|copy(kotlin.String;kotlin.String;kotlin.String?;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/Share.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/Share.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/Share.toString|toString(){}[0]
}

final class cn.rtast.rob.segment/Spaces : cn.rtast.rob.segment/Segment { // cn.rtast.rob.segment/Spaces|null[0]
    constructor <init>(kotlin/Int = ...) // cn.rtast.rob.segment/Spaces.<init>|<init>(kotlin.Int){}[0]

    final var times // cn.rtast.rob.segment/Spaces.times|{}times[0]
        final fun <get-times>(): kotlin/Int // cn.rtast.rob.segment/Spaces.times.<get-times>|<get-times>(){}[0]
        final fun <set-times>(kotlin/Int) // cn.rtast.rob.segment/Spaces.times.<set-times>|<set-times>(kotlin.Int){}[0]

    final fun component1(): kotlin/Int // cn.rtast.rob.segment/Spaces.component1|component1(){}[0]
    final fun copy(kotlin/Int = ...): cn.rtast.rob.segment/Spaces // cn.rtast.rob.segment/Spaces.copy|copy(kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/Spaces.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/Spaces.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/Spaces.toString|toString(){}[0]
}

final class cn.rtast.rob.segment/Text : cn.rtast.rob.segment/Segment { // cn.rtast.rob.segment/Text|null[0]
    constructor <init>(kotlin/Any) // cn.rtast.rob.segment/Text.<init>|<init>(kotlin.Any){}[0]

    final var text // cn.rtast.rob.segment/Text.text|{}text[0]
        final fun <get-text>(): kotlin/Any // cn.rtast.rob.segment/Text.text.<get-text>|<get-text>(){}[0]
        final fun <set-text>(kotlin/Any) // cn.rtast.rob.segment/Text.text.<set-text>|<set-text>(kotlin.Any){}[0]

    final fun component1(): kotlin/Any // cn.rtast.rob.segment/Text.component1|component1(){}[0]
    final fun copy(kotlin/Any = ...): cn.rtast.rob.segment/Text // cn.rtast.rob.segment/Text.copy|copy(kotlin.Any){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/Text.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/Text.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/Text.toString|toString(){}[0]
}

final class cn.rtast.rob.segment/TextSegment : cn.rtast.rob.segment/MessageSegment { // cn.rtast.rob.segment/TextSegment|null[0]
    constructor <init>(kotlin/String) // cn.rtast.rob.segment/TextSegment.<init>|<init>(kotlin.String){}[0]

    final val text // cn.rtast.rob.segment/TextSegment.text|{}text[0]
        final fun <get-text>(): kotlin/String // cn.rtast.rob.segment/TextSegment.text.<get-text>|<get-text>(){}[0]

    final fun component1(): kotlin/String // cn.rtast.rob.segment/TextSegment.component1|component1(){}[0]
    final fun copy(kotlin/String = ...): cn.rtast.rob.segment/TextSegment // cn.rtast.rob.segment/TextSegment.copy|copy(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/TextSegment.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/TextSegment.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/TextSegment.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.segment/TextSegment> { // cn.rtast.rob.segment/TextSegment.$serializer|null[0]
        final val descriptor // cn.rtast.rob.segment/TextSegment.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.segment/TextSegment.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.segment/TextSegment.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.segment/TextSegment // cn.rtast.rob.segment/TextSegment.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.segment/TextSegment) // cn.rtast.rob.segment/TextSegment.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.segment.TextSegment){}[0]
    }

    final object Companion { // cn.rtast.rob.segment/TextSegment.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.segment/TextSegment> // cn.rtast.rob.segment/TextSegment.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.segment/Video : cn.rtast.rob.segment/Segment { // cn.rtast.rob.segment/Video|null[0]
    constructor <init>(kotlin/String) // cn.rtast.rob.segment/Video.<init>|<init>(kotlin.String){}[0]

    final var file // cn.rtast.rob.segment/Video.file|{}file[0]
        final fun <get-file>(): kotlin/String // cn.rtast.rob.segment/Video.file.<get-file>|<get-file>(){}[0]
        final fun <set-file>(kotlin/String) // cn.rtast.rob.segment/Video.file.<set-file>|<set-file>(kotlin.String){}[0]

    final fun component1(): kotlin/String // cn.rtast.rob.segment/Video.component1|component1(){}[0]
    final fun copy(kotlin/String = ...): cn.rtast.rob.segment/Video // cn.rtast.rob.segment/Video.copy|copy(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/Video.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/Video.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/Video.toString|toString(){}[0]
}

final class cn.rtast.rob.segment/XML : cn.rtast.rob.segment/Segment { // cn.rtast.rob.segment/XML|null[0]
    constructor <init>(kotlin/String) // cn.rtast.rob.segment/XML.<init>|<init>(kotlin.String){}[0]

    final var xml // cn.rtast.rob.segment/XML.xml|{}xml[0]
        final fun <get-xml>(): kotlin/String // cn.rtast.rob.segment/XML.xml.<get-xml>|<get-xml>(){}[0]
        final fun <set-xml>(kotlin/String) // cn.rtast.rob.segment/XML.xml.<set-xml>|<set-xml>(kotlin.String){}[0]

    final fun component1(): kotlin/String // cn.rtast.rob.segment/XML.component1|component1(){}[0]
    final fun copy(kotlin/String = ...): cn.rtast.rob.segment/XML // cn.rtast.rob.segment/XML.copy|copy(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/XML.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/XML.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/XML.toString|toString(){}[0]
}

final class cn.rtast.rob.segment/XmlSegment : cn.rtast.rob.segment/MessageSegment { // cn.rtast.rob.segment/XmlSegment|null[0]
    constructor <init>(kotlin/String) // cn.rtast.rob.segment/XmlSegment.<init>|<init>(kotlin.String){}[0]

    final val data // cn.rtast.rob.segment/XmlSegment.data|{}data[0]
        final fun <get-data>(): kotlin/String // cn.rtast.rob.segment/XmlSegment.data.<get-data>|<get-data>(){}[0]

    final fun component1(): kotlin/String // cn.rtast.rob.segment/XmlSegment.component1|component1(){}[0]
    final fun copy(kotlin/String = ...): cn.rtast.rob.segment/XmlSegment // cn.rtast.rob.segment/XmlSegment.copy|copy(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.segment/XmlSegment.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // cn.rtast.rob.segment/XmlSegment.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob.segment/XmlSegment.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<cn.rtast.rob.segment/XmlSegment> { // cn.rtast.rob.segment/XmlSegment.$serializer|null[0]
        final val descriptor // cn.rtast.rob.segment/XmlSegment.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // cn.rtast.rob.segment/XmlSegment.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // cn.rtast.rob.segment/XmlSegment.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): cn.rtast.rob.segment/XmlSegment // cn.rtast.rob.segment/XmlSegment.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, cn.rtast.rob.segment/XmlSegment) // cn.rtast.rob.segment/XmlSegment.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;cn.rtast.rob.segment.XmlSegment){}[0]
    }

    final object Companion { // cn.rtast.rob.segment/XmlSegment.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.segment/XmlSegment> // cn.rtast.rob.segment/XmlSegment.Companion.serializer|serializer(){}[0]
    }
}

final class cn.rtast.rob.session/SessionManager : cn.rtast.rob.session/ISessionManager<cn.rtast.rob.event.raw.message/PrivateMessage, cn.rtast.rob.event.raw.message/GroupMessage, cn.rtast.rob.session/PrivateSession<*>, cn.rtast.rob.session/GroupSession<*>, cn.rtast.rob.command/BaseCommand, cn.rtast.rob.event.raw/GroupSender, cn.rtast.rob.event.raw/PrivateSender> { // cn.rtast.rob.session/SessionManager|null[0]
    constructor <init>() // cn.rtast.rob.session/SessionManager.<init>|<init>(){}[0]

    final val groupActiveSessions // cn.rtast.rob.session/SessionManager.groupActiveSessions|{}groupActiveSessions[0]
        final fun <get-groupActiveSessions>(): kotlin.collections/MutableMap<cn.rtast.rob.event.raw/GroupSender, cn.rtast.rob.session/GroupSession<*>> // cn.rtast.rob.session/SessionManager.groupActiveSessions.<get-groupActiveSessions>|<get-groupActiveSessions>(){}[0]
    final val privateActiveSessions // cn.rtast.rob.session/SessionManager.privateActiveSessions|{}privateActiveSessions[0]
        final fun <get-privateActiveSessions>(): kotlin.collections/MutableMap<cn.rtast.rob.event.raw/PrivateSender, cn.rtast.rob.session/PrivateSession<*>> // cn.rtast.rob.session/SessionManager.privateActiveSessions.<get-privateActiveSessions>|<get-privateActiveSessions>(){}[0]

    final suspend fun <#A1: kotlin/Any> startPrivateSession(cn.rtast.rob.event.raw.message/PrivateMessage, cn.rtast.rob.command/BaseCommand, #A1): cn.rtast.rob.session/PrivateSession<#A1> // cn.rtast.rob.session/SessionManager.startPrivateSession|startPrivateSession(cn.rtast.rob.event.raw.message.PrivateMessage;cn.rtast.rob.command.BaseCommand;0:0){0§<kotlin.Any>}[0]
    final suspend fun <#A1: kotlin/Any> starterGroupSession(cn.rtast.rob.event.raw.message/GroupMessage, cn.rtast.rob.command/BaseCommand, #A1): cn.rtast.rob.session/GroupSession<#A1> // cn.rtast.rob.session/SessionManager.starterGroupSession|starterGroupSession(cn.rtast.rob.event.raw.message.GroupMessage;cn.rtast.rob.command.BaseCommand;0:0){0§<kotlin.Any>}[0]
    final suspend fun <#A1: kotlin/Any?> getTypedGroupSession(cn.rtast.rob.event.raw/GroupSender): cn.rtast.rob.session/IGroupSession<#A1>? // cn.rtast.rob.session/SessionManager.getTypedGroupSession|getTypedGroupSession(cn.rtast.rob.event.raw.GroupSender){0§<kotlin.Any?>}[0]
    final suspend fun <#A1: kotlin/Any?> getTypedPrivateSession(cn.rtast.rob.event.raw/PrivateSender): cn.rtast.rob.session/IPrivateSession<#A1>? // cn.rtast.rob.session/SessionManager.getTypedPrivateSession|getTypedPrivateSession(cn.rtast.rob.event.raw.PrivateSender){0§<kotlin.Any?>}[0]
    final suspend fun getGroupSession(cn.rtast.rob.event.raw/GroupSender): cn.rtast.rob.session/GroupSession<*>? // cn.rtast.rob.session/SessionManager.getGroupSession|getGroupSession(cn.rtast.rob.event.raw.GroupSender){}[0]
    final suspend fun getPrivateSession(cn.rtast.rob.event.raw/PrivateSender): cn.rtast.rob.session/PrivateSession<*>? // cn.rtast.rob.session/SessionManager.getPrivateSession|getPrivateSession(cn.rtast.rob.event.raw.PrivateSender){}[0]
    final suspend fun startGroupSession(cn.rtast.rob.event.raw.message/GroupMessage, cn.rtast.rob.command/BaseCommand): cn.rtast.rob.session/GroupSession<*> // cn.rtast.rob.session/SessionManager.startGroupSession|startGroupSession(cn.rtast.rob.event.raw.message.GroupMessage;cn.rtast.rob.command.BaseCommand){}[0]
    final suspend fun startPrivateSession(cn.rtast.rob.event.raw.message/PrivateMessage, cn.rtast.rob.command/BaseCommand): cn.rtast.rob.session/PrivateSession<*> // cn.rtast.rob.session/SessionManager.startPrivateSession|startPrivateSession(cn.rtast.rob.event.raw.message.PrivateMessage;cn.rtast.rob.command.BaseCommand){}[0]
}

final class cn.rtast.rob.util.ws/WebsocketSession { // cn.rtast.rob.util.ws/WebsocketSession|null[0]
    constructor <init>() // cn.rtast.rob.util.ws/WebsocketSession.<init>|<init>(){}[0]

    final suspend fun closeClient() // cn.rtast.rob.util.ws/WebsocketSession.closeClient|closeClient(){}[0]
    final suspend fun closeServer() // cn.rtast.rob.util.ws/WebsocketSession.closeServer|closeServer(){}[0]
    final suspend fun createClient(kotlin/String, kotlin/String, cn.rtast.rob.onebot/OneBotListener, kotlin/Boolean, cn.rtast.rob/BotInstance, kotlin/Long, kotlin.time/Duration) // cn.rtast.rob.util.ws/WebsocketSession.createClient|createClient(kotlin.String;kotlin.String;cn.rtast.rob.onebot.OneBotListener;kotlin.Boolean;cn.rtast.rob.BotInstance;kotlin.Long;kotlin.time.Duration){}[0]
    final suspend fun createServer(kotlin/Int, kotlin/String, cn.rtast.rob.onebot/OneBotListener, cn.rtast.rob/BotInstance, kotlin/String, kotlin.time/Duration) // cn.rtast.rob.util.ws/WebsocketSession.createServer|createServer(kotlin.Int;kotlin.String;cn.rtast.rob.onebot.OneBotListener;cn.rtast.rob.BotInstance;kotlin.String;kotlin.time.Duration){}[0]
    final suspend fun sendToClient(kotlin/String) // cn.rtast.rob.util.ws/WebsocketSession.sendToClient|sendToClient(kotlin.String){}[0]
    final suspend fun sendToServer(kotlin/String) // cn.rtast.rob.util.ws/WebsocketSession.sendToServer|sendToServer(kotlin.String){}[0]
}

final class cn.rtast.rob.util/BotManager : cn.rtast.rob.util/IBotManager<kotlin.collections/List<cn.rtast.rob/BotInstance>, cn.rtast.rob/BotInstance, cn.rtast.rob.onebot/OneBotAction> { // cn.rtast.rob.util/BotManager|null[0]
    constructor <init>() // cn.rtast.rob.util/BotManager.<init>|<init>(){}[0]

    final fun allBots(): kotlin.collections/List<cn.rtast.rob/BotInstance> // cn.rtast.rob.util/BotManager.allBots|allBots(){}[0]
    final suspend fun addBotInstance(cn.rtast.rob/BotInstance) // cn.rtast.rob.util/BotManager.addBotInstance|addBotInstance(cn.rtast.rob.BotInstance){}[0]
    final suspend fun disableAllBots() // cn.rtast.rob.util/BotManager.disableAllBots|disableAllBots(){}[0]
    final suspend fun disableBotInstance(cn.rtast.rob/BotInstance) // cn.rtast.rob.util/BotManager.disableBotInstance|disableBotInstance(cn.rtast.rob.BotInstance){}[0]
    final suspend fun enableAllBots() // cn.rtast.rob.util/BotManager.enableAllBots|enableAllBots(){}[0]
    final suspend fun enableBotInstance(cn.rtast.rob/BotInstance) // cn.rtast.rob.util/BotManager.enableBotInstance|enableBotInstance(cn.rtast.rob.BotInstance){}[0]
    final suspend fun get(cn.rtast.rob.util/IBotManager.ID): cn.rtast.rob/BotInstance? // cn.rtast.rob.util/BotManager.get|get(cn.rtast.rob.util.IBotManager.ID){}[0]
    final suspend fun getBotInstanceByAction(cn.rtast.rob.onebot/OneBotAction): cn.rtast.rob/BotInstance // cn.rtast.rob.util/BotManager.getBotInstanceByAction|getBotInstanceByAction(cn.rtast.rob.onebot.OneBotAction){}[0]
    final suspend fun getBotInstanceStatus(cn.rtast.rob/BotInstance): kotlin/Boolean // cn.rtast.rob.util/BotManager.getBotInstanceStatus|getBotInstanceStatus(cn.rtast.rob.BotInstance){}[0]
    final suspend fun removeBotInstance(cn.rtast.rob/BotInstance) // cn.rtast.rob.util/BotManager.removeBotInstance|removeBotInstance(cn.rtast.rob.BotInstance){}[0]
}

final class cn.rtast.rob/BotInstance : cn.rtast.rob/BaseBotInstance { // cn.rtast.rob/BotInstance|null[0]
    final val isActionInitialized // cn.rtast.rob/BotInstance.isActionInitialized|{}isActionInitialized[0]
        final fun <get-isActionInitialized>(): kotlin/Boolean // cn.rtast.rob/BotInstance.isActionInitialized.<get-isActionInitialized>|<get-isActionInitialized>(){}[0]
    final val scheduler // cn.rtast.rob/BotInstance.scheduler|{}scheduler[0]
        final fun <get-scheduler>(): cn.rtast.rob.scheduler/BotCoroutineScheduler<cn.rtast.rob/BotInstance> // cn.rtast.rob/BotInstance.scheduler.<get-scheduler>|<get-scheduler>(){}[0]

    final var action // cn.rtast.rob/BotInstance.action|{}action[0]
        final fun <get-action>(): cn.rtast.rob.onebot/OneBotAction // cn.rtast.rob/BotInstance.action.<get-action>|<get-action>(){}[0]
        final fun <set-action>(cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob/BotInstance.action.<set-action>|<set-action>(cn.rtast.rob.onebot.OneBotAction){}[0]
    final var websocket // cn.rtast.rob/BotInstance.websocket|{}websocket[0]
        final fun <get-websocket>(): cn.rtast.rob.util.ws/WebsocketSession? // cn.rtast.rob/BotInstance.websocket.<get-websocket>|<get-websocket>(){}[0]
        final fun <set-websocket>(cn.rtast.rob.util.ws/WebsocketSession?) // cn.rtast.rob/BotInstance.websocket.<set-websocket>|<set-websocket>(cn.rtast.rob.util.ws.WebsocketSession?){}[0]
    final var websocketServer // cn.rtast.rob/BotInstance.websocketServer|{}websocketServer[0]
        final fun <get-websocketServer>(): cn.rtast.rob.util.ws/WebsocketSession? // cn.rtast.rob/BotInstance.websocketServer.<get-websocketServer>|<get-websocketServer>(){}[0]
        final fun <set-websocketServer>(cn.rtast.rob.util.ws/WebsocketSession?) // cn.rtast.rob/BotInstance.websocketServer.<set-websocketServer>|<set-websocketServer>(cn.rtast.rob.util.ws.WebsocketSession?){}[0]

    final fun addListeningGroup(kotlin.collections/Collection<kotlin/Long>): cn.rtast.rob/BotInstance // cn.rtast.rob/BotInstance.addListeningGroup|addListeningGroup(kotlin.collections.Collection<kotlin.Long>){}[0]
    final fun addListeningGroup(kotlin/Long): cn.rtast.rob/BotInstance // cn.rtast.rob/BotInstance.addListeningGroup|addListeningGroup(kotlin.Long){}[0]
    final fun addListeningGroups(kotlin/LongArray...): cn.rtast.rob/BotInstance // cn.rtast.rob/BotInstance.addListeningGroups|addListeningGroups(kotlin.LongArray...){}[0]
    final fun disableEventFilter() // cn.rtast.rob/BotInstance.disableEventFilter|disableEventFilter(){}[0]
    final fun enableEventFilter() // cn.rtast.rob/BotInstance.enableEventFilter|enableEventFilter(){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob/BotInstance.toString|toString(){}[0]
    final suspend fun createBot(): cn.rtast.rob/BotInstance // cn.rtast.rob/BotInstance.createBot|createBot(){}[0]
    final suspend fun disposeBot() // cn.rtast.rob/BotInstance.disposeBot|disposeBot(){}[0]
}

sealed class cn.rtast.rob.event.raw.message/BaseMessage { // cn.rtast.rob.event.raw.message/BaseMessage|null[0]
    final val anonymous // cn.rtast.rob.event.raw.message/BaseMessage.anonymous|{}anonymous[0]
        final fun <get-anonymous>(): kotlin/String? // cn.rtast.rob.event.raw.message/BaseMessage.anonymous.<get-anonymous>|<get-anonymous>(){}[0]
    final val message // cn.rtast.rob.event.raw.message/BaseMessage.message|{}message[0]
        final fun <get-message>(): kotlin.collections/List<cn.rtast.rob.event.raw.message/ArrayMessage> // cn.rtast.rob.event.raw.message/BaseMessage.message.<get-message>|<get-message>(){}[0]
    final val messageId // cn.rtast.rob.event.raw.message/BaseMessage.messageId|{}messageId[0]
        final fun <get-messageId>(): kotlin/Long // cn.rtast.rob.event.raw.message/BaseMessage.messageId.<get-messageId>|<get-messageId>(){}[0]
    final val messageStyle // cn.rtast.rob.event.raw.message/BaseMessage.messageStyle|{}messageStyle[0]
        final fun <get-messageStyle>(): cn.rtast.rob.event.raw.message/MessageStyle? // cn.rtast.rob.event.raw.message/BaseMessage.messageStyle.<get-messageStyle>|<get-messageStyle>(){}[0]
    final val rawMessage // cn.rtast.rob.event.raw.message/BaseMessage.rawMessage|{}rawMessage[0]
        final fun <get-rawMessage>(): kotlin/String // cn.rtast.rob.event.raw.message/BaseMessage.rawMessage.<get-rawMessage>|<get-rawMessage>(){}[0]
    final val subType // cn.rtast.rob.event.raw.message/BaseMessage.subType|{}subType[0]
        final fun <get-subType>(): kotlin/String // cn.rtast.rob.event.raw.message/BaseMessage.subType.<get-subType>|<get-subType>(){}[0]
    final val time // cn.rtast.rob.event.raw.message/BaseMessage.time|{}time[0]
        final fun <get-time>(): kotlin/Long // cn.rtast.rob.event.raw.message/BaseMessage.time.<get-time>|<get-time>(){}[0]
    final val userId // cn.rtast.rob.event.raw.message/BaseMessage.userId|{}userId[0]
        final fun <get-userId>(): kotlin/Long // cn.rtast.rob.event.raw.message/BaseMessage.userId.<get-userId>|<get-userId>(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // cn.rtast.rob.event.raw.message/BaseMessage.Companion|null[0]
        final val $childSerializers // cn.rtast.rob.event.raw.message/BaseMessage.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<cn.rtast.rob.event.raw.message/BaseMessage> // cn.rtast.rob.event.raw.message/BaseMessage.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // cn.rtast.rob.event.raw.message/BaseMessage.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

sealed class cn.rtast.rob.event.raw.message/MessageData { // cn.rtast.rob.event.raw.message/MessageData|null[0]
    final class InboundAT : cn.rtast.rob.event.raw.message/MessageData { // cn.rtast.rob.event.raw.message/MessageData.InboundAT|null[0]
        constructor <init>(kotlin/String, kotlin/String) // cn.rtast.rob.event.raw.message/MessageData.InboundAT.<init>|<init>(kotlin.String;kotlin.String){}[0]

        final val name // cn.rtast.rob.event.raw.message/MessageData.InboundAT.name|{}name[0]
            final fun <get-name>(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundAT.name.<get-name>|<get-name>(){}[0]
        final val qq // cn.rtast.rob.event.raw.message/MessageData.InboundAT.qq|{}qq[0]
            final fun <get-qq>(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundAT.qq.<get-qq>|<get-qq>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundAT.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundAT.component2|component2(){}[0]
        final fun copy(kotlin/String = ..., kotlin/String = ...): cn.rtast.rob.event.raw.message/MessageData.InboundAT // cn.rtast.rob.event.raw.message/MessageData.InboundAT.copy|copy(kotlin.String;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/MessageData.InboundAT.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/MessageData.InboundAT.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundAT.toString|toString(){}[0]
    }

    final class InboundFace : cn.rtast.rob.event.raw.message/MessageData { // cn.rtast.rob.event.raw.message/MessageData.InboundFace|null[0]
        constructor <init>(kotlin/String, kotlin/String?) // cn.rtast.rob.event.raw.message/MessageData.InboundFace.<init>|<init>(kotlin.String;kotlin.String?){}[0]

        final val id // cn.rtast.rob.event.raw.message/MessageData.InboundFace.id|{}id[0]
            final fun <get-id>(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundFace.id.<get-id>|<get-id>(){}[0]
        final val large // cn.rtast.rob.event.raw.message/MessageData.InboundFace.large|{}large[0]
            final fun <get-large>(): kotlin/String? // cn.rtast.rob.event.raw.message/MessageData.InboundFace.large.<get-large>|<get-large>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundFace.component1|component1(){}[0]
        final fun component2(): kotlin/String? // cn.rtast.rob.event.raw.message/MessageData.InboundFace.component2|component2(){}[0]
        final fun copy(kotlin/String = ..., kotlin/String? = ...): cn.rtast.rob.event.raw.message/MessageData.InboundFace // cn.rtast.rob.event.raw.message/MessageData.InboundFace.copy|copy(kotlin.String;kotlin.String?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/MessageData.InboundFace.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/MessageData.InboundFace.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundFace.toString|toString(){}[0]
    }

    final class InboundImage : cn.rtast.rob.event.raw.message/MessageData { // cn.rtast.rob.event.raw.message/MessageData.InboundImage|null[0]
        constructor <init>(kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String) // cn.rtast.rob.event.raw.message/MessageData.InboundImage.<init>|<init>(kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]

        final val file // cn.rtast.rob.event.raw.message/MessageData.InboundImage.file|{}file[0]
            final fun <get-file>(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundImage.file.<get-file>|<get-file>(){}[0]
        final val filename // cn.rtast.rob.event.raw.message/MessageData.InboundImage.filename|{}filename[0]
            final fun <get-filename>(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundImage.filename.<get-filename>|<get-filename>(){}[0]
        final val subType // cn.rtast.rob.event.raw.message/MessageData.InboundImage.subType|{}subType[0]
            final fun <get-subType>(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundImage.subType.<get-subType>|<get-subType>(){}[0]
        final val summary // cn.rtast.rob.event.raw.message/MessageData.InboundImage.summary|{}summary[0]
            final fun <get-summary>(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundImage.summary.<get-summary>|<get-summary>(){}[0]
        final val url // cn.rtast.rob.event.raw.message/MessageData.InboundImage.url|{}url[0]
            final fun <get-url>(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundImage.url.<get-url>|<get-url>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundImage.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundImage.component2|component2(){}[0]
        final fun component3(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundImage.component3|component3(){}[0]
        final fun component4(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundImage.component4|component4(){}[0]
        final fun component5(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundImage.component5|component5(){}[0]
        final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ...): cn.rtast.rob.event.raw.message/MessageData.InboundImage // cn.rtast.rob.event.raw.message/MessageData.InboundImage.copy|copy(kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/MessageData.InboundImage.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/MessageData.InboundImage.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundImage.toString|toString(){}[0]
    }

    final class InboundJSON : cn.rtast.rob.event.raw.message/MessageData { // cn.rtast.rob.event.raw.message/MessageData.InboundJSON|null[0]
        constructor <init>(kotlin/String) // cn.rtast.rob.event.raw.message/MessageData.InboundJSON.<init>|<init>(kotlin.String){}[0]

        final val data // cn.rtast.rob.event.raw.message/MessageData.InboundJSON.data|{}data[0]
            final fun <get-data>(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundJSON.data.<get-data>|<get-data>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundJSON.component1|component1(){}[0]
        final fun copy(kotlin/String = ...): cn.rtast.rob.event.raw.message/MessageData.InboundJSON // cn.rtast.rob.event.raw.message/MessageData.InboundJSON.copy|copy(kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/MessageData.InboundJSON.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/MessageData.InboundJSON.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundJSON.toString|toString(){}[0]
    }

    final class InboundMFace : cn.rtast.rob.event.raw.message/MessageData { // cn.rtast.rob.event.raw.message/MessageData.InboundMFace|null[0]
        constructor <init>(kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/String) // cn.rtast.rob.event.raw.message/MessageData.InboundMFace.<init>|<init>(kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]

        final val emojiId // cn.rtast.rob.event.raw.message/MessageData.InboundMFace.emojiId|{}emojiId[0]
            final fun <get-emojiId>(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundMFace.emojiId.<get-emojiId>|<get-emojiId>(){}[0]
        final val emojiPackageId // cn.rtast.rob.event.raw.message/MessageData.InboundMFace.emojiPackageId|{}emojiPackageId[0]
            final fun <get-emojiPackageId>(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundMFace.emojiPackageId.<get-emojiPackageId>|<get-emojiPackageId>(){}[0]
        final val key // cn.rtast.rob.event.raw.message/MessageData.InboundMFace.key|{}key[0]
            final fun <get-key>(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundMFace.key.<get-key>|<get-key>(){}[0]
        final val summary // cn.rtast.rob.event.raw.message/MessageData.InboundMFace.summary|{}summary[0]
            final fun <get-summary>(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundMFace.summary.<get-summary>|<get-summary>(){}[0]
        final val url // cn.rtast.rob.event.raw.message/MessageData.InboundMFace.url|{}url[0]
            final fun <get-url>(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundMFace.url.<get-url>|<get-url>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundMFace.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundMFace.component2|component2(){}[0]
        final fun component3(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundMFace.component3|component3(){}[0]
        final fun component4(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundMFace.component4|component4(){}[0]
        final fun component5(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundMFace.component5|component5(){}[0]
        final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ...): cn.rtast.rob.event.raw.message/MessageData.InboundMFace // cn.rtast.rob.event.raw.message/MessageData.InboundMFace.copy|copy(kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/MessageData.InboundMFace.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/MessageData.InboundMFace.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundMFace.toString|toString(){}[0]
    }

    final class InboundRecord : cn.rtast.rob.event.raw.message/MessageData { // cn.rtast.rob.event.raw.message/MessageData.InboundRecord|null[0]
        constructor <init>(kotlin/String, kotlin/String) // cn.rtast.rob.event.raw.message/MessageData.InboundRecord.<init>|<init>(kotlin.String;kotlin.String){}[0]

        final val file // cn.rtast.rob.event.raw.message/MessageData.InboundRecord.file|{}file[0]
            final fun <get-file>(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundRecord.file.<get-file>|<get-file>(){}[0]
        final val url // cn.rtast.rob.event.raw.message/MessageData.InboundRecord.url|{}url[0]
            final fun <get-url>(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundRecord.url.<get-url>|<get-url>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundRecord.component1|component1(){}[0]
        final fun component2(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundRecord.component2|component2(){}[0]
        final fun copy(kotlin/String = ..., kotlin/String = ...): cn.rtast.rob.event.raw.message/MessageData.InboundRecord // cn.rtast.rob.event.raw.message/MessageData.InboundRecord.copy|copy(kotlin.String;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/MessageData.InboundRecord.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/MessageData.InboundRecord.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundRecord.toString|toString(){}[0]
    }

    final class InboundReply : cn.rtast.rob.event.raw.message/MessageData { // cn.rtast.rob.event.raw.message/MessageData.InboundReply|null[0]
        constructor <init>(kotlin/Long) // cn.rtast.rob.event.raw.message/MessageData.InboundReply.<init>|<init>(kotlin.Long){}[0]

        final val id // cn.rtast.rob.event.raw.message/MessageData.InboundReply.id|{}id[0]
            final fun <get-id>(): kotlin/Long // cn.rtast.rob.event.raw.message/MessageData.InboundReply.id.<get-id>|<get-id>(){}[0]

        final fun component1(): kotlin/Long // cn.rtast.rob.event.raw.message/MessageData.InboundReply.component1|component1(){}[0]
        final fun copy(kotlin/Long = ...): cn.rtast.rob.event.raw.message/MessageData.InboundReply // cn.rtast.rob.event.raw.message/MessageData.InboundReply.copy|copy(kotlin.Long){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/MessageData.InboundReply.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/MessageData.InboundReply.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundReply.toString|toString(){}[0]
    }

    final class InboundText : cn.rtast.rob.event.raw.message/MessageData { // cn.rtast.rob.event.raw.message/MessageData.InboundText|null[0]
        constructor <init>(kotlin/String) // cn.rtast.rob.event.raw.message/MessageData.InboundText.<init>|<init>(kotlin.String){}[0]

        final val text // cn.rtast.rob.event.raw.message/MessageData.InboundText.text|{}text[0]
            final fun <get-text>(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundText.text.<get-text>|<get-text>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundText.component1|component1(){}[0]
        final fun copy(kotlin/String = ...): cn.rtast.rob.event.raw.message/MessageData.InboundText // cn.rtast.rob.event.raw.message/MessageData.InboundText.copy|copy(kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/MessageData.InboundText.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/MessageData.InboundText.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundText.toString|toString(){}[0]
    }

    final class InboundXML : cn.rtast.rob.event.raw.message/MessageData { // cn.rtast.rob.event.raw.message/MessageData.InboundXML|null[0]
        constructor <init>(kotlin/String) // cn.rtast.rob.event.raw.message/MessageData.InboundXML.<init>|<init>(kotlin.String){}[0]

        final val data // cn.rtast.rob.event.raw.message/MessageData.InboundXML.data|{}data[0]
            final fun <get-data>(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundXML.data.<get-data>|<get-data>(){}[0]

        final fun component1(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundXML.component1|component1(){}[0]
        final fun copy(kotlin/String = ...): cn.rtast.rob.event.raw.message/MessageData.InboundXML // cn.rtast.rob.event.raw.message/MessageData.InboundXML.copy|copy(kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.event.raw.message/MessageData.InboundXML.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.event.raw.message/MessageData.InboundXML.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.event.raw.message/MessageData.InboundXML.toString|toString(){}[0]
    }
}

sealed class cn.rtast.rob.segment/Segment { // cn.rtast.rob.segment/Segment|null[0]
    final fun plus(cn.rtast.rob.segment/Segment): kotlin.collections/List<cn.rtast.rob.segment/Segment> // cn.rtast.rob.segment/Segment.plus|plus(cn.rtast.rob.segment.Segment){}[0]
    final fun plus(kotlin.collections/List<cn.rtast.rob.segment/Segment>): kotlin.collections/List<cn.rtast.rob.segment/Segment> // cn.rtast.rob.segment/Segment.plus|plus(kotlin.collections.List<cn.rtast.rob.segment.Segment>){}[0]
    final fun plus(kotlin/Boolean): kotlin.collections/List<cn.rtast.rob.segment/Segment> // cn.rtast.rob.segment/Segment.plus|plus(kotlin.Boolean){}[0]
    final fun plus(kotlin/Byte): kotlin.collections/List<cn.rtast.rob.segment/Segment> // cn.rtast.rob.segment/Segment.plus|plus(kotlin.Byte){}[0]
    final fun plus(kotlin/Char): kotlin.collections/List<cn.rtast.rob.segment/Segment> // cn.rtast.rob.segment/Segment.plus|plus(kotlin.Char){}[0]
    final fun plus(kotlin/Double): kotlin.collections/List<cn.rtast.rob.segment/Segment> // cn.rtast.rob.segment/Segment.plus|plus(kotlin.Double){}[0]
    final fun plus(kotlin/Float): kotlin.collections/List<cn.rtast.rob.segment/Segment> // cn.rtast.rob.segment/Segment.plus|plus(kotlin.Float){}[0]
    final fun plus(kotlin/Int): kotlin.collections/List<cn.rtast.rob.segment/Segment> // cn.rtast.rob.segment/Segment.plus|plus(kotlin.Int){}[0]
    final fun plus(kotlin/Long): kotlin.collections/List<cn.rtast.rob.segment/Segment> // cn.rtast.rob.segment/Segment.plus|plus(kotlin.Long){}[0]
    final fun plus(kotlin/Short): kotlin.collections/List<cn.rtast.rob.segment/Segment> // cn.rtast.rob.segment/Segment.plus|plus(kotlin.Short){}[0]
    final fun plus(kotlin/String): kotlin.collections/List<cn.rtast.rob.segment/Segment> // cn.rtast.rob.segment/Segment.plus|plus(kotlin.String){}[0]
    final fun times(kotlin/Int): kotlin.collections/List<cn.rtast.rob.segment/Segment> // cn.rtast.rob.segment/Segment.times|times(kotlin.Int){}[0]
}

final object cn.rtast.rob/OneBotFactory : cn.rtast.rob/BotFactory { // cn.rtast.rob/OneBotFactory|null[0]
    final val botInstanceCount // cn.rtast.rob/OneBotFactory.botInstanceCount|{}botInstanceCount[0]
        final fun <get-botInstanceCount>(): kotlin/Int // cn.rtast.rob/OneBotFactory.botInstanceCount.<get-botInstanceCount>|<get-botInstanceCount>(){}[0]
    final val botManager // cn.rtast.rob/OneBotFactory.botManager|{}botManager[0]
        final fun <get-botManager>(): cn.rtast.rob.util/BotManager // cn.rtast.rob/OneBotFactory.botManager.<get-botManager>|<get-botManager>(){}[0]
    final val commandManager // cn.rtast.rob/OneBotFactory.commandManager|{}commandManager[0]
        final fun <get-commandManager>(): cn.rtast.rob.command/CommandManagerImpl // cn.rtast.rob/OneBotFactory.commandManager.<get-commandManager>|<get-commandManager>(){}[0]
    final val globalScheduler // cn.rtast.rob/OneBotFactory.globalScheduler|{}globalScheduler[0]
        final fun <get-globalScheduler>(): cn.rtast.rob.scheduler/GlobalCoroutineScheduler<cn.rtast.rob/BotInstance> // cn.rtast.rob/OneBotFactory.globalScheduler.<get-globalScheduler>|<get-globalScheduler>(){}[0]
    final val sessionManager // cn.rtast.rob/OneBotFactory.sessionManager|{}sessionManager[0]
        final fun <get-sessionManager>(): cn.rtast.rob.session/SessionManager // cn.rtast.rob/OneBotFactory.sessionManager.<get-sessionManager>|<get-sessionManager>(){}[0]

    final var groupCommandExecutionTimes // cn.rtast.rob/OneBotFactory.groupCommandExecutionTimes|{}groupCommandExecutionTimes[0]
        final fun <get-groupCommandExecutionTimes>(): kotlin/Int // cn.rtast.rob/OneBotFactory.groupCommandExecutionTimes.<get-groupCommandExecutionTimes>|<get-groupCommandExecutionTimes>(){}[0]
        final fun <set-groupCommandExecutionTimes>(kotlin/Int) // cn.rtast.rob/OneBotFactory.groupCommandExecutionTimes.<set-groupCommandExecutionTimes>|<set-groupCommandExecutionTimes>(kotlin.Int){}[0]
    final var privateCommandExecutionTimes // cn.rtast.rob/OneBotFactory.privateCommandExecutionTimes|{}privateCommandExecutionTimes[0]
        final fun <get-privateCommandExecutionTimes>(): kotlin/Int // cn.rtast.rob/OneBotFactory.privateCommandExecutionTimes.<get-privateCommandExecutionTimes>|<get-privateCommandExecutionTimes>(){}[0]
        final fun <set-privateCommandExecutionTimes>(kotlin/Int) // cn.rtast.rob/OneBotFactory.privateCommandExecutionTimes.<set-privateCommandExecutionTimes>|<set-privateCommandExecutionTimes>(kotlin.Int){}[0]
    final var totalCommandExecutionTimes // cn.rtast.rob/OneBotFactory.totalCommandExecutionTimes|{}totalCommandExecutionTimes[0]
        final fun <get-totalCommandExecutionTimes>(): kotlin/Int // cn.rtast.rob/OneBotFactory.totalCommandExecutionTimes.<get-totalCommandExecutionTimes>|<get-totalCommandExecutionTimes>(){}[0]
        final fun <set-totalCommandExecutionTimes>(kotlin/Int) // cn.rtast.rob/OneBotFactory.totalCommandExecutionTimes.<set-totalCommandExecutionTimes>|<set-totalCommandExecutionTimes>(kotlin.Int){}[0]

    final fun clearInterceptor() // cn.rtast.rob/OneBotFactory.clearInterceptor|clearInterceptor(){}[0]
    final fun getInterceptor(): cn.rtast.rob.interceptor/CommandInterceptor // cn.rtast.rob/OneBotFactory.getInterceptor|getInterceptor(){}[0]
    final fun setInterceptor(cn.rtast.rob.interceptor/CommandInterceptor) // cn.rtast.rob/OneBotFactory.setInterceptor|setInterceptor(cn.rtast.rob.interceptor.CommandInterceptor){}[0]
    final fun toString(): kotlin/String // cn.rtast.rob/OneBotFactory.toString|toString(){}[0]
    final suspend fun createClient(kotlin/String, kotlin/String, cn.rtast.rob.onebot/OneBotListener = ..., kotlin.time/Duration = ..., kotlin/Boolean = ..., kotlin.time/Duration = ...): cn.rtast.rob/BotInstance // cn.rtast.rob/OneBotFactory.createClient|createClient(kotlin.String;kotlin.String;cn.rtast.rob.onebot.OneBotListener;kotlin.time.Duration;kotlin.Boolean;kotlin.time.Duration){}[0]
    final suspend fun createServer(kotlin/Int, kotlin/String, cn.rtast.rob.onebot/OneBotListener = ..., kotlin/String = ..., kotlin.time/Duration = ...): cn.rtast.rob/BotInstance // cn.rtast.rob/OneBotFactory.createServer|createServer(kotlin.Int;kotlin.String;cn.rtast.rob.onebot.OneBotListener;kotlin.String;kotlin.time.Duration){}[0]
}

final val cn.rtast.rob.event.raw.message/faces // cn.rtast.rob.event.raw.message/faces|@cn.rtast.rob.event.raw.message.BaseMessage{}faces[0]
    final fun (cn.rtast.rob.event.raw.message/BaseMessage).<get-faces>(): kotlin.collections/List<cn.rtast.rob.event.raw.message/MessageData.InboundFace> // cn.rtast.rob.event.raw.message/faces.<get-faces>|<get-faces>@cn.rtast.rob.event.raw.message.BaseMessage(){}[0]
final val cn.rtast.rob.event.raw.message/faces // cn.rtast.rob.event.raw.message/faces|@cn.rtast.rob.event.raw.message.GetMessage.Message{}faces[0]
    final fun (cn.rtast.rob.event.raw.message/GetMessage.Message).<get-faces>(): kotlin.collections/List<cn.rtast.rob.event.raw.message/MessageData.InboundFace> // cn.rtast.rob.event.raw.message/faces.<get-faces>|<get-faces>@cn.rtast.rob.event.raw.message.GetMessage.Message(){}[0]
final val cn.rtast.rob.event.raw.message/images // cn.rtast.rob.event.raw.message/images|@cn.rtast.rob.event.raw.message.BaseMessage{}images[0]
    final fun (cn.rtast.rob.event.raw.message/BaseMessage).<get-images>(): kotlin.collections/List<cn.rtast.rob.event.raw.message/MessageData.InboundImage> // cn.rtast.rob.event.raw.message/images.<get-images>|<get-images>@cn.rtast.rob.event.raw.message.BaseMessage(){}[0]
final val cn.rtast.rob.event.raw.message/images // cn.rtast.rob.event.raw.message/images|@cn.rtast.rob.event.raw.message.GetMessage.Message{}images[0]
    final fun (cn.rtast.rob.event.raw.message/GetMessage.Message).<get-images>(): kotlin.collections/List<cn.rtast.rob.event.raw.message/MessageData.InboundImage> // cn.rtast.rob.event.raw.message/images.<get-images>|<get-images>@cn.rtast.rob.event.raw.message.GetMessage.Message(){}[0]
final val cn.rtast.rob.event.raw.message/mFace // cn.rtast.rob.event.raw.message/mFace|@cn.rtast.rob.event.raw.message.BaseMessage{}mFace[0]
    final fun (cn.rtast.rob.event.raw.message/BaseMessage).<get-mFace>(): cn.rtast.rob.event.raw.message/MessageData.InboundMFace? // cn.rtast.rob.event.raw.message/mFace.<get-mFace>|<get-mFace>@cn.rtast.rob.event.raw.message.BaseMessage(){}[0]
final val cn.rtast.rob.event.raw.message/mFace // cn.rtast.rob.event.raw.message/mFace|@cn.rtast.rob.event.raw.message.GetMessage.Message{}mFace[0]
    final fun (cn.rtast.rob.event.raw.message/GetMessage.Message).<get-mFace>(): cn.rtast.rob.event.raw.message/MessageData.InboundMFace? // cn.rtast.rob.event.raw.message/mFace.<get-mFace>|<get-mFace>@cn.rtast.rob.event.raw.message.GetMessage.Message(){}[0]
final val cn.rtast.rob.event.raw.message/mFaces // cn.rtast.rob.event.raw.message/mFaces|@cn.rtast.rob.event.raw.message.BaseMessage{}mFaces[0]
    final fun (cn.rtast.rob.event.raw.message/BaseMessage).<get-mFaces>(): kotlin.collections/List<cn.rtast.rob.event.raw.message/MessageData.InboundMFace> // cn.rtast.rob.event.raw.message/mFaces.<get-mFaces>|<get-mFaces>@cn.rtast.rob.event.raw.message.BaseMessage(){}[0]
final val cn.rtast.rob.event.raw.message/mFaces // cn.rtast.rob.event.raw.message/mFaces|@cn.rtast.rob.event.raw.message.GetMessage.Message{}mFaces[0]
    final fun (cn.rtast.rob.event.raw.message/GetMessage.Message).<get-mFaces>(): kotlin.collections/List<cn.rtast.rob.event.raw.message/MessageData.InboundMFace> // cn.rtast.rob.event.raw.message/mFaces.<get-mFaces>|<get-mFaces>@cn.rtast.rob.event.raw.message.GetMessage.Message(){}[0]
final val cn.rtast.rob.event.raw.message/text // cn.rtast.rob.event.raw.message/text|@cn.rtast.rob.event.raw.message.BaseMessage{}text[0]
    final fun (cn.rtast.rob.event.raw.message/BaseMessage).<get-text>(): kotlin/String // cn.rtast.rob.event.raw.message/text.<get-text>|<get-text>@cn.rtast.rob.event.raw.message.BaseMessage(){}[0]
final val cn.rtast.rob.event.raw.message/text // cn.rtast.rob.event.raw.message/text|@cn.rtast.rob.event.raw.message.GetMessage.Message{}text[0]
    final fun (cn.rtast.rob.event.raw.message/GetMessage.Message).<get-text>(): kotlin/String // cn.rtast.rob.event.raw.message/text.<get-text>|<get-text>@cn.rtast.rob.event.raw.message.GetMessage.Message(){}[0]
final val cn.rtast.rob.event.raw.message/texts // cn.rtast.rob.event.raw.message/texts|@cn.rtast.rob.event.raw.message.BaseMessage{}texts[0]
    final fun (cn.rtast.rob.event.raw.message/BaseMessage).<get-texts>(): kotlin.collections/List<kotlin/String> // cn.rtast.rob.event.raw.message/texts.<get-texts>|<get-texts>@cn.rtast.rob.event.raw.message.BaseMessage(){}[0]
final val cn.rtast.rob.event.raw.message/texts // cn.rtast.rob.event.raw.message/texts|@cn.rtast.rob.event.raw.message.GetMessage.Message{}texts[0]
    final fun (cn.rtast.rob.event.raw.message/GetMessage.Message).<get-texts>(): kotlin.collections/List<kotlin/String> // cn.rtast.rob.event.raw.message/texts.<get-texts>|<get-texts>@cn.rtast.rob.event.raw.message.GetMessage.Message(){}[0]

final fun (cn.rtast.rob.event.raw.message/BaseMessage).cn.rtast.rob.event.raw.message/filter(cn.rtast.rob.enums/SegmentType): kotlin.collections/List<cn.rtast.rob.event.raw.message/ArrayMessage> // cn.rtast.rob.event.raw.message/filter|filter@cn.rtast.rob.event.raw.message.BaseMessage(cn.rtast.rob.enums.SegmentType){}[0]
final fun (cn.rtast.rob.event.raw.message/BaseMessage).cn.rtast.rob.event.raw.message/filterAndSerialize(cn.rtast.rob.enums/SegmentType): kotlin.collections/List<cn.rtast.rob.segment/MessageSegment> // cn.rtast.rob.event.raw.message/filterAndSerialize|filterAndSerialize@cn.rtast.rob.event.raw.message.BaseMessage(cn.rtast.rob.enums.SegmentType){}[0]
final fun (cn.rtast.rob.event.raw.message/BaseMessage).cn.rtast.rob.event.raw.message/toPlainText(): kotlin/String // cn.rtast.rob.event.raw.message/toPlainText|toPlainText@cn.rtast.rob.event.raw.message.BaseMessage(){}[0]
final fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/at(kotlin/Long): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/at|at@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Long){}[0]
final fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/atAll(): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/atAll|atAll@cn.rtast.rob.onebot.MessageChain.Builder(){}[0]
final fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/customMusic(kotlin/String, kotlin/String, kotlin/String, kotlin/String? = ..., kotlin/String? = ...): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/customMusic|customMusic@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.String;kotlin.String;kotlin.String;kotlin.String?;kotlin.String?){}[0]
final fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/dice(): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/dice|dice@cn.rtast.rob.onebot.MessageChain.Builder(){}[0]
final fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/face(kotlin/Int): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/face|face@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Int){}[0]
final fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/friendContact(kotlin/Long): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/friendContact|friendContact@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Long){}[0]
final fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/groupContact(kotlin/Long): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/groupContact|groupContact@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Long){}[0]
final fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/image(cn.rtast.rob.entity/Resource): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/image|image@cn.rtast.rob.onebot.MessageChain.Builder(cn.rtast.rob.entity.Resource){}[0]
final fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/json(kotlin/String): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/json|json@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.String){}[0]
final fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/location(kotlin/Double, kotlin/Double, kotlin/String? = ..., kotlin/String? = ...): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/location|location@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Double;kotlin.Double;kotlin.String?;kotlin.String?){}[0]
final fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/mention(kotlin/Long): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/mention|mention@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Long){}[0]
final fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/mentionAll(): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/mentionAll|mentionAll@cn.rtast.rob.onebot.MessageChain.Builder(){}[0]
final fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/music(cn.rtast.rob.enums/MusicShareType, kotlin/String): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/music|music@cn.rtast.rob.onebot.MessageChain.Builder(cn.rtast.rob.enums.MusicShareType;kotlin.String){}[0]
final fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/newline(kotlin/Int = ...): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/newline|newline@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Int){}[0]
final fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/poke(cn.rtast.rob.enums/PokeMessage): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/poke|poke@cn.rtast.rob.onebot.MessageChain.Builder(cn.rtast.rob.enums.PokeMessage){}[0]
final fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/qface(cn.rtast.rob.enums/QQFace): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/qface|qface@cn.rtast.rob.onebot.MessageChain.Builder(cn.rtast.rob.enums.QQFace){}[0]
final fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/reply(kotlin/Long): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/reply|reply@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Long){}[0]
final fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/rps(): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/rps|rps@cn.rtast.rob.onebot.MessageChain.Builder(){}[0]
final fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/shake(): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/shake|shake@cn.rtast.rob.onebot.MessageChain.Builder(){}[0]
final fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/share(kotlin/String, kotlin/String, kotlin/String? = ..., kotlin/String? = ...): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/share|share@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.String;kotlin.String;kotlin.String?;kotlin.String?){}[0]
final fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/spaces(kotlin/Int = ...): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/spaces|spaces@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Int){}[0]
final fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/text(kotlin/String): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/text|text@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.String){}[0]
final fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/textLine(kotlin/String): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/textLine|textLine@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.String){}[0]
final fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/video(kotlin/String): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/video|video@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.String){}[0]
final fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/xml(kotlin/String): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/xml|xml@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.String){}[0]
final fun (cn.rtast.rob.onebot/NodeMessageChain.Builder).cn.rtast.rob.onebot.dsl/messageChain(kotlin/Long, kotlin/Function1<cn.rtast.rob.onebot/MessageChain.Builder, kotlin/Unit>): cn.rtast.rob.onebot/NodeMessageChain.Builder // cn.rtast.rob.onebot.dsl/messageChain|messageChain@cn.rtast.rob.onebot.NodeMessageChain.Builder(kotlin.Long;kotlin.Function1<cn.rtast.rob.onebot.MessageChain.Builder,kotlin.Unit>){}[0]
final fun (cn.rtast.rob.segment/Segment).cn.rtast.rob.segment/plus(cn.rtast.rob.onebot/MessageChain): cn.rtast.rob.onebot/MessageChain // cn.rtast.rob.segment/plus|plus@cn.rtast.rob.segment.Segment(cn.rtast.rob.onebot.MessageChain){}[0]
final fun (cn.rtast.rob.segment/Segment).cn.rtast.rob.segment/toMessageChain(): cn.rtast.rob.onebot/MessageChain // cn.rtast.rob.segment/toMessageChain|toMessageChain@cn.rtast.rob.segment.Segment(){}[0]
final fun (cn.rtast.rob.segment/Segment).cn.rtast.rob.segment/toMessageChainBuilder(): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.segment/toMessageChainBuilder|toMessageChainBuilder@cn.rtast.rob.segment.Segment(){}[0]
final fun (kotlin.collections/Collection<cn.rtast.rob.onebot/MessageChain.Builder>).cn.rtast.rob.onebot/toNode(kotlin/Long): cn.rtast.rob.onebot/NodeMessageChain.Builder // cn.rtast.rob.onebot/toNode|toNode@kotlin.collections.Collection<cn.rtast.rob.onebot.MessageChain.Builder>(kotlin.Long){}[0]
final fun (kotlin.collections/Collection<cn.rtast.rob.onebot/MessageChain>).cn.rtast.rob.onebot/toNode(kotlin/Long): cn.rtast.rob.onebot/NodeMessageChain // cn.rtast.rob.onebot/toNode|toNode@kotlin.collections.Collection<cn.rtast.rob.onebot.MessageChain>(kotlin.Long){}[0]
final fun (kotlin.collections/Collection<cn.rtast.rob.segment/Segment>).cn.rtast.rob.segment/toMessageChain(): cn.rtast.rob.onebot/MessageChain // cn.rtast.rob.segment/toMessageChain|toMessageChain@kotlin.collections.Collection<cn.rtast.rob.segment.Segment>(){}[0]
final fun (kotlin.collections/Collection<cn.rtast.rob.segment/Segment>).cn.rtast.rob.segment/toMessageChainBuilder(): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.segment/toMessageChainBuilder|toMessageChainBuilder@kotlin.collections.Collection<cn.rtast.rob.segment.Segment>(){}[0]
final fun (kotlin.collections/List<cn.rtast.rob.event.raw.message/ArrayMessage>).cn.rtast.rob.event.raw.message/serialize(): kotlin.collections/List<cn.rtast.rob.segment/MessageSegment> // cn.rtast.rob.event.raw.message/serialize|serialize@kotlin.collections.List<cn.rtast.rob.event.raw.message.ArrayMessage>(){}[0]
final fun (kotlin.collections/List<cn.rtast.rob.event.raw.message/ArrayMessage>).cn.rtast.rob.event.raw.message/toSegments(): kotlin.collections/List<cn.rtast.rob.segment/MessageSegment> // cn.rtast.rob.event.raw.message/toSegments|toSegments@kotlin.collections.List<cn.rtast.rob.event.raw.message.ArrayMessage>(){}[0]
final fun (kotlin.collections/List<cn.rtast.rob.segment/MessageSegment>).cn.rtast.rob.event.raw.message/has(kotlin.reflect/KClass<out cn.rtast.rob.segment/MessageSegment>): kotlin/Boolean // cn.rtast.rob.event.raw.message/has|has@kotlin.collections.List<cn.rtast.rob.segment.MessageSegment>(kotlin.reflect.KClass<out|cn.rtast.rob.segment.MessageSegment>){}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Collection<#A>).cn.rtast.rob.onebot/toMessageChainBuilderString(kotlin/Boolean = ...): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot/toMessageChainBuilderString|toMessageChainBuilderString@kotlin.collections.Collection<0:0>(kotlin.Boolean){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Collection<#A?>).cn.rtast.rob.onebot/toMessageChainString(kotlin/Boolean = ..., kotlin/Boolean = ...): cn.rtast.rob.onebot/MessageChain // cn.rtast.rob.onebot/toMessageChainString|toMessageChainString@kotlin.collections.Collection<0:0?>(kotlin.Boolean;kotlin.Boolean){0§<kotlin.Any?>}[0]
final fun cn.rtast.rob.event.raw.message/hasSegment(kotlin.collections/List<cn.rtast.rob.segment/MessageSegment>, kotlin.reflect/KClass<out cn.rtast.rob.segment/MessageSegment>): kotlin/Boolean // cn.rtast.rob.event.raw.message/hasSegment|hasSegment(kotlin.collections.List<cn.rtast.rob.segment.MessageSegment>;kotlin.reflect.KClass<out|cn.rtast.rob.segment.MessageSegment>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/at(kotlin/Function1<cn.rtast.rob.segment/AT, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/at|at@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.AT,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/atAll(kotlin/Function1<cn.rtast.rob.segment/AtAll, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/atAll|atAll@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.AtAll,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/customMusic(kotlin/Function1<cn.rtast.rob.segment/CustomMusicShare, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/customMusic|customMusic@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.CustomMusicShare,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/dice(kotlin/Function1<cn.rtast.rob.segment/Dice, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/dice|dice@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.Dice,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/face(kotlin/Function1<cn.rtast.rob.segment/Face, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/face|face@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.Face,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/friendContact(kotlin/Function1<cn.rtast.rob.segment/FriendContact, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/friendContact|friendContact@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.FriendContact,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/groupContact(kotlin/Function1<cn.rtast.rob.segment/GroupContact, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/groupContact|groupContact@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.GroupContact,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/image(kotlin/Function1<cn.rtast.rob.segment/Image, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/image|image@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.Image,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/json(kotlin/Function1<cn.rtast.rob.segment/JSON, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/json|json@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.JSON,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/location(kotlin/Function1<cn.rtast.rob.segment/Location, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/location|location@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.Location,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/mention(kotlin/Function1<cn.rtast.rob.segment/AT, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/mention|mention@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.AT,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/mentionAll(kotlin/Function1<cn.rtast.rob.segment/AtAll, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/mentionAll|mentionAll@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.AtAll,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/messageChain(kotlin/Function1<cn.rtast.rob.onebot/MessageChain.Builder, kotlin/Unit>) // cn.rtast.rob.onebot.dsl/messageChain|messageChain@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.onebot.MessageChain.Builder,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/music(kotlin/Function1<cn.rtast.rob.segment/MusicShare, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/music|music@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.MusicShare,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/newline(kotlin/Function1<cn.rtast.rob.segment/NewLine, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/newline|newline@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.NewLine,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/poke(kotlin/Function1<cn.rtast.rob.segment/Poke, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/poke|poke@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.Poke,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/qface(kotlin/Function1<cn.rtast.rob.segment/QFace, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/qface|qface@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.QFace,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/record(kotlin/Function1<cn.rtast.rob.segment/Record, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/record|record@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.Record,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/reply(kotlin/Function1<cn.rtast.rob.segment/Reply, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/reply|reply@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.Reply,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/rps(kotlin/Function1<cn.rtast.rob.segment/Rps, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/rps|rps@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.Rps,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/shake(kotlin/Function1<cn.rtast.rob.segment/Shake, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/shake|shake@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.Shake,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/share(kotlin/Function1<cn.rtast.rob.segment/Share, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/share|share@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.Share,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/spaces(kotlin/Function1<cn.rtast.rob.segment/Spaces, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/spaces|spaces@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.Spaces,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/text(kotlin/Function1<cn.rtast.rob.segment/Text, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/text|text@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.Text,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/textLine(kotlin/Function1<cn.rtast.rob.segment/Text, kotlin/Unit>) // cn.rtast.rob.onebot.dsl/textLine|textLine@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.Text,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/video(kotlin/Function1<cn.rtast.rob.segment/Video, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/video|video@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.Video,kotlin.Unit>){}[0]
final inline fun (cn.rtast.rob.onebot/MessageChain.Builder).cn.rtast.rob.onebot.dsl/xml(kotlin/Function1<cn.rtast.rob.segment/XML, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain.Builder // cn.rtast.rob.onebot.dsl/xml|xml@cn.rtast.rob.onebot.MessageChain.Builder(kotlin.Function1<cn.rtast.rob.segment.XML,kotlin.Unit>){}[0]
final inline fun cn.rtast.rob.onebot.dsl/messageChain(kotlin/Function1<cn.rtast.rob.onebot/MessageChain.Builder, kotlin/Unit>): cn.rtast.rob.onebot/MessageChain // cn.rtast.rob.onebot.dsl/messageChain|messageChain(kotlin.Function1<cn.rtast.rob.onebot.MessageChain.Builder,kotlin.Unit>){}[0]
final inline fun cn.rtast.rob.onebot.dsl/nodeMessageChain(kotlin/Function1<cn.rtast.rob.onebot/NodeMessageChain.Builder, kotlin/Unit>): cn.rtast.rob.onebot/NodeMessageChain // cn.rtast.rob.onebot.dsl/nodeMessageChain|nodeMessageChain(kotlin.Function1<cn.rtast.rob.onebot.NodeMessageChain.Builder,kotlin.Unit>){}[0]
final suspend fun (kotlin/Long).cn.rtast.rob.event.raw.message/revoke(cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.message/revoke|revoke@kotlin.Long(cn.rtast.rob.onebot.OneBotAction){}[0]
final suspend fun (kotlin/Long).cn.rtast.rob.event.raw.message/revoke(kotlin.time/Duration, cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.message/revoke|revoke@kotlin.Long(kotlin.time.Duration;cn.rtast.rob.onebot.OneBotAction){}[0]
final suspend fun (kotlin/Long).cn.rtast.rob.event.raw.message/revoke(kotlin/Int, cn.rtast.rob.onebot/OneBotAction) // cn.rtast.rob.event.raw.message/revoke|revoke@kotlin.Long(kotlin.Int;cn.rtast.rob.onebot.OneBotAction){}[0]
final suspend fun (kotlin/Long).cn.rtast.rob.event.raw/getStranger(cn.rtast.rob.onebot/OneBotAction): cn.rtast.rob.event.raw.info/StrangerInfo.StrangerInfo // cn.rtast.rob.event.raw/getStranger|getStranger@kotlin.Long(cn.rtast.rob.onebot.OneBotAction){}[0]
final suspend fun cn.rtast.rob.util.ws/createClient(kotlin/String, kotlin/String, cn.rtast.rob.onebot/OneBotListener, kotlin/Boolean, cn.rtast.rob/BotInstance, kotlin/Long, kotlin.time/Duration): cn.rtast.rob.util.ws/WebsocketSession // cn.rtast.rob.util.ws/createClient|createClient(kotlin.String;kotlin.String;cn.rtast.rob.onebot.OneBotListener;kotlin.Boolean;cn.rtast.rob.BotInstance;kotlin.Long;kotlin.time.Duration){}[0]
final suspend fun cn.rtast.rob.util.ws/createServer(kotlin/Int, kotlin/String, cn.rtast.rob.onebot/OneBotListener, cn.rtast.rob/BotInstance, kotlin/String, kotlin.time/Duration): cn.rtast.rob.util.ws/WebsocketSession // cn.rtast.rob.util.ws/createServer|createServer(kotlin.Int;kotlin.String;cn.rtast.rob.onebot.OneBotListener;cn.rtast.rob.BotInstance;kotlin.String;kotlin.time.Duration){}[0]
