// Klib ABI Dump
// Targets: [linuxArm64, linuxX64, macosArm64, macosX64, mingwX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <cn.rtast.rob:ronebot-string-format>
final class cn.rtast.rob.sformat.table/Table { // cn.rtast.rob.sformat.table/Table|null[0]
    final fun toString(): kotlin/String // cn.rtast.rob.sformat.table/Table.toString|toString(){}[0]

    final class Builder { // cn.rtast.rob.sformat.table/Table.Builder|null[0]
        constructor <init>(kotlin/Int = ..., kotlin.collections/MutableList<kotlin.collections/List<kotlin/String>> = ...) // cn.rtast.rob.sformat.table/Table.Builder.<init>|<init>(kotlin.Int;kotlin.collections.MutableList<kotlin.collections.List<kotlin.String>>){}[0]

        final fun addRow(kotlin/Array<out kotlin/String>...): cn.rtast.rob.sformat.table/Table.Builder // cn.rtast.rob.sformat.table/Table.Builder.addRow|addRow(kotlin.Array<out|kotlin.String>...){}[0]
        final fun build(): cn.rtast.rob.sformat.table/Table // cn.rtast.rob.sformat.table/Table.Builder.build|build(){}[0]
        final fun copy(kotlin/Int = ..., kotlin.collections/MutableList<kotlin.collections/List<kotlin/String>> = ...): cn.rtast.rob.sformat.table/Table.Builder // cn.rtast.rob.sformat.table/Table.Builder.copy|copy(kotlin.Int;kotlin.collections.MutableList<kotlin.collections.List<kotlin.String>>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // cn.rtast.rob.sformat.table/Table.Builder.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // cn.rtast.rob.sformat.table/Table.Builder.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // cn.rtast.rob.sformat.table/Table.Builder.toString|toString(){}[0]
    }
}

final object cn.rtast.rob.sformat.md/Flavor { // cn.rtast.rob.sformat.md/Flavor|null[0]
    final val CMF // cn.rtast.rob.sformat.md/Flavor.CMF|{}CMF[0]
        final fun <get-CMF>(): org.intellij.markdown.flavours.commonmark/CommonMarkFlavourDescriptor // cn.rtast.rob.sformat.md/Flavor.CMF.<get-CMF>|<get-CMF>(){}[0]
    final val GFM // cn.rtast.rob.sformat.md/Flavor.GFM|{}GFM[0]
        final fun <get-GFM>(): org.intellij.markdown.flavours.gfm/GFMFlavourDescriptor // cn.rtast.rob.sformat.md/Flavor.GFM.<get-GFM>|<get-GFM>(){}[0]
    final val SFM // cn.rtast.rob.sformat.md/Flavor.SFM|{}SFM[0]
        final fun <get-SFM>(): org.intellij.markdown.flavours.space/SFMFlavourDescriptor // cn.rtast.rob.sformat.md/Flavor.SFM.<get-SFM>|<get-SFM>(){}[0]
}

final fun (cn.rtast.rob.sformat.table/Table.Builder).cn.rtast.rob.sformat.table.dsl/row(kotlin/Array<out kotlin/String>...): cn.rtast.rob.sformat.table/Table.Builder // cn.rtast.rob.sformat.table.dsl/row|row@cn.rtast.rob.sformat.table.Table.Builder(kotlin.Array<out|kotlin.String>...){}[0]
final fun (kotlin/String).cn.rtast.rob.sformat.md/toHtml(org.intellij.markdown.flavours/MarkdownFlavourDescriptor = ...): kotlin/String // cn.rtast.rob.sformat.md/toHtml|toHtml@kotlin.String(org.intellij.markdown.flavours.MarkdownFlavourDescriptor){}[0]
final inline fun cn.rtast.rob.sformat.table.dsl/table(kotlin/Function1<cn.rtast.rob.sformat.table/Table.Builder, kotlin/Unit>): cn.rtast.rob.sformat.table/Table // cn.rtast.rob.sformat.table.dsl/table|table(kotlin.Function1<cn.rtast.rob.sformat.table.Table.Builder,kotlin.Unit>){}[0]
